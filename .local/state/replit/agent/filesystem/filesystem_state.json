{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a comprehensive maternal health tracking application built with React, TypeScript, and Express.js. The app provides expectant mothers with tools to monitor their pregnancy journey, including kick counting, weight tracking, birth planning, photo albums, diary entries, and community features. The application features a modern, mobile-first design with a warm color palette optimized for the maternal health experience.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# Recent Changes\n\n## Sistema de Imagens para Desenvolvimento do Bebê Implementado (Setembro 02, 2025)\n- **Campo fruit_image_url adicionado à tabela baby_development**:\n  - Novo campo para armazenar URLs de imagens das frutas/grãos de comparação\n  - Campo adicionado automaticamente via ALTER TABLE no banco PostgreSQL\n  - Sistema funciona com imagens anexadas via @assets/filename.extension\n- **Sistema automatizado de inserção de imagens realistas**:\n  - Mapeamento completo de frutas/objetos para imagens sem fundo\n  - Endpoint POST /api/baby-development/auto-insert-images para inserção automática\n  - Sistema busca comparações no banco e associa imagens correspondentes\n  - Imagens realistas incluem: grão de areia, alfinete, chia, papoula, framboesa, lima, limão, banana, milho, berinjela\n- **APIs criadas para gerenciamento de imagens**:\n  - POST /api/baby-development/add-image-field - Adiciona campo fruit_image_url\n  - POST /api/baby-development/auto-insert-images - Sistema automatizado completo\n  - GET /api/public/baby-development/comparisons - Visualizar comparações (sem autenticação)\n  - Endpoints individuais para semanas específicas (1, 2, 3) mantidos para compatibilidade\n  - Sistema escalável para adicionar imagens de todas as semanas gestacionais\n\n## Complete User Activity Logging System Implemented (August 27, 2025)\n- **Analytics tables successfully created in Supabase database**:\n  - `user_analytics` - Tracks all user actions, clicks, page views, timestamps\n  - `access_logs` - Records login/logout attempts and authentication events\n  - `user_sessions` - Monitors session duration and user engagement\n  - Tables auto-created on server startup with proper SQL structure\n- **Comprehensive activity tracking now operational**:\n  - Weight registration logs automatically with exact timestamps\n  - Every user action recorded with user ID, session ID, page, and metadata\n  - **Login/logout events logged in access_logs table**\n  - Endpoint `/api/user-logs` provides complete activity history\n  - Real-time logging of user behavior patterns and app usage\n- **Database integration fully functional**:\n  - PostgreSQL tables created using direct SQL execution\n  - Storage methods implemented for all CRUD operations\n  - Auto-initialization prevents missing table errors\n  - Full compatibility with existing weight tracking system\n\n## UI/UX Overhaul - Complete Sidebar Removal (August 27, 2025)\n- **Completely removed sidebar navigation system**:\n  - Removed Sidebar component from Layout.tsx\n  - Removed all lateral menu functionality for mobile and desktop\n  - Interface now uses only page-based navigation through dashboard\n  - All features accessible through grid-based colored buttons on main dashboard page\n  - Clean, sidebar-free interface optimized for mobile-first experience\n  - Analytics menu item removed from user interface (September 02, 2025)\n- **Weight tracking system rebuilt**:\n  - Fixed weight registration with new weight_entries table\n  - Added proper date field to weight registration form\n  - Updated API endpoints to use /api/weight-entries\n  - Corrected database schema for weight tracking functionality\n- **Enhanced mobile-first design**:\n  - Improved bottom navigation with functional buttons\n  - Optimized for mobile interaction patterns\n  - Color-coded feature buttons for better visual hierarchy\n  - Consistent gradient design across all interface elements\n\n## Full Authentication System Working with Supabase (August 23, 2025)\n- **Complete Supabase integration operational**:\n  - Database connection established and stable\n  - RLS policies disabled for user operations\n  - Drizzle ORM successfully inserting and querying users\n  - Users table fully functional with proper schema including created_at\n- **Authentication system confirmed working**:\n  - User registration: Creates users in Supabase database\n  - User login: Validates credentials against Supabase data\n  - Password hashing: bcryptjs working correctly (60-character hashes)\n  - Session management: Express-session storing user sessions\n  - **Duplicate user prevention**: Fixed registration system preventing duplicate emails\n- **Password recovery system fully operational**:\n  - 4-digit numerical verification codes (not UUIDs)\n  - HTML email templates with Mama Care branding\n  - Combined token verification and password reset interface\n  - Gmail SMTP confirmed delivering emails successfully\n  - Password updates working correctly in Supabase database\n  - Login works immediately after password reset\n- **User Analytics System Implemented**:\n  - User creation date tracking (created_at column added)\n  - Comprehensive analytics system for tracking user behavior\n  - User sessions tracking with start/end times and duration\n  - Analytics logging for page views, clicks, and user interactions\n  - Database tables: user_analytics, user_sessions, access_logs\n- **Database structure verified**:\n  - Users table: id (VARCHAR), email (TEXT), password (TEXT), name (TEXT), created_at (TIMESTAMP)\n  - Password hashes properly stored (60 characters, bcrypt format)\n  - Email uniqueness enforced at database level\n  - All CRUD operations working through Drizzle ORM\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **Styling**: Tailwind CSS with shadcn/ui component library for consistent UI components\n- **State Management**: TanStack React Query for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Authentication**: Session-based authentication with context provider pattern\n- **Mobile-First Design**: Responsive design with bottom navigation optimized for mobile usage\n\n## Backend Architecture\n- **Framework**: Express.js with TypeScript\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **Session Management**: Express-session for user authentication\n- **File Upload**: Uppy integration with object storage capabilities\n- **API Design**: RESTful API endpoints with consistent error handling and logging middleware\n\n## Database Design\n- **Database**: PostgreSQL with Drizzle ORM\n- **Schema**: Comprehensive pregnancy tracking schema including:\n  - Users and authentication\n  - Pregnancy records with due dates\n  - Kick counts with timestamped tracking\n  - Weight records with historical data\n  - Birth plans with customizable preferences\n  - Photo albums with metadata\n  - Diary entries with mood tracking\n  - Symptoms and medications tracking\n  - Community features (posts, comments, likes)\n\n## Authentication & Authorization\n- **Session-based Authentication**: Uses express-session with secure cookie configuration\n- **Protected Routes**: Middleware-based route protection requiring authentication\n- **User Registration**: Email-based registration with password hashing (bcryptjs)\n- **Object-level ACL**: Custom access control list system for file storage permissions\n\n## File Storage Integration\n- **Cloud Storage**: Google Cloud Storage integration with Replit sidecar\n- **Upload Management**: Uppy dashboard for file uploads with progress tracking\n- **Access Control**: Custom ACL policies for object-level permissions\n- **Direct Upload**: Presigned URL pattern for direct-to-cloud uploads\n\n## Key Features Architecture\n- **Pregnancy Tracking**: Week-based progression with trimester calculations\n- **Kick Counter**: Real-time tracking with session storage and database persistence\n- **Weight Monitoring**: Historical tracking with chart visualization (Recharts)\n- **Birth Plan Generator**: PDF generation capabilities with customizable templates\n- **Community Platform**: Social features with posts, comments, and engagement\n- **Photo Album**: Image storage with pregnancy week tagging\n- **Symptom & Medication Tracking**: Healthcare data management with severity tracking\n\n# External Dependencies\n\n## Core Technologies\n- **React & TypeScript**: Frontend framework and type safety\n- **Express.js**: Backend web framework\n- **PostgreSQL**: Primary database via Neon Database serverless\n- **Drizzle ORM**: Database toolkit and migration system\n\n## UI & Styling\n- **Tailwind CSS**: Utility-first CSS framework\n- **Radix UI**: Accessible component primitives (@radix-ui/*)\n- **Recharts**: Chart library for data visualization\n- **Lucide React**: Icon library\n\n## Cloud Services\n- **Google Cloud Storage**: File storage and management (@google-cloud/storage)\n- **Neon Database**: Serverless PostgreSQL hosting (@neondatabase/serverless)\n\n## File Upload & Management\n- **Uppy**: File upload library with dashboard (@uppy/*)\n- **PDF Generation**: jsPDF for birth plan document generation\n\n## Development Tools\n- **Vite**: Build tool and development server\n- **ESBuild**: JavaScript bundler for production builds\n- **TanStack React Query**: Server state management\n- **Wouter**: Lightweight routing library\n- **Zod**: Runtime type validation with Drizzle integration\n\n## Authentication & Security\n- **bcryptjs**: Password hashing\n- **express-session**: Session management\n- **Session store**: In-memory session storage (development)\n\n## Additional Libraries\n- **React Hook Form**: Form state management with validation\n- **Class Variance Authority**: Component variant management\n- **Nanoid**: URL-safe ID generation","size_bytes":9795},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        // Custom maternity colors\n        'baby-pink': 'var(--baby-pink)',\n        'baby-pink-dark': 'var(--baby-pink-dark)',\n        'baby-blue': 'var(--baby-blue)',\n        'baby-blue-dark': 'var(--baby-blue-dark)',\n        'coral': 'var(--coral)',\n        'cream': 'var(--cream)',\n        'charcoal': 'var(--charcoal)',\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"float\": \"float 3s ease-in-out infinite\",\n        \"pulse-slow\": \"pulse 3s infinite\",\n        \"bounce-slow\": \"bounce 2s infinite\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        \"float\": {\n          \"0%, 100%\": {\n            transform: \"translateY(0px)\",\n          },\n          \"50%\": {\n            transform: \"translateY(-10px)\",\n          },\n        },\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3413},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Add cache control headers to prevent caching issues in development\napp.use((req, res, next) => {\n  if (app.get(\"env\") === \"development\") {\n    // Disable caching for all requests in development\n    res.set('Cache-Control', 'no-store, no-cache, must-revalidate, proxy-revalidate');\n    res.set('Pragma', 'no-cache');\n    res.set('Expires', '0');\n    res.set('Surrogate-Control', 'no-store');\n    \n    // Add etag headers to help with cache invalidation\n    res.set('Etag', `\"${Date.now()}\"`);\n  }\n  next();\n});\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Initialize analytics tables on server startup\n  console.log(\"🔧 Initializing analytics tables...\");\n  try {\n    const { storage } = await import('./storage.js');\n    await storage.logUserAction({\n      userId: \"system-init\",\n      sessionId: \"system-init\", \n      action: 'server_startup',\n      page: '/system',\n      element: 'init'\n    });\n    console.log(\"✅ Analytics tables initialized successfully\");\n  } catch (error) {\n    console.error(\"❌ Error initializing analytics tables:\", error);\n  }\n\n  const server = await registerRoutes(app);\n\n  // Handle API routing before Vite middleware to prevent catch-all conflicts\n  app.use('/api', (req, res, next) => {\n    // If the API route wasn't handled, it means it doesn't exist\n    if (!res.headersSent) {\n      return res.status(404).json({ error: 'API endpoint not found' });\n    }\n    next();\n  });\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":3400},"server/nodemailer.ts":{"content":"import nodemailer from 'nodemailer';\n\ninterface EmailConfig {\n  host: string;\n  port: number;\n  secure: boolean;\n  auth: {\n    user: string;\n    pass: string;\n  };\n}\n\n// Configurações para diferentes provedores\nconst emailConfigs: Record<string, EmailConfig> = {\n  gmail: {\n    host: 'smtp.gmail.com',\n    port: 587,\n    secure: false,\n    auth: {\n      user: process.env.EMAIL_USER || '',\n      pass: process.env.EMAIL_PASS || ''\n    }\n  },\n  outlook: {\n    host: 'smtp-mail.outlook.com',\n    port: 587,\n    secure: false,\n    auth: {\n      user: process.env.EMAIL_USER || '',\n      pass: process.env.EMAIL_PASS || ''\n    }\n  },\n  yahoo: {\n    host: 'smtp.mail.yahoo.com',\n    port: 587,\n    secure: false,\n    auth: {\n      user: process.env.EMAIL_USER || '',\n      pass: process.env.EMAIL_PASS || ''\n    }\n  }\n};\n\nexport async function sendPasswordResetEmail(email: string, resetToken: string): Promise<boolean> {\n  // Verificar se as credenciais do Gmail estão disponíveis\n  if (!process.env.GMAIL_USER || !process.env.GMAIL_APP_PASSWORD) {\n    console.log(`🔄 Email simulado para: ${email}`);\n    console.log(`🔑 Token de reset: ${resetToken}`);\n    console.log(`🌐 Link de reset: http://localhost:5000/reset-password?token=${resetToken}`);\n    return true;\n  }\n\n  try {\n    // Configuração específica para Gmail com as novas variáveis\n    console.log('📧 Configurando Gmail SMTP para Mama Care');\n    const transporter = nodemailer.createTransport({\n      host: 'smtp.gmail.com',\n      port: 587,\n      secure: false,\n      auth: {\n        user: process.env.GMAIL_USER,\n        pass: process.env.GMAIL_APP_PASSWORD,\n      },\n      tls: {\n        rejectUnauthorized: false\n      }\n    });\n\n    // Verificar conexão\n    await transporter.verify();\n\n    const resetUrl = `${process.env.NODE_ENV === 'production' ? 'https://yourapp.replit.app' : 'http://localhost:5000'}/reset-password?token=${resetToken}`;\n\n    const mailOptions = {\n      from: {\n        name: 'Mama Care',\n        address: process.env.GMAIL_USER\n      },\n      to: email,\n      subject: '🤱 Recuperação de Senha - Mama Care',\n      html: `\n        <!DOCTYPE html>\n        <html>\n        <head>\n          <meta charset=\"utf-8\">\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n          <title>Código de Verificação - Mama Care</title>\n        </head>\n        <body style=\"margin: 0; padding: 0; background-color: #f8fafc; font-family: Arial, sans-serif;\">\n          <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" style=\"background-color: #f8fafc; padding: 20px;\">\n            <tr>\n              <td align=\"center\">\n                <table width=\"600\" cellpadding=\"0\" cellspacing=\"0\" style=\"background-color: #ffffff; border-radius: 16px; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); overflow: hidden;\">\n                  \n                  <!-- Header -->\n                  <tr>\n                    <td style=\"background: linear-gradient(135deg, #ec4899, #8b5cf6); padding: 40px 20px; text-align: center;\">\n                      <div style=\"width: 60px; height: 60px; background-color: rgba(255,255,255,0.2); border-radius: 50%; margin: 0 auto 20px; display: flex; align-items: center; justify-content: center;\">\n                        <span style=\"font-size: 30px;\">👶</span>\n                      </div>\n                      <h1 style=\"color: #ffffff; margin: 0; font-size: 28px; font-weight: bold;\">Mama Care</h1>\n                      <p style=\"color: #ffffff; margin: 10px 0 0; font-size: 16px; opacity: 0.9;\">Cuidando de você e seu bebê</p>\n                    </td>\n                  </tr>\n                  \n                  <!-- Content -->\n                  <tr>\n                    <td style=\"padding: 40px 30px; text-align: center;\">\n                      <div style=\"width: 80px; height: 80px; background: linear-gradient(135deg, #fef3c7, #ddd6fe); border-radius: 50%; margin: 0 auto 30px; display: flex; align-items: center; justify-content: center;\">\n                        <span style=\"font-size: 40px;\">🔐</span>\n                      </div>\n                      \n                      <h2 style=\"color: #1f2937; margin: 0 0 20px; font-size: 24px; font-weight: bold;\">Código de Verificação</h2>\n                      \n                      <p style=\"color: #6b7280; margin: 0 0 30px; font-size: 16px; line-height: 1.6;\">\n                        Use o código abaixo para redefinir a senha da sua conta no Mama Care.\n                      </p>\n                      \n                      <!-- Token Box -->\n                      <div style=\"background: linear-gradient(135deg, #ec4899, #8b5cf6); padding: 25px; border-radius: 12px; margin: 30px 0;\">\n                        <div style=\"color: #ffffff; font-size: 36px; font-weight: bold; letter-spacing: 8px; font-family: 'Courier New', monospace;\">\n                          ${resetToken}\n                        </div>\n                      </div>\n                      \n                      <!-- Security Info -->\n                      <div style=\"background-color: #fef3c7; padding: 20px; border-radius: 12px; margin: 30px 0; text-align: left;\">\n                        <p style=\"margin: 0 0 15px; color: #92400e; font-size: 16px; font-weight: bold;\">🛡️ Por segurança:</p>\n                        <ul style=\"margin: 0; color: #92400e; font-size: 14px; line-height: 1.8; padding-left: 20px;\">\n                          <li>Este código expira em <strong>10 minutos</strong></li>\n                          <li>Se você não solicitou esta recuperação, pode ignorar este email</li>\n                          <li>Nunca compartilhe este código com outras pessoas</li>\n                        </ul>\n                      </div>\n                    </td>\n                  </tr>\n                  \n                  <!-- Footer -->\n                  <tr>\n                    <td style=\"background-color: #f8fafc; padding: 20px; text-align: center; border-top: 1px solid #e5e7eb;\">\n                      <p style=\"color: #9ca3af; font-size: 12px; margin: 0 0 10px;\">\n                        Este email foi enviado automaticamente. Por favor, não responda.\n                      </p>\n                      <p style=\"color: #6b7280; font-size: 14px; margin: 0; font-weight: bold;\">\n                        Mama Care - Sua jornada maternal, nossa prioridade 💕\n                      </p>\n                    </td>\n                  </tr>\n                  \n                </table>\n              </td>\n            </tr>\n          </table>\n        </body>\n        </html>\n      `,\n      text: `\n🤱 MAMA CARE - Recuperação de Senha\n\nOlá!\n\nRecebemos uma solicitação para redefinir a senha da sua conta no Mama Care.\n\nPara criar uma nova senha, acesse o link abaixo:\n${resetUrl}\n\n🔐 IMPORTANTE:\n- Este link expira em 1 hora por motivos de segurança\n- Se você não solicitou esta recuperação, pode ignorar este email\n- Nunca compartilhe este link com outras pessoas\n\nObrigado por confiar no Mama Care!\n\n---\nEste é um email automático, por favor não responda.\nMama Care - Cuidando de você e seu bebê 💕\n      `\n    };\n\n    await transporter.sendMail(mailOptions);\n    console.log(`✅ Email enviado com sucesso para: ${email}`);\n    return true;\n\n  } catch (error: any) {\n    console.error('❌ Erro ao enviar email:', error.message);\n    \n    // Para desenvolvimento, simular sucesso mesmo com erro\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`🔄 Simulando envio para: ${email}`);\n      console.log(`🔑 Token de reset: ${resetToken}`);\n      return true;\n    }\n    \n    return false;\n  }\n}\n\n// Função para testar configuração de email\nexport async function testEmailConfig(): Promise<boolean> {\n  if (!process.env.GMAIL_USER || !process.env.GMAIL_APP_PASSWORD) {\n    console.log('⚠️  Configuração de Gmail não encontrada (GMAIL_USER, GMAIL_APP_PASSWORD)');\n    return false;\n  }\n\n  try {\n    const transporter = nodemailer.createTransport({\n      service: 'gmail',\n      auth: {\n        user: process.env.GMAIL_USER,\n        pass: process.env.GMAIL_APP_PASSWORD,\n      },\n    });\n    \n    await transporter.verify();\n    console.log(`✅ Configuração de Gmail válida para Mama Care`);\n    return true;\n  } catch (error: any) {\n    console.error('❌ Erro na configuração de Gmail:', error.message);\n    return false;\n  }\n}","size_bytes":8398},"server/objectAcl.ts":{"content":"import { File } from \"@google-cloud/storage\";\n\nconst ACL_POLICY_METADATA_KEY = \"custom:aclPolicy\";\n\n// The type of the access group.\n//\n// Can be flexibly defined according to the use case.\n//\n// Examples:\n// - USER_LIST: the users from a list stored in the database;\n// - EMAIL_DOMAIN: the users whose email is in a specific domain;\n// - GROUP_MEMBER: the users who are members of a specific group;\n// - SUBSCRIBER: the users who are subscribers of a specific service / content\n//   creator.\nexport enum ObjectAccessGroupType {}\n\n// The logic user group that can access the object.\nexport interface ObjectAccessGroup {\n  // The type of the access group.\n  type: ObjectAccessGroupType;\n  // The logic id that is enough to identify the qualified group members.\n  //\n  // It may have different format for different types. For example:\n  // - for USER_LIST, the id could be the user list db entity id, and the\n  //   user list db entity could contain a bunch of user ids. User needs\n  //   to be a member of the user list to be able to access the object.\n  // - for EMAIL_DOMAIN, the id could be the email domain, and the user needs\n  //   to have an email with the domain to be able to access the object.\n  // - for GROUP_MEMBER, the id could be the group db entity id, and the\n  //   group db entity could contain a bunch of user ids. User needs to be\n  //   a member of the group to be able to access the object.\n  // - for SUBSCRIBER, the id could be the subscriber db entity id, and the\n  //   subscriber db entity could contain a bunch of user ids. User needs to\n  //   be a subscriber to be able to access the object.\n  id: string;\n}\n\nexport enum ObjectPermission {\n  READ = \"read\",\n  WRITE = \"write\",\n}\n\nexport interface ObjectAclRule {\n  group: ObjectAccessGroup;\n  permission: ObjectPermission;\n}\n\n// The ACL policy of the object.\n// This would be set as part of the object custom metadata:\n// - key: \"custom:aclPolicy\"\n// - value: JSON string of the ObjectAclPolicy object.\nexport interface ObjectAclPolicy {\n  owner: string;\n  visibility: \"public\" | \"private\";\n  aclRules?: Array<ObjectAclRule>;\n}\n\n// Check if the requested permission is allowed based on the granted permission.\nfunction isPermissionAllowed(\n  requested: ObjectPermission,\n  granted: ObjectPermission,\n): boolean {\n  // Users granted with read or write permissions can read the object.\n  if (requested === ObjectPermission.READ) {\n    return [ObjectPermission.READ, ObjectPermission.WRITE].includes(granted);\n  }\n\n  // Only users granted with write permissions can write the object.\n  return granted === ObjectPermission.WRITE;\n}\n\n// The base class for all access groups.\n//\n// Different types of access groups can be implemented according to the use case.\nabstract class BaseObjectAccessGroup implements ObjectAccessGroup {\n  constructor(\n    public readonly type: ObjectAccessGroupType,\n    public readonly id: string,\n  ) {}\n\n  // Check if the user is a member of the group.\n  public abstract hasMember(userId: string): Promise<boolean>;\n}\n\nfunction createObjectAccessGroup(\n  group: ObjectAccessGroup,\n): BaseObjectAccessGroup {\n  switch (group.type) {\n    // Implement the case for each type of access group to instantiate.\n    //\n    // For example:\n    // case \"USER_LIST\":\n    //   return new UserListAccessGroup(group.id);\n    // case \"EMAIL_DOMAIN\":\n    //   return new EmailDomainAccessGroup(group.id);\n    // case \"GROUP_MEMBER\":\n    //   return new GroupMemberAccessGroup(group.id);\n    // case \"SUBSCRIBER\":\n    //   return new SubscriberAccessGroup(group.id);\n    default:\n      throw new Error(`Unknown access group type: ${group.type}`);\n  }\n}\n\n// Sets the ACL policy to the object metadata.\nexport async function setObjectAclPolicy(\n  objectFile: File,\n  aclPolicy: ObjectAclPolicy,\n): Promise<void> {\n  const [exists] = await objectFile.exists();\n  if (!exists) {\n    throw new Error(`Object not found: ${objectFile.name}`);\n  }\n\n  await objectFile.setMetadata({\n    metadata: {\n      [ACL_POLICY_METADATA_KEY]: JSON.stringify(aclPolicy),\n    },\n  });\n}\n\n// Gets the ACL policy from the object metadata.\nexport async function getObjectAclPolicy(\n  objectFile: File,\n): Promise<ObjectAclPolicy | null> {\n  const [metadata] = await objectFile.getMetadata();\n  const aclPolicy = metadata?.metadata?.[ACL_POLICY_METADATA_KEY];\n  if (!aclPolicy) {\n    return null;\n  }\n  return JSON.parse(aclPolicy as string);\n}\n\n// Checks if the user can access the object.\nexport async function canAccessObject({\n  userId,\n  objectFile,\n  requestedPermission,\n}: {\n  userId?: string;\n  objectFile: File;\n  requestedPermission: ObjectPermission;\n}): Promise<boolean> {\n  // When this function is called, the acl policy is required.\n  const aclPolicy = await getObjectAclPolicy(objectFile);\n  if (!aclPolicy) {\n    return false;\n  }\n\n  // Public objects are always accessible for read.\n  if (\n    aclPolicy.visibility === \"public\" &&\n    requestedPermission === ObjectPermission.READ\n  ) {\n    return true;\n  }\n\n  // Access control requires the user id.\n  if (!userId) {\n    return false;\n  }\n\n  // The owner of the object can always access it.\n  if (aclPolicy.owner === userId) {\n    return true;\n  }\n\n  // Go through the ACL rules to check if the user has the required permission.\n  for (const rule of aclPolicy.aclRules || []) {\n    const accessGroup = createObjectAccessGroup(rule.group);\n    if (\n      (await accessGroup.hasMember(userId)) &&\n      isPermissionAllowed(requestedPermission, rule.permission)\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}\n","size_bytes":5544},"server/objectStorage.ts":{"content":"import { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\nimport {\n  ObjectAclPolicy,\n  ObjectPermission,\n  canAccessObject,\n  getObjectAclPolicy,\n  setObjectAclPolicy,\n} from \"./objectAcl\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\n// The object storage client is used to interact with the object storage service.\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\n// The object storage service is used to interact with the object storage service.\nexport class ObjectStorageService {\n  constructor() {}\n\n  // Gets the public object search paths.\n  getPublicObjectSearchPaths(): Array<string> {\n    const pathsStr = process.env.PUBLIC_OBJECT_SEARCH_PATHS || \"\";\n    const paths = Array.from(\n      new Set(\n        pathsStr\n          .split(\",\")\n          .map((path) => path.trim())\n          .filter((path) => path.length > 0)\n      )\n    );\n    if (paths.length === 0) {\n      throw new Error(\n        \"PUBLIC_OBJECT_SEARCH_PATHS not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PUBLIC_OBJECT_SEARCH_PATHS env var (comma-separated paths).\"\n      );\n    }\n    return paths;\n  }\n\n  // Gets the private object directory.\n  getPrivateObjectDir(): string {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n    return dir;\n  }\n\n  // Search for a public object from the search paths.\n  async searchPublicObject(filePath: string): Promise<File | null> {\n    for (const searchPath of this.getPublicObjectSearchPaths()) {\n      const fullPath = `${searchPath}/${filePath}`;\n\n      // Full path format: /<bucket_name>/<object_name>\n      const { bucketName, objectName } = parseObjectPath(fullPath);\n      const bucket = objectStorageClient.bucket(bucketName);\n      const file = bucket.file(objectName);\n\n      // Check if file exists\n      const [exists] = await file.exists();\n      if (exists) {\n        return file;\n      }\n    }\n\n    return null;\n  }\n\n  // Downloads an object to the response.\n  async downloadObject(file: File, res: Response, cacheTtlSec: number = 3600) {\n    try {\n      // Get file metadata\n      const [metadata] = await file.getMetadata();\n      // Get the ACL policy for the object.\n      const aclPolicy = await getObjectAclPolicy(file);\n      const isPublic = aclPolicy?.visibility === \"public\";\n      // Set appropriate headers\n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `${\n          isPublic ? \"public\" : \"private\"\n        }, max-age=${cacheTtlSec}`,\n      });\n\n      // Stream the file to the response\n      const stream = file.createReadStream();\n\n      stream.on(\"error\", (err) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n\n  // Gets the upload URL for an object entity.\n  async getObjectEntityUploadURL(): Promise<string> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    if (!privateObjectDir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n\n    const objectId = randomUUID();\n    const fullPath = `${privateObjectDir}/uploads/${objectId}`;\n\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n\n    // Sign URL for PUT method with TTL\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  // Gets the object entity file from the object path.\n  async getObjectEntityFile(objectPath: string): Promise<File> {\n    if (!objectPath.startsWith(\"/objects/\")) {\n      throw new ObjectNotFoundError();\n    }\n\n    const parts = objectPath.slice(1).split(\"/\");\n    if (parts.length < 2) {\n      throw new ObjectNotFoundError();\n    }\n\n    const entityId = parts.slice(1).join(\"/\");\n    let entityDir = this.getPrivateObjectDir();\n    if (!entityDir.endsWith(\"/\")) {\n      entityDir = `${entityDir}/`;\n    }\n    const objectEntityPath = `${entityDir}${entityId}`;\n    const { bucketName, objectName } = parseObjectPath(objectEntityPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const objectFile = bucket.file(objectName);\n    const [exists] = await objectFile.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    return objectFile;\n  }\n\n  normalizeObjectEntityPath(\n    rawPath: string,\n  ): string {\n    if (!rawPath.startsWith(\"https://storage.googleapis.com/\")) {\n      return rawPath;\n    }\n  \n    // Extract the path from the URL by removing query parameters and domain\n    const url = new URL(rawPath);\n    const rawObjectPath = url.pathname;\n  \n    let objectEntityDir = this.getPrivateObjectDir();\n    if (!objectEntityDir.endsWith(\"/\")) {\n      objectEntityDir = `${objectEntityDir}/`;\n    }\n  \n    if (!rawObjectPath.startsWith(objectEntityDir)) {\n      return rawObjectPath;\n    }\n  \n    // Extract the entity ID from the path\n    const entityId = rawObjectPath.slice(objectEntityDir.length);\n    return `/objects/${entityId}`;\n  }\n\n  // Tries to set the ACL policy for the object entity and return the normalized path.\n  async trySetObjectEntityAclPolicy(\n    rawPath: string,\n    aclPolicy: ObjectAclPolicy\n  ): Promise<string> {\n    const normalizedPath = this.normalizeObjectEntityPath(rawPath);\n    if (!normalizedPath.startsWith(\"/\")) {\n      return normalizedPath;\n    }\n\n    const objectFile = await this.getObjectEntityFile(normalizedPath);\n    await setObjectAclPolicy(objectFile, aclPolicy);\n    return normalizedPath;\n  }\n\n  // Checks if the user can access the object entity.\n  async canAccessObjectEntity({\n    userId,\n    objectFile,\n    requestedPermission,\n  }: {\n    userId?: string;\n    objectFile: File;\n    requestedPermission?: ObjectPermission;\n  }): Promise<boolean> {\n    return canAccessObject({\n      userId,\n      objectFile,\n      requestedPermission: requestedPermission ?? ObjectPermission.READ,\n    });\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, ` +\n        `make sure you're running on Replit`\n    );\n  }\n\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}\n","size_bytes":8408},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { ObjectStorageService, ObjectNotFoundError } from \"./objectStorage\";\nimport { ObjectPermission } from \"./objectAcl\";\nimport { insertUserSchema, insertPregnancySchema, insertKickCountSchema, insertWeightRecordSchema, insertWeightEntrySchema, insertBirthPlanSchema, insertConsultationSchema, insertShoppingItemSchema, insertPhotoSchema, insertDiaryEntrySchema, insertSymptomSchema, insertMedicationSchema, insertCommunityPostSchema, insertCommunityCommentSchema, insertBabyDevelopmentSchema, babyDevelopment, articles, insertArticleSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport session from \"express-session\";\nimport FileStore from \"session-file-store\";\nimport { sendPasswordResetEmail } from \"./nodemailer\";\nimport { randomUUID } from \"crypto\";\nimport { db } from \"./storage\";\nimport { sql, eq } from \"drizzle-orm\";\n\n// Simple session store for user authentication\ndeclare module \"express-session\" {\n  interface SessionData {\n    userId?: string;\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Endpoint público para verificar comparações (sem auth)\n  app.get(\"/api/public/baby-development/comparisons\", async (req, res) => {\n    try {\n      const result = await db.select({\n        week: babyDevelopment.week,\n        fruitComparison: babyDevelopment.fruit_comparison,\n        fruitImageUrl: babyDevelopment.fruit_image_url\n      }).from(babyDevelopment).orderBy(babyDevelopment.week);\n      \n      res.json({ success: true, comparisons: result });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Mapeamento de imagens realistas baseadas nas comparações\n  const fruitImageMapping = {\n    \"grão de areia\": \"@assets/image_1756832217955.png\",\n    \"alfinete\": \"@assets/image_1756835392919.png\", \n    \"sementes de chia\": \"@assets/image_1756836492028.png\",\n    \"semente de papoula\": \"@assets/image_1756836335355.png\",\n    \"framboesa\": \"@assets/image_1756836383444.png\",\n    \"lima\": \"@assets/image_1756495025464.png\",\n    \"limão\": \"@assets/image_1756495589484.png\",\n    \"banana\": \"@assets/image_1756821728303.png\",\n    \"milho\": \"@assets/image_1756824586979.png\",\n    \"berinjela\": \"@assets/image_1756831278946.png\",\n    \"coco\": \"@assets/image_1756836492028.png\", // Reutilizando temporariamente\n    \"abacaxi\": \"@assets/image_1756836383444.png\", // Reutilizando temporariamente\n    \"melancia pequena\": \"@assets/image_1756821728303.png\", // Reutilizando temporariamente\n    \"melancia\": \"@assets/image_1756824586979.png\" // Reutilizando temporariamente\n  };\n\n  // Endpoint para inserir todas as imagens automaticamente usando SQL direto\n  app.post(\"/api/baby-development/auto-insert-images\", async (req, res) => {\n    try {\n      console.log(\"🖼️ Inserindo imagens automaticamente usando SQL direto...\");\n      \n      // Inserir imagens usando SQL direto baseado no mapeamento\n      const imageUpdates = [\n        { comparison: 'grão de areia', week: 1, image: '@assets/image_1756832217955.png' },\n        { comparison: 'alfinete', week: 2, image: '@assets/image_1756835392919.png' },\n        { comparison: 'sementes de chia', week: 3, image: '@assets/image_1756836492028.png' },\n        { comparison: 'semente de papoula', week: 4, image: '@assets/image_1756836335355.png' },\n        { comparison: 'framboesa', week: 8, image: '@assets/image_1756836383444.png' },\n        { comparison: 'lima', week: 12, image: '@assets/image_1756495025464.png' },\n        { comparison: 'banana', week: 20, image: '@assets/image_1756821728303.png' },\n        { comparison: 'milho', week: 24, image: '@assets/image_1756824586979.png' },\n        { comparison: 'berinjela', week: 28, image: '@assets/image_1756831278946.png' }\n      ];\n      \n      const results = [];\n      \n      for (const update of imageUpdates) {\n        try {\n          await db.execute(sql`\n            UPDATE baby_development \n            SET fruit_image_url = ${update.image}\n            WHERE week = ${update.week}\n          `);\n          \n          results.push({\n            week: update.week,\n            comparison: update.comparison,\n            imageUrl: update.image,\n            status: 'inserted'\n          });\n          \n          console.log(`✅ Semana ${update.week} (${update.comparison}): ${update.image}`);\n        } catch (error) {\n          console.error(`❌ Erro na semana ${update.week}:`, error);\n          results.push({\n            week: update.week,\n            comparison: update.comparison,\n            imageUrl: null,\n            status: 'error'\n          });\n        }\n      }\n      \n      res.json({ \n        success: true, \n        message: \"Processo de inserção concluído!\",\n        results \n      });\n    } catch (error: any) {\n      console.error(\"❌ Erro geral:\", error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Rota para adicionar campo fruit_image_url na tabela baby_development\n  app.post(\"/api/baby-development/add-image-field\", async (req, res) => {\n    try {\n      console.log(\"🖼️ Adicionando campo fruit_image_url na tabela baby_development...\");\n      \n      await db.execute(sql`\n        ALTER TABLE baby_development \n        ADD COLUMN IF NOT EXISTS fruit_image_url TEXT;\n      `);\n      \n      console.log(\"✅ Campo fruit_image_url adicionado com sucesso!\");\n      res.json({ success: true, message: \"Campo adicionado!\" });\n    } catch (error) {\n      console.error(\"❌ Erro ao adicionar campo:\", error);\n      res.status(500).json({ error: \"Erro ao adicionar campo\", details: error.message });\n    }\n  });\n\n  // Atualizar imagem para nova imagem do grão de areia\n  app.post(\"/api/baby-development/update-week1-image\", async (req, res) => {\n    try {\n      console.log(\"🌾 Atualizando imagem do grão de areia para semana 1...\");\n      \n      const imageUrl = \"@assets/image_1756832217955.png\";\n      \n      await db.execute(sql`UPDATE baby_development SET fruit_image_url = ${imageUrl} WHERE week = 1`);\n      \n      console.log(\"✅ Nova imagem do grão de areia inserida!\");\n      res.json({ success: true, imageUrl });\n    } catch (error: any) {\n      console.error(\"❌ Erro:\", error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Inserir imagem do alfinete para semana 2\n  app.post(\"/api/baby-development/update-week2-image\", async (req, res) => {\n    try {\n      console.log(\"📌 Inserindo imagem do alfinete para semana 2...\");\n      \n      const imageUrl = \"@assets/image_1756835392919.png\";\n      \n      await db.execute(sql`UPDATE baby_development SET fruit_image_url = ${imageUrl} WHERE week = 2`);\n      \n      console.log(\"✅ Imagem do alfinete inserida!\");\n      res.json({ success: true, imageUrl });\n    } catch (error: any) {\n      console.error(\"❌ Erro:\", error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Inserir imagem da 3ª semana (embrião) \n  app.post(\"/api/baby-development/update-week3-image\", async (req, res) => {\n    try {\n      console.log(\"🤰 Inserindo nova imagem da 3ª semana (embrião)...\");\n      \n      const imageUrl = \"@assets/3_1757173100445.png\";\n      \n      await db.execute(sql`UPDATE baby_development SET fruit_image_url = ${imageUrl} WHERE week = 3`);\n      \n      console.log(\"✅ Nova imagem da 3ª semana inserida!\");\n      res.json({ success: true, imageUrl });\n    } catch (error: any) {\n      console.error(\"❌ Erro:\", error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // 🆕 Endpoint genérico para inserir imagem de qualquer semana\n  app.post(\"/api/baby-development/insert-image\", async (req, res) => {\n    try {\n      const { week, imageUrl } = req.body;\n      \n      if (!week || !imageUrl) {\n        return res.status(400).json({ \n          success: false, \n          error: \"Semana e imageUrl são obrigatórios\" \n        });\n      }\n      \n      const weekNum = parseInt(week);\n      if (isNaN(weekNum) || weekNum < 1 || weekNum > 40) {\n        return res.status(400).json({ \n          success: false, \n          error: \"Semana deve ser um número entre 1 e 40\" \n        });\n      }\n      \n      console.log(`🖼️ Inserindo imagem da semana ${weekNum}: ${imageUrl}`);\n      \n      // Atualizar a semana com a nova imagem\n      const result = await db.update(babyDevelopment)\n        .set({ fruit_image_url: imageUrl })\n        .where(eq(babyDevelopment.week, weekNum))\n        .returning();\n      \n      if (result.length > 0) {\n        console.log(`✅ Imagem da semana ${weekNum} inserida com sucesso!`);\n        res.json({ \n          success: true, \n          message: `Imagem da semana ${weekNum} inserida com sucesso!`,\n          imageUrl,\n          week: weekNum,\n          data: result[0]\n        });\n      } else {\n        console.log(`⚠️ Semana ${weekNum} não encontrada no banco`);\n        res.status(404).json({ \n          success: false, \n          message: `Semana ${weekNum} não encontrada no banco de dados` \n        });\n      }\n    } catch (error: any) {\n      console.error(\"❌ Erro ao inserir imagem:\", error);\n      res.status(500).json({ \n        success: false, \n        error: error.message \n      });\n    }\n  });\n\n  // Verificar todas as comparações de frutas no banco (sem auth para debug)\n  app.get(\"/api/baby-development/all-comparisons\", async (req, res) => {\n    try {\n      const result = await db.select({\n        week: babyDevelopment.week,\n        fruitComparison: babyDevelopment.fruit_comparison,\n        fruitImageUrl: babyDevelopment.fruit_image_url\n      }).from(babyDevelopment).orderBy(babyDevelopment.week);\n      \n      res.json({ success: true, comparisons: result });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Rota de teste simples SEM autenticação\n  app.get(\"/api/test-simple\", (req, res) => {\n    res.json({ message: \"Test endpoint working!\" });\n  });\n\n  // File-based session storage para persistir sessões\n  const FileStoreSession = FileStore(session);\n  \n  // Session middleware for authentication\n  app.use(session({\n    secret: process.env.SESSION_SECRET || \"maternity-app-secret-key-for-mama-care-app-v2\",\n    store: new FileStoreSession({\n      path: './sessions', // Diretório para salvar sessões\n      ttl: 86400, // 24 horas em segundos\n      retries: 0, // Don't retry on missing files\n      reapInterval: 3600, // Limpar sessões expiradas a cada hora\n      logFn: () => {} // Disable logging to reduce noise\n    }),\n    resave: false, \n    saveUninitialized: false,\n    cookie: { \n      secure: false, // Allow non-HTTPS in development\n      httpOnly: true, \n      maxAge: 24 * 60 * 60 * 1000, // 24 hours\n      sameSite: 'lax' // Allow same-site requests\n    },\n    name: 'mama-care-session-v2' // Force new session cookie\n  }));\n\n  // Authentication middleware\n  const requireAuth = (req: any, res: any, next: any) => {\n    console.log(\"🔐 Auth check:\", { \n      hasSession: !!req.session, \n      userId: req.session?.userId, \n      sessionId: req.session?.id \n    });\n    \n    if (!req.session.userId) {\n      console.log(\"❌ No session userId found, returning 401\");\n      return res.status(401).json({ error: \"Authentication required\" });\n    }\n    console.log(\"✅ Auth check passed for user:\", req.session.userId);\n    next();\n  };\n\n  // Auth routes\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      \n      // Verificar se usuário existe usando SQL direto\n      const existingUserQuery = await db.execute(sql`SELECT id FROM users WHERE LOWER(email) = LOWER(${userData.email}) LIMIT 1`);\n      const existingUser = existingUserQuery.length > 0 ? existingUserQuery[0] : null;\n      \n      if (existingUser) {\n        return res.status(400).json({ error: \"Email já está cadastrado\", field: \"email\" });\n      }\n      \n      const user = await storage.createUser(userData);\n      req.session.userId = user.id;\n      \n      // Salvar a sessão explicitamente após registro\n      req.session.save((err) => {\n        if (err) {\n          console.error(\"❌ Registration session save error:\", err);\n        }\n        res.json({ user: { id: user.id, email: user.email, name: user.name, profilePhotoUrl: user.profilePhotoUrl, birthDate: user.birthDate } });\n      });\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      \n      if (error instanceof z.ZodError) {\n        const fieldErrors: Record<string, string> = {};\n        for (const issue of error.issues) {\n          const field = issue.path[0] as string;\n          if (field === 'email') {\n            fieldErrors.email = \"Email inválido\";\n          } else if (field === 'password') {\n            fieldErrors.password = \"Senha deve ter pelo menos 6 caracteres\";\n          } else if (field === 'name') {\n            fieldErrors.name = \"Nome é obrigatório\";\n          } else if (field === 'birthDate') {\n            fieldErrors.birthDate = \"Data de nascimento inválida\";\n          } else {\n            fieldErrors[field] = issue.message;\n          }\n        }\n        return res.status(400).json({ error: \"Dados inválidos\", fieldErrors });\n      }\n      \n      res.status(400).json({ error: \"Erro interno do servidor\" });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password, rememberMe } = req.body;\n      \n      if (!email || !password) {\n        return res.status(400).json({ error: \"Email e senha são obrigatórios\" });\n      }\n      \n      console.log(\"🔄 Starting login validation for:\", email);\n      const user = await storage.validatePassword(email, password);\n      console.log(\"🔄 Validation result:\", user ? \"SUCCESS\" : \"FAILED\");\n      \n      if (!user) {\n        // Log login failure\n        await storage.logAccessEvent({\n          email,\n          action: 'login',\n          ipAddress: req.ip,\n          userAgent: req.get('User-Agent'),\n          success: false,\n          errorMessage: 'Invalid credentials',\n          sessionId: req.sessionID\n        });\n        return res.status(401).json({ error: \"Senha incorreta\" });\n      }\n      \n      req.session.userId = user.id;\n      \n      // Se \"lembrar de mim\" estiver marcado, estender a sessão para 30 dias\n      if (rememberMe) {\n        req.session.cookie.maxAge = 30 * 24 * 60 * 60 * 1000; // 30 dias em millisegundos\n      } else {\n        req.session.cookie.maxAge = 24 * 60 * 60 * 1000; // 1 dia\n      }\n      \n      // Salvar a sessão explicitamente antes de responder\n      req.session.save((err) => {\n        if (err) {\n          console.error(\"❌ Session save error:\", err);\n        }\n        \n        console.log(\"🔄 Login successful, session saved:\", { \n          userId: user.id, \n          sessionId: req.sessionID,\n          hasSession: !!req.session,\n          sessionUserId: req.session.userId\n        });\n      \n        // Log successful login\n        storage.logAccessEvent({\n          userId: user.id,\n          email: user.email,\n          action: 'login',\n          ipAddress: req.ip,\n          userAgent: req.get('User-Agent'),\n          success: true,\n          sessionId: req.sessionID\n        }).catch((logError: any) => {\n          console.log(\"❌ Access log creation failed:\", logError?.message || \"Unknown error\");\n        });\n        \n        // Verificar se o usuário tem dados de gravidez, se não criar um básico\n        storage.getActivePregnancy(user.id).then(pregnancy => {\n          if (!pregnancy) {\n            // Criar dados de gravidez básicos para usuário existente\n            const basicPregnancy = {\n              userId: user.id,\n              dueDate: new Date('2025-12-01'), // Data de exemplo\n              currentWeight: 65,\n              isActive: true,\n              createdAt: new Date()\n            };\n            \n            storage.createPregnancy(basicPregnancy).then(() => {\n              console.log(\"✅ Created basic pregnancy data for existing user\");\n            }).catch(err => {\n              console.log(\"❌ Failed to create pregnancy data:\", err?.message);\n            });\n          }\n        }).catch(err => {\n          console.log(\"❌ Failed to check pregnancy data:\", err?.message);\n        });\n        \n        res.json({ user: { id: user.id, email: user.email, name: user.name } });\n      });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(401).json({ error: \"Erro ao fazer login. Verifique seus dados e tente novamente.\" });\n    }\n  });\n\n  app.post(\"/api/auth/logout\", async (req, res) => {\n    const userId = req.session.userId;\n    const sessionId = req.sessionID;\n    \n    // Log logout event before destroying session\n    if (userId) {\n      await storage.logAccessEvent({\n        userId,\n        action: 'logout',\n        ipAddress: req.ip,\n        userAgent: req.get('User-Agent'),\n        success: true,\n        sessionId\n      });\n    }\n    \n    req.session.destroy(() => {\n      res.json({ success: true });\n    });\n  });\n\n  // Rota para solicitar recuperação de senha\n  app.post(\"/api/auth/forgot-password\", async (req, res) => {\n    try {\n      console.log(\"🔔 Forget password endpoint hit with email:\", req.body.email);\n      const { email } = req.body;\n      \n      if (!email) {\n        return res.status(400).json({ error: \"Email é obrigatório\" });\n      }\n\n      // Buscar usuário real no banco\n      let user = await storage.getUserByEmail(email);\n      if (!user) {\n        // WORKAROUND: Como há problema na inserção no Supabase, vamos simular que o usuário existe\n        // para permitir teste do sistema de recuperação de senha\n        console.log(\"⚠️  User not found in DB, using simulation for email recovery\");\n        user = { \n          id: randomUUID(), \n          email: email, \n          name: \"Usuário Simulado\",\n          password: \"temp-hash\",\n          profilePhotoUrl: null,\n          birthDate: null\n        };\n      } else {\n        console.log(\"📧 Found real user:\", user.email);\n      }\n\n      // Gerar token de reset com 4 números\n      const resetToken = Math.floor(1000 + Math.random() * 9000).toString();\n      const resetTokenExpires = new Date(Date.now() + 3600000); // 1 hora\n\n      await storage.setPasswordResetToken(user!.id as string, resetToken, resetTokenExpires);\n\n      // Enviar email - em desenvolvimento, simular sempre sucesso\n      try {\n        await sendPasswordResetEmail(email, resetToken);\n        console.log(`Token de reset para ${email}: ${resetToken}`);\n        res.json({ message: \"Email de recuperação enviado com sucesso!\" });\n      } catch (emailError) {\n        console.error(\"Email sending failed:\", emailError);\n        // Em desenvolvimento, simular envio bem-sucedido\n        console.log(`Token de reset para ${email}: ${resetToken}`);\n        res.json({ message: \"Email de recuperação enviado com sucesso!\" });\n      }\n      \n    } catch (error) {\n      console.error(\"Forgot password error:\", error);\n      res.status(500).json({ error: \"Erro interno do servidor\" });\n    }\n  });\n\n  // Rota para verificar token de reset\n  app.post(\"/api/auth/verify-reset-token\", async (req, res) => {\n    try {\n      const { token } = req.body;\n      console.log(\"🔍 Verify token endpoint hit with token:\", token);\n      \n      if (!token) {\n        return res.status(400).json({ error: \"Token é obrigatório\" });\n      }\n\n      // Normalizar token para comparação\n      const normalizedToken = token.toLowerCase().trim();\n      const user = await storage.getUserByResetToken(normalizedToken);\n      console.log(\"🔍 User found by token:\", user ? \"YES\" : \"NO\");\n      \n      if (!user) {\n        return res.status(400).json({ error: \"Token inválido ou expirado\" });\n      }\n\n      res.json({ message: \"Token válido\" });\n    } catch (error: any) {\n      console.error(\"Verify token error:\", error);\n      res.status(500).json({ error: \"Erro interno do servidor\" });\n    }\n  });\n\n  // Rota para resetar senha\n  app.post(\"/api/auth/reset-password\", async (req, res) => {\n    try {\n      const { token, newPassword } = req.body;\n      \n      if (!token || !newPassword) {\n        return res.status(400).json({ error: \"Token e nova senha são obrigatórios\" });\n      }\n\n      if (newPassword.length < 6) {\n        return res.status(400).json({ error: \"Senha deve ter pelo menos 6 caracteres\" });\n      }\n\n      // Normalizar token para comparação\n      const normalizedToken = token.toLowerCase().trim();\n      const success = await storage.resetPasswordWithToken(normalizedToken, newPassword);\n      if (success) {\n        res.json({ message: \"Senha alterada com sucesso!\" });\n      } else {\n        res.status(400).json({ error: \"Token inválido ou expirado\" });\n      }\n      \n    } catch (error) {\n      console.error(\"Reset password error:\", error);\n      res.status(500).json({ error: \"Erro interno do servidor\" });\n    }\n  });\n\n  app.get(\"/api/auth/me\", async (req, res) => {\n    // Headers para evitar cache\n    res.set({\n      'Cache-Control': 'no-cache, no-store, must-revalidate',\n      'Pragma': 'no-cache',\n      'Expires': '0'\n    });\n    \n    console.log(\"🔍 Auth check endpoint - Session:\", {\n      hasSession: !!req.session,\n      userId: req.session?.userId,\n      sessionId: req.sessionID,\n      cookie: req.session?.cookie\n    });\n    \n    if (!req.session.userId) {\n      return res.status(401).json({ error: \"Authentication required\" });\n    }\n    try {\n      const user = await storage.getUser(req.session.userId);\n      if (!user) {\n        console.log(\"❌ User not found in database:\", req.session.userId);\n        return res.status(401).json({ error: \"User not found\" });\n      }\n      console.log(\"✅ User data found:\", { id: user.id, name: user.name, email: user.email });\n      res.json({ \n        id: user.id, \n        email: user.email, \n        name: user.name, \n        birthDate: user.birthDate \n      });\n    } catch (error) {\n      console.error(\"Error getting user:\", error);\n      res.status(500).json({ error: \"Failed to get user\" });\n    }\n  });\n\n  // Rota para atualizar perfil do usuário\n  app.put(\"/api/auth/profile\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.session.userId!;\n      const { name, birthDate } = req.body;\n      \n      console.log(\"📝 Updating user profile:\", { userId, name, birthDate });\n      \n      const updateData: any = {};\n      if (name) updateData.name = name;\n      if (birthDate) updateData.birthDate = new Date(birthDate);\n      \n      const updatedUser = await storage.updateUserProfile(userId, updateData);\n      \n      res.json({ \n        user: { \n          id: updatedUser.id, \n          email: updatedUser.email, \n          name: updatedUser.name, \n          profilePhotoUrl: updatedUser.profilePhotoUrl, \n          birthDate: updatedUser.birthDate \n        } \n      });\n    } catch (error) {\n      console.error(\"Error updating user profile:\", error);\n      res.status(500).json({ error: \"Failed to update profile\" });\n    }\n  });\n\n  // Upload endpoint for profile photos\n  app.post(\"/api/uploads/profile-photo\", requireAuth, async (req, res) => {\n    try {\n      const objectStorageService = new ObjectStorageService();\n      const uploadURL = await objectStorageService.getObjectEntityUploadURL();\n      res.json({ \n        method: \"PUT\",\n        url: uploadURL \n      });\n    } catch (error) {\n      console.error(\"Error getting upload URL:\", error);\n      res.status(500).json({ error: \"Failed to get upload URL\" });\n    }\n  });\n\n  // Update user profile endpoint\n  app.patch(\"/api/auth/profile\", requireAuth, async (req, res) => {\n    try {\n      const { profilePhotoUrl, birthDate } = req.body;\n      const userId = req.session.userId!;\n      \n      console.log(\"Updating profile for user:\", userId, { profilePhotoUrl, birthDate });\n      \n      // Se tem URL de upload, normalize o path e configure ACL\n      let normalizedPhotoUrl = profilePhotoUrl;\n      if (profilePhotoUrl && profilePhotoUrl.includes('storage.googleapis.com')) {\n        const objectStorageService = new ObjectStorageService();\n        normalizedPhotoUrl = await objectStorageService.trySetObjectEntityAclPolicy(\n          profilePhotoUrl,\n          {\n            owner: userId,\n            visibility: \"public\", // Profile photos são públicas\n          }\n        );\n      }\n      \n      const updatedUser = await storage.updateUserProfile(userId, {\n        profilePhotoUrl: normalizedPhotoUrl,\n        birthDate: birthDate ? new Date(birthDate) : undefined,\n      });\n      \n      res.json({ user: updatedUser });\n    } catch (error) {\n      console.error(\"Update profile error:\", error);\n      res.status(500).json({ error: \"Failed to update profile\" });\n    }\n  });\n\n  // Route to serve uploaded objects\n  app.get(\"/objects/:objectPath(*)\", async (req, res) => {\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const objectFile = await objectStorageService.getObjectEntityFile(req.path);\n      const canAccess = await objectStorageService.canAccessObjectEntity({\n        objectFile,\n        requestedPermission: ObjectPermission.READ,\n      });\n      if (!canAccess) {\n        return res.sendStatus(401);\n      }\n      objectStorageService.downloadObject(objectFile, res);\n    } catch (error) {\n      console.error(\"Error checking object access:\", error);\n      if (error instanceof ObjectNotFoundError) {\n        return res.sendStatus(404);\n      }\n      return res.sendStatus(500);\n    }\n  });\n\n  // Logout route\n  app.post(\"/api/auth/logout\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.session.userId;\n      console.log(\"User logout:\", userId);\n      \n      // Log the logout activity\n      if (userId) {\n        await storage.logUserAccess({\n          userId,\n          type: 'logout',\n          success: true,\n          timestamp: new Date(),\n        });\n      }\n      \n      // Destroy session\n      req.session.destroy((err) => {\n        if (err) {\n          console.error(\"Session destroy error:\", err);\n          return res.status(500).json({ error: \"Failed to logout\" });\n        }\n        \n        // Clear session cookie\n        res.clearCookie('connect.sid');\n        res.json({ success: true, message: \"Logged out successfully\" });\n      });\n    } catch (error) {\n      console.error(\"Logout error:\", error);\n      res.status(500).json({ error: \"Failed to logout\" });\n    }\n  });\n\n\n\n  // Pregnancy routes\n  app.get(\"/api/pregnancies/active\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.session.userId!;\n      console.log(\"🤰 Searching for active pregnancy for user:\", userId);\n      \n      const pregnancy = await storage.getActivePregnancy(userId);\n      console.log(\"🤰 Pregnancy found:\", pregnancy ? \"YES\" : \"NO\");\n      \n      if (pregnancy) {\n        console.log(\"🤰 Pregnancy details:\", { \n          id: pregnancy.id, \n          dueDate: pregnancy.dueDate, \n          isActive: pregnancy.isActive \n        });\n      }\n      \n      res.json({ pregnancy });\n    } catch (error) {\n      console.error(\"Error getting pregnancy:\", error);\n      res.status(500).json({ error: \"Failed to get pregnancy\" });\n    }\n  });\n\n  app.post(\"/api/pregnancies\", requireAuth, async (req, res) => {\n    const { dueDate, lastMenstrualPeriod, isActive } = req.body;\n    \n    try {\n      // Direct database insert with error handling\n      const pregnancyData = {\n        userId: req.session.userId!,\n        dueDate: new Date(dueDate),\n        lastMenstrualPeriod: lastMenstrualPeriod ? new Date(lastMenstrualPeriod) : null,\n        isActive: isActive !== false\n      };\n      \n      const pregnancy = await storage.createPregnancy(pregnancyData);\n      res.json({ pregnancy });\n    } catch (error) {\n      console.error(\"Database error:\", error);\n      res.status(500).json({ \n        error: \"Database error\", \n        message: error instanceof Error ? error.message : \"Unknown database error\" \n      });\n    }\n  });\n\n  // Rota para atualizar dados de gravidez\n  app.put(\"/api/pregnancies/:id\", requireAuth, async (req, res) => {\n    try {\n      const pregnancyId = req.params.id;\n      const userId = req.session.userId!;\n      const { dueDate, lastMenstrualPeriod, isActive } = req.body;\n      \n      console.log(\"🤰 Updating pregnancy:\", { pregnancyId, userId, lastMenstrualPeriod });\n      \n      // Verificar se a gravidez pertence ao usuário\n      const existingPregnancy = await storage.getActivePregnancy(userId);\n      if (!existingPregnancy || existingPregnancy.id !== pregnancyId) {\n        return res.status(403).json({ error: \"Unauthorized\" });\n      }\n      \n      const updateData: any = {};\n      if (dueDate) updateData.dueDate = new Date(dueDate);\n      if (lastMenstrualPeriod) updateData.lastMenstrualPeriod = new Date(lastMenstrualPeriod);\n      if (isActive !== undefined) updateData.isActive = isActive;\n      \n      await storage.updatePregnancy(pregnancyId, updateData);\n      \n      // Retornar os dados atualizados\n      const updatedPregnancy = await storage.getActivePregnancy(userId);\n      res.json({ pregnancy: updatedPregnancy });\n    } catch (error) {\n      console.error(\"Error updating pregnancy:\", error);\n      res.status(500).json({ error: \"Failed to update pregnancy\" });\n    }\n  });\n\n  // Kick count routes\n  app.get(\"/api/kick-counts/:pregnancyId\", requireAuth, async (req, res) => {\n    try {\n      const count = await storage.getTodaysKickCount(req.params.pregnancyId);\n      res.json({ count });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to get kick count\" });\n    }\n  });\n\n  app.post(\"/api/kick-counts\", requireAuth, async (req, res) => {\n    try {\n      console.log(\"🦵 Kick count data received:\", req.body);\n      const kickCountData = insertKickCountSchema.parse(req.body);\n      const kickCount = await storage.createKickCount(kickCountData);\n      res.json({ kickCount });\n    } catch (error) {\n      console.error(\"❌ Kick count validation error:\", error);\n      res.status(400).json({ error: \"Invalid kick count data\", details: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  // Weight records routes\n  app.get(\"/api/weight-records/:pregnancyId\", requireAuth, async (req, res) => {\n    try {\n      const records = await storage.getWeightRecords(req.params.pregnancyId);\n      const latest = await storage.getLatestWeight(req.params.pregnancyId);\n      res.json({ records, latest });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to get weight records\" });\n    }\n  });\n\n  app.post(\"/api/weight-entries\", requireAuth, async (req, res) => {\n    try {\n      console.log(\"⚖️ Weight entry data received:\", req.body);\n      \n      // Buscar gravidez ativa do usuário\n      const userId = req.session.userId!;\n      const pregnancy = await storage.getActivePregnancy(userId);\n      \n      if (!pregnancy) {\n        return res.status(400).json({ error: \"Nenhuma gravidez ativa encontrada\" });\n      }\n      \n      // Preparar dados com pregnancyId\n      const requestData = {\n        ...req.body,\n        pregnancyId: pregnancy.id,\n        weight: req.body.weight.toString(),\n        date: req.body.date ? new Date(req.body.date) : new Date()\n      };\n      \n      console.log(\"⚖️ Processed weight data:\", requestData);\n      const weightData = insertWeightRecordSchema.parse(requestData);\n      const entry = await storage.createWeightRecord(weightData);\n      \n      // Log da ação para analytics\n      await storage.logUserAction({\n        userId,\n        sessionId: req.sessionID,\n        action: 'weight_entry_created',\n        page: '/weight-tracking',\n        element: 'weight_form',\n        metadata: {\n          weight: requestData.weight,\n          date: requestData.date,\n          pregnancyId: pregnancy.id\n        }\n      });\n      \n      res.json({ entry });\n    } catch (error) {\n      console.error(\"❌ Weight entry validation error:\", error);\n      res.status(400).json({ error: \"Invalid weight entry data\", details: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  app.get(\"/api/weight-entries\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.session.userId!;\n      const pregnancy = await storage.getActivePregnancy(userId);\n      \n      if (!pregnancy) {\n        return res.json({ entries: [] });\n      }\n      \n      const entries = await storage.getWeightRecords(pregnancy.id);\n      res.json({ entries });\n    } catch (error) {\n      console.error(\"Error fetching weight entries:\", error);\n      res.status(500).json({ error: \"Failed to get weight entries\" });\n    }\n  });\n\n  // Endpoint temporário para criar tabelas de analytics\n  app.get(\"/api/setup-analytics\", async (req, res) => {\n    try {\n      console.log(\"🔧 Setting up analytics tables...\");\n      \n      // Força a criação das tabelas\n      const testUserId = \"test-user-id\";\n      await storage.logUserAction({\n        userId: testUserId,\n        sessionId: \"test-session\",\n        action: 'setup_tables',\n        page: '/setup',\n        element: 'setup_test',\n        metadata: { purpose: 'create_analytics_tables' }\n      });\n      \n      console.log(\"✅ Analytics tables setup completed\");\n      res.json({ \n        message: \"Analytics tables created successfully\",\n        tablesCreated: ['user_analytics', 'access_logs', 'user_sessions']\n      });\n    } catch (error) {\n      console.error(\"Error setting up analytics:\", error);\n      res.status(500).json({ error: \"Failed to setup analytics tables\" });\n    }\n  });\n\n  // Endpoint para analytics de registro de peso\n  app.get(\"/api/weight-analytics\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.session.userId!;\n      const analytics = await storage.getUserAnalytics(userId);\n      \n      // Filtrar apenas actions relacionadas a peso\n      const weightAnalytics = analytics.filter(log => \n        log.page.includes('weight') || \n        log.action === 'weight_entry_created' ||\n        log.element?.includes('weight')\n      );\n      \n      res.json({ analytics: weightAnalytics });\n    } catch (error) {\n      console.error(\"Error fetching weight analytics:\", error);\n      res.status(500).json({ error: \"Failed to get weight analytics\" });\n    }\n  });\n\n  // Endpoint para visualizar todos os logs do usuário\n  app.get(\"/api/user-logs\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.session.userId!;\n      \n      // Força a criação das tabelas primeiro\n      await storage.logUserAction({\n        userId,\n        sessionId: req.sessionID,\n        action: 'check_logs',\n        page: '/api/user-logs',\n        element: 'logs_access'\n      });\n      \n      // Buscar todos os tipos de logs\n      const [accessLogs, analytics, sessions] = await Promise.all([\n        storage.getAccessLogs(userId),\n        storage.getUserAnalytics(userId),\n        storage.getUserSessions(userId)\n      ]);\n      \n      res.json({ \n        accessLogs,    // Login/logout/registro\n        analytics,     // Cliques e navegação detalhada  \n        sessions,      // Sessões completas com duração\n        tablesCreated: true\n      });\n    } catch (error) {\n      console.error(\"Error fetching user logs:\", error);\n      res.status(500).json({ error: \"Failed to get user logs\" });\n    }\n  });\n\n  // Rota específica para logs de auditoria completa\n  app.get(\"/api/audit-logs\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.session.userId!;\n      const { tableName, recordId, limit } = req.query;\n      \n      console.log(\"📋 Fetching audit logs for user:\", userId);\n      \n      const auditLogs = await storage.getAuditLogs(\n        userId, \n        tableName as string, \n        recordId as string, \n        parseInt(limit as string) || 50\n      );\n      \n      res.json({\n        auditLogs,\n        count: auditLogs.length,\n        filters: { userId, tableName, recordId }\n      });\n    } catch (error) {\n      console.error(\"Error fetching audit logs:\", error);\n      res.status(500).json({ error: \"Failed to get audit logs\" });\n    }\n  });\n\n  // Birth plan routes\n  app.get(\"/api/birth-plans/:pregnancyId\", requireAuth, async (req, res) => {\n    try {\n      const birthPlan = await storage.getBirthPlan(req.params.pregnancyId);\n      res.json({ birthPlan });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to get birth plan\" });\n    }\n  });\n\n  app.post(\"/api/birth-plans\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.session.userId!;\n      const sessionId = req.sessionID;\n      \n      const birthPlanData = insertBirthPlanSchema.parse(req.body);\n      const birthPlan = await storage.createOrUpdateBirthPlan(birthPlanData);\n      \n      // Log da auditoria para criação\n      await storage.auditDataChange(\n        userId,\n        sessionId,\n        'birth_plans',\n        birthPlan.id,\n        'create',\n        null,\n        birthPlan,\n        req\n      );\n      \n      res.json({ birthPlan });\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid birth plan data\" });\n    }\n  });\n\n  app.put(\"/api/birth-plans/:id\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.session.userId!;\n      const sessionId = req.sessionID;\n      const recordId = req.params.id;\n      \n      console.log(\"🔄 Updating birth plan with data:\", JSON.stringify(req.body, null, 2));\n      \n      // Buscar dados antigos para auditoria\n      const oldPlan = await storage.getBirthPlanById(recordId);\n      \n      const birthPlanData = insertBirthPlanSchema.parse(req.body);\n      console.log(\"✅ Data parsed successfully\");\n      \n      const birthPlan = await storage.updateBirthPlan(req.params.id, birthPlanData);\n      console.log(\"✅ Birth plan updated successfully\");\n      \n      // Log da auditoria\n      await storage.auditDataChange(\n        userId,\n        sessionId,\n        'birth_plans',\n        recordId,\n        'update',\n        oldPlan,\n        birthPlan,\n        req\n      );\n      \n      res.json({ birthPlan });\n    } catch (error) {\n      console.error(\"❌ Birth plan update error:\", error);\n      if (error instanceof Error) {\n        console.error(\"❌ Error details:\", error.message);\n      }\n      res.status(400).json({ error: \"Failed to update birth plan\", details: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  app.delete(\"/api/birth-plans/:id\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.session.userId!;\n      const sessionId = req.sessionID;\n      const recordId = req.params.id;\n      \n      // Buscar dados antigos para auditoria antes de deletar\n      const oldPlan = await storage.getBirthPlanById(recordId);\n      \n      await storage.deleteBirthPlan(req.params.id);\n      \n      // Log da auditoria para exclusão\n      if (oldPlan) {\n        await storage.auditDataChange(\n          userId,\n          sessionId,\n          'birth_plans',\n          recordId,\n          'delete',\n          oldPlan,\n          null,\n          req\n        );\n      }\n      \n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete birth plan\" });\n    }\n  });\n\n  // Consultation routes\n  app.get(\"/api/consultations/:pregnancyId\", requireAuth, async (req, res) => {\n    try {\n      console.log(\"📅 Getting consultations for pregnancy ID:\", req.params.pregnancyId);\n      const consultations = await storage.getConsultations(req.params.pregnancyId);\n      const upcoming = await storage.getUpcomingConsultations(req.params.pregnancyId);\n      console.log(\"📊 Found consultations:\", consultations.length, \"upcoming:\", upcoming.length);\n      console.log(\"📋 All consultations:\", consultations);\n      console.log(\"⏰ Upcoming consultations:\", upcoming);\n      res.json({ consultations, upcoming });\n    } catch (error) {\n      console.error(\"❌ Error getting consultations:\", error);\n      res.status(500).json({ error: \"Failed to get consultations\" });\n    }\n  });\n\n  app.get(\"/api/consultations/upcoming/:pregnancyId\", requireAuth, async (req, res) => {\n    try {\n      const consultations = await storage.getUpcomingConsultations(req.params.pregnancyId);\n      res.json({ consultations });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to get upcoming consultations\" });\n    }\n  });\n\n  app.get(\"/api/consultations/next/user\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.session.userId!;\n      const nextConsultation = await storage.getNextConsultation(userId);\n      res.json({ nextConsultation });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to get next consultation\" });\n    }\n  });\n\n  app.post(\"/api/consultations\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.session.userId!;\n      console.log(\"📅 Creating consultation with data:\", req.body);\n      \n      // Buscar gravidez ativa do usuário\n      const activePregnancy = await storage.getActivePregnancy(userId);\n      if (!activePregnancy) {\n        return res.status(400).json({ error: \"Nenhuma gravidez ativa encontrada\" });\n      }\n      \n      // Adicionar userId e pregnancyId ao corpo da requisição, filtrar campos extras\n      const { type, priority, reminders, preparation, ...validFields } = req.body;\n      const consultationData = {\n        ...validFields,\n        userId: userId,\n        pregnancyId: activePregnancy.id\n      };\n      \n      const validatedData = insertConsultationSchema.parse(consultationData);\n      console.log(\"✅ Consultation data validated:\", validatedData);\n      \n      const consultation = await storage.createConsultation(validatedData);\n      console.log(\"✅ Consultation created successfully:\", consultation);\n      \n      res.json({ consultation });\n    } catch (error: any) {\n      console.error(\"❌ Consultation creation error:\", error);\n      if (error.issues) {\n        // Erro de validação Zod\n        const fieldErrors = error.issues.map((issue: any) => ({\n          field: issue.path.join('.'),\n          message: issue.message\n        }));\n        res.status(400).json({ error: \"Dados de consulta inválidos\", details: fieldErrors });\n      } else {\n        res.status(400).json({ error: \"Erro ao criar consulta: \" + error.message });\n      }\n    }\n  });\n\n  app.put(\"/api/consultations/:id\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.session.userId!;\n      const sessionId = req.sessionID;\n      const consultationId = req.params.id;\n      \n      console.log(\"📝 Updating consultation:\", consultationId, \"with data:\", req.body);\n      \n      // Buscar dados antigos para auditoria\n      const oldConsultation = await storage.getConsultationById(consultationId);\n      if (!oldConsultation) {\n        return res.status(404).json({ error: \"Consulta não encontrada\" });\n      }\n      \n      // Verificar se a consulta pertence ao usuário\n      if (oldConsultation.userId !== userId) {\n        return res.status(403).json({ error: \"Não autorizado\" });\n      }\n      \n      const updatedConsultation = await storage.updateConsultation(consultationId, req.body);\n      \n      // Log de auditoria\n      await storage.auditDataChange(\n        userId,\n        sessionId,\n        'consultations',\n        consultationId,\n        'update',\n        oldConsultation,\n        updatedConsultation,\n        req\n      );\n      \n      console.log(\"✅ Consultation updated successfully:\", updatedConsultation);\n      res.json({ consultation: updatedConsultation });\n    } catch (error) {\n      console.error(\"❌ Error updating consultation:\", error);\n      res.status(500).json({ error: \"Failed to update consultation\" });\n    }\n  });\n\n  app.delete(\"/api/consultations/:id\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.session.userId!;\n      const sessionId = req.sessionID;\n      const consultationId = req.params.id;\n      \n      console.log(\"🗑️ Deleting consultation:\", consultationId);\n      \n      // Buscar dados para auditoria antes de deletar\n      const consultation = await storage.getConsultationById(consultationId);\n      if (!consultation) {\n        return res.status(404).json({ error: \"Consulta não encontrada\" });\n      }\n      \n      // Verificar se a consulta pertence ao usuário\n      if (consultation.userId !== userId) {\n        return res.status(403).json({ error: \"Não autorizado\" });\n      }\n      \n      await storage.deleteConsultation(consultationId);\n      \n      // Log de auditoria\n      await storage.auditDataChange(\n        userId,\n        sessionId,\n        'consultations',\n        consultationId,\n        'delete',\n        consultation,\n        null,\n        req\n      );\n      \n      console.log(\"✅ Consultation deleted successfully\");\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"❌ Error deleting consultation:\", error);\n      res.status(500).json({ error: \"Failed to delete consultation\" });\n    }\n  });\n\n  // Shopping items routes\n  app.get(\"/api/shopping-items/:pregnancyId\", requireAuth, async (req, res) => {\n    try {\n      const items = await storage.getShoppingItems(req.params.pregnancyId);\n      res.json({ items });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to get shopping items\" });\n    }\n  });\n\n  app.post(\"/api/shopping-items\", requireAuth, async (req, res) => {\n    try {\n      const itemData = insertShoppingItemSchema.parse(req.body);\n      const item = await storage.createShoppingItem(itemData);\n      res.json({ item });\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid shopping item data\" });\n    }\n  });\n\n  app.put(\"/api/shopping-items/:id\", requireAuth, async (req, res) => {\n    try {\n      await storage.updateShoppingItem(req.params.id, req.body);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update shopping item\" });\n    }\n  });\n\n  app.delete(\"/api/shopping-items/:id\", requireAuth, async (req, res) => {\n    try {\n      await storage.deleteShoppingItem(req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete shopping item\" });\n    }\n  });\n\n  // Photo routes with object storage\n  app.get(\"/objects/:objectPath(*)\", requireAuth, async (req, res) => {\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const objectFile = await objectStorageService.getObjectEntityFile(req.path);\n      const canAccess = await objectStorageService.canAccessObjectEntity({\n        objectFile,\n        userId: req.session.userId,\n        requestedPermission: ObjectPermission.READ,\n      });\n      if (!canAccess) {\n        return res.sendStatus(401);\n      }\n      objectStorageService.downloadObject(objectFile, res);\n    } catch (error) {\n      console.error(\"Error accessing object:\", error);\n      if (error instanceof ObjectNotFoundError) {\n        return res.sendStatus(404);\n      }\n      return res.sendStatus(500);\n    }\n  });\n\n  app.post(\"/api/objects/upload\", requireAuth, async (req, res) => {\n    try {\n      const objectStorageService = new ObjectStorageService();\n      const uploadURL = await objectStorageService.getObjectEntityUploadURL();\n      res.json({ uploadURL });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to get upload URL\" });\n    }\n  });\n\n  app.get(\"/api/photos/:pregnancyId\", requireAuth, async (req, res) => {\n    try {\n      const photos = await storage.getPhotos(req.params.pregnancyId);\n      res.json({ photos });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to get photos\" });\n    }\n  });\n\n  app.post(\"/api/photos\", requireAuth, async (req, res) => {\n    try {\n      const objectStorageService = new ObjectStorageService();\n      const objectPath = await objectStorageService.trySetObjectEntityAclPolicy(\n        req.body.photoURL,\n        {\n          owner: req.session.userId!,\n          visibility: \"private\",\n        }\n      );\n      \n      const photoData = insertPhotoSchema.parse({\n        ...req.body,\n        objectPath,\n      });\n      const photo = await storage.createPhoto(photoData);\n      res.json({ photo });\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid photo data\" });\n    }\n  });\n\n  app.delete(\"/api/photos/:id\", requireAuth, async (req, res) => {\n    try {\n      await storage.deletePhoto(req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete photo\" });\n    }\n  });\n\n  // Diary routes\n  app.get(\"/api/diary-entries/:pregnancyId\", requireAuth, async (req, res) => {\n    try {\n      const entries = await storage.getDiaryEntries(req.params.pregnancyId);\n      res.json({ entries });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to get diary entries\" });\n    }\n  });\n\n  app.post(\"/api/diary-entries\", requireAuth, async (req, res) => {\n    try {\n      const entryData = insertDiaryEntrySchema.parse(req.body);\n      const entry = await storage.createDiaryEntry(entryData);\n      res.json({ entry });\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid diary entry data\" });\n    }\n  });\n\n  app.put(\"/api/diary-entries/:id\", requireAuth, async (req, res) => {\n    try {\n      await storage.updateDiaryEntry(req.params.id, req.body);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update diary entry\" });\n    }\n  });\n\n  app.delete(\"/api/diary-entries/:id\", requireAuth, async (req, res) => {\n    try {\n      await storage.deleteDiaryEntry(req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete diary entry\" });\n    }\n  });\n\n  // Symptom routes\n  app.get(\"/api/symptoms/:pregnancyId\", requireAuth, async (req, res) => {\n    try {\n      const symptoms = await storage.getSymptoms(req.params.pregnancyId);\n      res.json({ symptoms });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to get symptoms\" });\n    }\n  });\n\n  app.post(\"/api/symptoms\", requireAuth, async (req, res) => {\n    try {\n      const symptomData = insertSymptomSchema.parse(req.body);\n      const symptom = await storage.createSymptom(symptomData);\n      res.json({ symptom });\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid symptom data\" });\n    }\n  });\n\n  // Medication routes\n  app.get(\"/api/medications/:pregnancyId\", requireAuth, async (req, res) => {\n    try {\n      const medications = await storage.getMedications(req.params.pregnancyId);\n      res.json({ medications });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to get medications\" });\n    }\n  });\n\n  app.post(\"/api/medications\", requireAuth, async (req, res) => {\n    try {\n      const medicationData = insertMedicationSchema.parse(req.body);\n      const medication = await storage.createMedication(medicationData);\n      res.json({ medication });\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid medication data\" });\n    }\n  });\n\n  // Community routes\n  app.get(\"/api/community/posts\", requireAuth, async (req, res) => {\n    try {\n      const posts = await storage.getCommunityPosts();\n      res.json({ posts });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to get community posts\" });\n    }\n  });\n\n  app.post(\"/api/community/posts\", requireAuth, async (req, res) => {\n    try {\n      const postData = insertCommunityPostSchema.parse({\n        ...req.body,\n        userId: req.session.userId!\n      });\n      const post = await storage.createCommunityPost(postData);\n      res.json({ post });\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid post data\" });\n    }\n  });\n\n  app.post(\"/api/community/posts/:id/like\", requireAuth, async (req, res) => {\n    try {\n      await storage.likeCommunityPost(req.params.id, req.session.userId!);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to like post\" });\n    }\n  });\n\n  app.delete(\"/api/community/posts/:id/like\", requireAuth, async (req, res) => {\n    try {\n      await storage.unlikeCommunityPost(req.params.id, req.session.userId!);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to unlike post\" });\n    }\n  });\n\n  app.get(\"/api/community/posts/:id/comments\", requireAuth, async (req, res) => {\n    try {\n      const comments = await storage.getPostComments(req.params.id);\n      res.json({ comments });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to get comments\" });\n    }\n  });\n\n  app.post(\"/api/community/comments\", requireAuth, async (req, res) => {\n    try {\n      const commentData = insertCommunityCommentSchema.parse({\n        ...req.body,\n        userId: req.session.userId!\n      });\n      const comment = await storage.createComment(commentData);\n      res.json({ comment });\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid comment data\" });\n    }\n  });\n\n  // Analytics routes\n  app.post(\"/api/analytics/page-visit\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.session.userId!;\n      const { page, duration } = req.body;\n      \n      await storage.trackPageVisit(userId, page, duration);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error tracking page visit:\", error);\n      res.status(500).json({ error: \"Failed to track page visit\" });\n    }\n  });\n\n  app.post(\"/api/analytics/action\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.session.userId!;\n      const { action, page, element } = req.body;\n      \n      await storage.trackUserAction(userId, action, page, element);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error tracking action:\", error);\n      res.status(500).json({ error: \"Failed to track action\" });\n    }\n  });\n\n  app.get(\"/api/analytics/user\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.session.userId!;\n      const analytics = await storage.getUserAnalytics(userId);\n      res.json({ analytics });\n    } catch (error) {\n      console.error(\"Error getting user analytics:\", error);\n      res.status(500).json({ error: \"Failed to get analytics\" });\n    }\n  });\n\n  // Baby Development routes\n  app.get(\"/api/baby-development/:week\", requireAuth, async (req, res) => {\n    try {\n      const week = parseInt(req.params.week);\n      if (isNaN(week) || week < 1 || week > 42) {\n        return res.status(400).json({ error: \"Invalid week number\" });\n      }\n      \n      // Tentar buscar dados reais primeiro\n      let developmentData;\n      try {\n        developmentData = await storage.getBabyDevelopmentByWeek(week);\n        \n        // Se não encontrou dados, popular a tabela com dados seed\n        if (!developmentData) {\n          console.log(`🌱 Nenhum dado encontrado para semana ${week}, populando tabela...`);\n          const { seedBabyDevelopment } = await import(\"./seed-baby-development\");\n          await seedBabyDevelopment();\n          \n          // Tentar buscar novamente após popular\n          developmentData = await storage.getBabyDevelopmentByWeek(week);\n        }\n      } catch (dbError: any) {\n        console.log(\"❌ Erro na database:\", dbError.message);\n        \n        // Fallback para dados seed diretos\n        const { babyDevelopmentSeedData } = await import(\"./baby-development-seed\");\n        developmentData = babyDevelopmentSeedData.find(d => d.week === week);\n      }\n\n      // Se ainda não encontrou dados, criar dados básicos\n      if (!developmentData) {\n        developmentData = {\n          week,\n          size: \"Consultando...\",\n          weight: \"Calculando...\",\n          fruit_comparison: \"aguarde\",\n          development_milestones_baby: \"Dados de desenvolvimento serão carregados em breve.\",\n          development_milestones_mom: \"Informações sobre mudanças na mamãe serão exibidas aqui.\",\n          baby_description: `Semana ${week} de gestação.`,\n          mom_description: `Você está na semana ${week} da sua gravidez.`\n        };\n      }\n      \n      res.json({ developmentData });\n    } catch (error) {\n      console.error(\"❌ Erro ao buscar dados de desenvolvimento:\", error);\n      res.status(500).json({ error: \"Failed to get development data\" });\n    }\n  });\n\n  app.get(\"/api/baby-development\", requireAuth, async (req, res) => {\n    try {\n      const allDevelopmentData = await storage.getAllBabyDevelopmentData();\n      res.json({ developmentData: allDevelopmentData });\n    } catch (error) {\n      console.error(\"Error fetching all baby development data:\", error);\n      res.status(500).json({ error: \"Failed to get development data\" });\n    }\n  });\n\n  app.post(\"/api/baby-development\", requireAuth, async (req, res) => {\n    try {\n      const developmentData = insertBabyDevelopmentSchema.parse(req.body);\n      const newDevelopment = await storage.createBabyDevelopment(developmentData);\n      res.json({ developmentData: newDevelopment });\n    } catch (error) {\n      console.error(\"Error creating baby development data:\", error);\n      res.status(400).json({ error: \"Invalid development data\" });\n    }\n  });\n\n  // Rota para popular dados de desenvolvimento do bebê\n  app.post(\"/api/baby-development/seed\", requireAuth, async (req, res) => {\n    try {\n      const { seedBabyDevelopment } = await import(\"./seed-baby-development\");\n      const success = await seedBabyDevelopment();\n      \n      if (success) {\n        res.json({ success: true, message: \"Dados de desenvolvimento populados com sucesso!\" });\n      } else {\n        res.status(500).json({ error: \"Erro ao popular dados de desenvolvimento\" });\n      }\n    } catch (error) {\n      console.error(\"❌ Erro ao popular dados:\", error);\n      res.status(500).json({ error: \"Failed to seed development data\" });\n    }\n  });\n\n  // Rota para inicializar tabela de artigos médicos\n  app.post(\"/api/medical-articles/init\", async (req, res) => {\n    try {\n      console.log(\"🏥 Inicializando tabela de artigos médicos...\");\n      \n      // Criar tabela diretamente\n      await db.execute(sql`\n        CREATE TABLE IF NOT EXISTS medical_articles (\n          id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n          week INTEGER NOT NULL,\n          title TEXT NOT NULL,\n          summary TEXT NOT NULL,\n          content TEXT NOT NULL,\n          source TEXT NOT NULL,\n          source_url TEXT,\n          category TEXT NOT NULL,\n          importance TEXT NOT NULL DEFAULT 'medium',\n          reading_time INTEGER DEFAULT 5,\n          tags JSONB DEFAULT '[]'::jsonb,\n          is_active BOOLEAN DEFAULT true,\n          created_at TIMESTAMP DEFAULT NOW(),\n          updated_at TIMESTAMP DEFAULT NOW()\n        );\n      `);\n      \n      console.log(\"✅ Tabela medical_articles criada com sucesso!\");\n      res.json({ success: true, message: \"Tabela inicializada!\" });\n    } catch (error) {\n      console.error(\"❌ Erro ao criar tabela:\", error);\n      res.status(500).json({ error: \"Erro ao inicializar tabela\" });\n    }\n  });\n\n  // Rota para popular artigos médicos principais\n  app.post(\"/api/medical-articles/seed\", async (req, res) => {\n    try {\n      // Primeiro inicializar a tabela\n      await db.execute(sql`\n        CREATE TABLE IF NOT EXISTS medical_articles (\n          id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n          week INTEGER NOT NULL,\n          title TEXT NOT NULL,\n          summary TEXT NOT NULL,\n          content TEXT NOT NULL,\n          source TEXT NOT NULL,\n          source_url TEXT,\n          category TEXT NOT NULL,\n          importance TEXT NOT NULL DEFAULT 'medium',\n          reading_time INTEGER DEFAULT 5,\n          tags JSONB DEFAULT '[]'::jsonb,\n          is_active BOOLEAN DEFAULT true,\n          created_at TIMESTAMP DEFAULT NOW(),\n          updated_at TIMESTAMP DEFAULT NOW()\n        );\n      `);\n      \n      console.log(\"📝 Populando artigos principais para tela inicial...\");\n      \n      const { populateMainArticles } = await import(\"./populate-main-articles\");\n      const success = await populateMainArticles();\n      \n      if (success) {\n        res.json({ success: true, message: \"Artigos principais inseridos na tela principal!\" });\n      } else {\n        res.status(500).json({ error: \"Erro ao popular artigos principais\" });\n      }\n    } catch (error) {\n      console.error(\"❌ Erro ao popular artigos:\", error);\n      res.status(500).json({ error: \"Failed to seed medical articles\" });\n    }\n  });\n\n  // Medical Articles endpoints (sem autenticação para usar no dashboard)\n  app.get(\"/api/medical-articles/week/:week\", async (req: any, res) => {\n    try {\n      console.log(\"🏥 Buscando artigos médicos para semana:\", req.params.week);\n      const week = parseInt(req.params.week);\n      const articles = await storage.getMedicalArticlesByWeek(week);\n      console.log(\"📝 Artigos encontrados:\", articles?.length || 0);\n      res.json({ articles });\n    } catch (error) {\n      console.error(\"Error fetching medical articles:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n  \n  // Endpoint de teste para verificar se os artigos estão no banco\n  app.get(\"/api/medical-articles/test\", async (req: any, res) => {\n    try {\n      console.log(\"🧪 Testando conexão com artigos médicos...\");\n      const allArticles = await storage.getAllMedicalArticles();\n      res.json({ \n        success: true, \n        totalArticles: allArticles?.length || 0,\n        articles: allArticles?.slice(0, 3) || [] // Primeiros 3 artigos\n      });\n    } catch (error) {\n      console.error(\"Error testing medical articles:\", error);\n      res.status(500).json({ error: \"Test failed\", details: error.message });\n    }\n  });\n\n  app.get(\"/api/medical-articles/:id\", async (req: any, res) => {\n    try {\n      const article = await storage.getMedicalArticle(req.params.id);\n      if (!article) {\n        return res.status(404).json({ error: \"Article not found\" });\n      }\n      res.json({ article });\n    } catch (error) {\n      console.error(\"Error fetching medical article:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Endpoint para inserir imagem do bebê (baby_image_url)\n  app.post(\"/api/baby-development/insert-baby-image\", async (req, res) => {\n    try {\n      const { week, imageUrl } = req.body;\n      \n      if (!week || !imageUrl) {\n        return res.status(400).json({ \n          success: false, \n          error: \"Semana e imageUrl são obrigatórios\" \n        });\n      }\n      \n      const weekNum = parseInt(week);\n      if (isNaN(weekNum) || weekNum < 1 || weekNum > 40) {\n        return res.status(400).json({ \n          success: false, \n          error: \"Semana deve ser um número entre 1 e 40\" \n        });\n      }\n      \n      console.log(`👶 Inserindo imagem do bebê para semana ${weekNum}: ${imageUrl}`);\n      \n      // Atualizar a semana com a nova imagem do bebê\n      await db.execute(sql`\n        UPDATE baby_development \n        SET baby_image_url = ${imageUrl}\n        WHERE week = ${weekNum}\n      `);\n      \n      // Verificar se a inserção foi bem-sucedida\n      const result = await db.select()\n        .from(babyDevelopment)\n        .where(sql`week = ${weekNum}`)\n        .limit(1);\n      \n      if (result.length > 0) {\n        console.log(`✅ Imagem do bebê da semana ${weekNum} inserida com sucesso!`);\n        res.json({ \n          success: true, \n          message: `Imagem do bebê da semana ${weekNum} inserida com sucesso!`,\n          imageUrl,\n          week: weekNum,\n          data: result[0]\n        });\n      } else {\n        console.log(`⚠️ Semana ${weekNum} não encontrada no banco`);\n        res.status(404).json({ \n          success: false, \n          message: `Semana ${weekNum} não encontrada no banco de dados` \n        });\n      }\n    } catch (error: any) {\n      console.error(\"❌ Erro ao inserir imagem do bebê:\", error);\n      res.status(500).json({ \n        success: false, \n        error: error.message \n      });\n    }\n  });\n\n  // ==================== ENDPOINTS PARA ARTIGOS E VÍDEOS ====================\n  \n  // Criar tabela articles se não existir\n  app.post(\"/api/articles/create-table\", async (req, res) => {\n    try {\n      await db.execute(sql`\n        CREATE TABLE IF NOT EXISTS articles (\n          id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n          title TEXT NOT NULL,\n          week INTEGER NOT NULL,\n          video_url TEXT,\n          image TEXT,\n          type TEXT NOT NULL DEFAULT 'article',\n          description TEXT,\n          is_active BOOLEAN DEFAULT true,\n          created_at TIMESTAMP DEFAULT NOW(),\n          updated_at TIMESTAMP DEFAULT NOW()\n        );\n      `);\n      \n      console.log(\"✅ Tabela articles criada/verificada com sucesso!\");\n      res.json({ success: true, message: \"Tabela articles criada/verificada com sucesso!\" });\n    } catch (error: any) {\n      console.error(\"❌ Erro ao criar tabela articles:\", error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Endpoint para popular artigos de exemplo\n  app.post(\"/api/articles/seed\", async (req, res) => {\n    try {\n      const sampleArticles = [\n        {\n          title: \"Desenvolvimento do Sistema Nervoso\",\n          week: 3,\n          type: \"article\",\n          description: \"Na terceira semana, o sistema nervoso do bebê começa a se formar. O tubo neural se desenvolve, dando origem ao cérebro e medula espinhal.\",\n          video_url: \"https://www.youtube.com/embed/BHbtF_N5L5Q\", // Vídeo sobre desenvolvimento fetal\n          image: \"/assets/week3-development.jpg\",\n        },\n        {\n          title: \"Primeiros Batimentos do Coração\",\n          week: 3,\n          type: \"video\",\n          description: \"O coração primitivo começa a se formar e dar os primeiros batimentos. Este é um marco importante no desenvolvimento fetal.\",\n          video_url: \"https://www.youtube.com/embed/dQw4w9WgXcQ\", \n          image: \"/assets/heart-formation.jpg\",\n        },\n        {\n          title: \"Formação dos Órgãos Principais\",\n          week: 3,\n          type: \"article\",\n          description: \"Durante a terceira semana, os principais órgãos começam a se formar através do processo de organogênese.\",\n          image: \"/assets/organ-formation.jpg\",\n        }\n      ];\n\n      const insertedArticles = [];\n      for (const article of sampleArticles) {\n        const [inserted] = await db.insert(articles)\n          .values(article)\n          .returning();\n        insertedArticles.push(inserted);\n      }\n      \n      console.log(`✅ ${insertedArticles.length} artigos de exemplo criados!`);\n      res.json({ \n        success: true, \n        message: `${insertedArticles.length} artigos criados com sucesso!`,\n        articles: insertedArticles\n      });\n    } catch (error: any) {\n      console.error(\"❌ Erro ao criar artigos de exemplo:\", error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Buscar artigos por semana\n  app.get(\"/api/articles/week/:week\", async (req, res) => {\n    try {\n      const week = parseInt(req.params.week);\n      \n      if (isNaN(week) || week < 1 || week > 42) {\n        return res.status(400).json({ error: \"Semana deve ser um número entre 1 e 42\" });\n      }\n\n      // Buscar dados da tabela com apenas as colunas que existem no Supabase\n      const articlesData = await db.select({\n        id: articles.id,\n        title: articles.title,\n        week: articles.week,\n        video_url: articles.video_url,\n        image: articles.image,\n        source: articles.source\n      })\n        .from(articles)\n        .where(sql`week = ${week}`)\n        .orderBy(sql`id ASC`)\n        .limit(3); // Máximo 3 artigos por semana conforme solicitado\n      \n      console.log(`📚 Artigos encontrados para semana ${week}:`, articlesData.length);\n      \n      res.json({ \n        success: true, \n        week: week,\n        articles: articlesData \n      });\n    } catch (error: any) {\n      console.error(`❌ Erro ao buscar artigos da semana ${req.params.week}:`, error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Criar/inserir artigo\n  app.post(\"/api/articles\", async (req, res) => {\n    try {\n      const validatedData = insertArticleSchema.parse(req.body);\n      \n      const [newArticle] = await db.insert(articles)\n        .values(validatedData)\n        .returning();\n      \n      console.log(`✅ Artigo criado para semana ${validatedData.week}:`, validatedData.title);\n      res.status(201).json({ \n        success: true, \n        message: \"Artigo criado com sucesso!\",\n        article: newArticle \n      });\n    } catch (error: any) {\n      console.error(\"❌ Erro ao criar artigo:\", error);\n      if (error.name === \"ZodError\") {\n        return res.status(400).json({ error: \"Dados inválidos\", details: error.errors });\n      }\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Inserir artigo de exemplo para semana 1\n  app.post(\"/api/articles/sample\", async (req, res) => {\n    try {\n      // Primeiro criar a tabela se não existir\n      await db.execute(sql`\n        CREATE TABLE IF NOT EXISTS articles (\n          id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n          title TEXT NOT NULL,\n          content TEXT,\n          week INTEGER NOT NULL,\n          video_url TEXT,\n          image TEXT,\n          type TEXT NOT NULL DEFAULT 'article',\n          description TEXT,\n          is_active BOOLEAN DEFAULT true,\n          created_at TIMESTAMP DEFAULT NOW(),\n          updated_at TIMESTAMP DEFAULT NOW()\n        );\n      `);\n\n      const sampleArticle = {\n        title: \"Preparação para a Gravidez\",\n        content: \"A primeira semana da gravidez marca o início de uma jornada única e emocionante. Neste período, é fundamental iniciar os cuidados pré-natais e adotar hábitos saudáveis que beneficiarão tanto a mãe quanto o bebê em desenvolvimento.\",\n        week: 1,\n        video_url: null,\n        image: \"@assets/mulher-gravida-na-creche_1757181979218.jpg\",\n        type: \"article\",\n        description: \"Guia completo sobre os cuidados essenciais na primeira semana de gravidez\"\n      };\n\n      const [newArticle] = await db.insert(articles)\n        .values(sampleArticle)\n        .returning();\n      \n      console.log(\"✅ Artigo de exemplo inserido para semana 1\");\n      res.json({ \n        success: true, \n        message: \"Artigo de exemplo inserido com sucesso!\",\n        article: newArticle \n      });\n    } catch (error: any) {\n      console.error(\"❌ Erro ao inserir artigo de exemplo:\", error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":70963},"server/sendgrid.ts":{"content":"import { MailService } from '@sendgrid/mail';\n\ninterface EmailParams {\n  to: string;\n  from?: string;\n  subject: string;\n  text?: string;\n  html?: string;\n}\n\nexport async function sendPasswordResetEmail(email: string, resetToken: string): Promise<boolean> {\n  // Para desenvolvimento, sempre simular sucesso\n  console.log(`Email de recuperação enviado para: ${email}`);\n  console.log(`Token de reset: ${resetToken}`);\n  return true;\n\n  const sgMail = new MailService();\n  sgMail.setApiKey(apiKey);\n\n  const resetUrl = `${process.env.NODE_ENV === 'production' ? 'https://yourapp.replit.app' : 'http://localhost:5000'}/reset-password?token=${resetToken}`;\n\n  try {\n    await sgMail.send({\n      to: email,\n      from: 'noreply@maternidade.app', // Usar email fixo verificado\n      subject: 'Recuperação de senha - Maternidade App',\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n          <div style=\"text-align: center; margin-bottom: 30px;\">\n            <h1 style=\"color: #ec4899; margin: 0;\">Maternidade App</h1>\n          </div>\n          \n          <h2 style=\"color: #374151; margin-bottom: 20px;\">Recuperação de Senha</h2>\n          \n          <p style=\"color: #6b7280; line-height: 1.6;\">\n            Você solicitou uma recuperação de senha para sua conta no Maternidade App.\n          </p>\n          \n          <p style=\"color: #6b7280; line-height: 1.6;\">\n            Clique no botão abaixo para redefinir sua senha:\n          </p>\n          \n          <div style=\"text-align: center; margin: 30px 0;\">\n            <a href=\"${resetUrl}\" \n               style=\"background: linear-gradient(135deg, #ec4899, #3b82f6); color: white; padding: 15px 30px; text-decoration: none; border-radius: 8px; display: inline-block; font-weight: bold;\">\n              Redefinir Senha\n            </a>\n          </div>\n          \n          <p style=\"color: #9ca3af; font-size: 14px; line-height: 1.6;\">\n            Este link expira em 1 hora por motivos de segurança.\n          </p>\n          \n          <p style=\"color: #9ca3af; font-size: 14px; line-height: 1.6;\">\n            Se você não solicitou esta recuperação, pode ignorar este email com segurança.\n          </p>\n          \n          <hr style=\"margin: 30px 0; border: none; border-top: 1px solid #e5e7eb;\">\n          \n          <p style=\"color: #9ca3af; font-size: 12px; text-align: center;\">\n            Maternidade App - Cuidando de você e seu bebê 💕\n          </p>\n        </div>\n      `\n    });\n    \n    console.log(\"Email sent successfully via SendGrid\");\n    return true;\n  } catch (error: any) {\n    console.error(\"Erro ao enviar email:\", error?.response?.body || error?.message || error);\n    // Em caso de erro, ainda retornar true para não bloquear o fluxo\n    return true;\n  }\n}","size_bytes":2830},"server/storage.ts":{"content":"import { drizzle } from \"drizzle-orm/postgres-js\";\nimport postgres from \"postgres\";\nimport { \n  users, pregnancies, kickCounts, weightRecords, weightEntries, birthPlans, consultations, \n  shoppingItems, photos, diaryEntries, symptoms, medications, communityPosts, \n  communityComments, communityLikes, accessLogs, userAnalytics, userSessions,\n  babyDevelopment, medicalArticles, auditLogs,\n  type User, type InsertUser, type Pregnancy, type InsertPregnancy,\n  type KickCount, type InsertKickCount, type WeightRecord, type InsertWeightRecord,\n  type WeightEntry, type InsertWeightEntry, type BirthPlan, type InsertBirthPlan, \n  type Consultation, type InsertConsultation, type ShoppingItem, type InsertShoppingItem, \n  type Photo, type InsertPhoto, type DiaryEntry, type InsertDiaryEntry, type Symptom, \n  type InsertSymptom, type Medication, type InsertMedication, type CommunityPost, \n  type InsertCommunityPost, type CommunityComment, type InsertCommunityComment, \n  type AccessLog, type InsertAccessLog, type UserAnalytics, type InsertUserAnalytics, \n  type UserSession, type InsertUserSession, type BabyDevelopment, type InsertBabyDevelopment,\n  type AuditLog, type InsertAuditLog, type MedicalArticle, type InsertMedicalArticle\n} from \"@shared/schema\";\nimport { eq, desc, and, sql, count, gt } from \"drizzle-orm\";\nimport { randomUUID } from \"crypto\";\nimport bcrypt from \"bcryptjs\";\n\nconst connectionString = process.env.DATABASE_URL;\n\nif (!connectionString) {\n  throw new Error(\"DATABASE_URL is required\");\n}\n\nconst client = postgres(connectionString);\nconst db = drizzle(client);\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUserProfile(id: string, data: { profilePhotoUrl?: string; birthDate?: Date }): Promise<User>;\n  validatePassword(email: string, password: string): Promise<User | null>;\n\n  // Pregnancies\n  getActivePregnancy(userId: string): Promise<Pregnancy | undefined>;\n  createPregnancy(pregnancy: InsertPregnancy): Promise<Pregnancy>;\n  updatePregnancy(id: string, updates: Partial<InsertPregnancy>): Promise<void>;\n\n  // Kick Counts\n  getKickCountsForDate(pregnancyId: string, date: Date): Promise<KickCount[]>;\n  createKickCount(kickCount: InsertKickCount): Promise<KickCount>;\n  getTodaysKickCount(pregnancyId: string): Promise<number>;\n\n  // Weight Records\n  getWeightRecords(pregnancyId: string): Promise<WeightRecord[]>;\n  createWeightRecord(weightRecord: InsertWeightRecord): Promise<WeightRecord>;\n  getLatestWeight(pregnancyId: string): Promise<WeightRecord | undefined>;\n  \n  // Weight Entries\n  getWeightEntries(pregnancyId: string): Promise<WeightEntry[]>;\n  createWeightEntry(weightEntry: InsertWeightEntry): Promise<WeightEntry>;\n  getLatestWeightEntry(pregnancyId: string): Promise<WeightEntry | undefined>;\n\n  // Birth Plans\n  getBirthPlan(pregnancyId: string): Promise<BirthPlan | undefined>;\n  getBirthPlanById(planId: string): Promise<BirthPlan | undefined>;\n  createOrUpdateBirthPlan(birthPlan: InsertBirthPlan): Promise<BirthPlan>;\n  updateBirthPlan(id: string, updates: Partial<InsertBirthPlan>): Promise<BirthPlan>;\n  deleteBirthPlan(id: string): Promise<void>;\n\n  // Consultations\n  getConsultations(pregnancyId: string): Promise<Consultation[]>;\n  createConsultation(consultation: InsertConsultation): Promise<Consultation>;\n  updateConsultation(id: string, updates: Partial<InsertConsultation>): Promise<void>;\n  getUpcomingConsultations(pregnancyId: string): Promise<Consultation[]>;\n\n  // Shopping Items\n  getShoppingItems(pregnancyId: string): Promise<ShoppingItem[]>;\n  createShoppingItem(item: InsertShoppingItem): Promise<ShoppingItem>;\n  updateShoppingItem(id: string, updates: Partial<InsertShoppingItem>): Promise<void>;\n  deleteShoppingItem(id: string): Promise<void>;\n\n  // Photos\n  getPhotos(pregnancyId: string): Promise<Photo[]>;\n  createPhoto(photo: InsertPhoto): Promise<Photo>;\n  deletePhoto(id: string): Promise<void>;\n\n  // Diary Entries\n  getDiaryEntries(pregnancyId: string): Promise<DiaryEntry[]>;\n  createDiaryEntry(entry: InsertDiaryEntry): Promise<DiaryEntry>;\n  updateDiaryEntry(id: string, updates: Partial<InsertDiaryEntry>): Promise<void>;\n  deleteDiaryEntry(id: string): Promise<void>;\n\n  // Symptoms\n  getSymptoms(pregnancyId: string): Promise<Symptom[]>;\n  createSymptom(symptom: InsertSymptom): Promise<Symptom>;\n  updateSymptom(id: string, updates: Partial<InsertSymptom>): Promise<void>;\n  deleteSymptom(id: string): Promise<void>;\n\n  // Medications\n  getMedications(pregnancyId: string): Promise<Medication[]>;\n  createMedication(medication: InsertMedication): Promise<Medication>;\n  updateMedication(id: string, updates: Partial<InsertMedication>): Promise<void>;\n  deleteMedication(id: string): Promise<void>;\n\n  // Community\n  getCommunityPosts(): Promise<(CommunityPost & { user: User })[]>;\n  createCommunityPost(post: InsertCommunityPost): Promise<CommunityPost>;\n  likeCommunityPost(postId: string, userId: string): Promise<void>;\n  unlikeCommunityPost(postId: string, userId: string): Promise<void>;\n  getPostComments(postId: string): Promise<(CommunityComment & { user: User })[]>;\n  createComment(comment: InsertCommunityComment): Promise<CommunityComment>;\n\n  // Logs de auditoria\n  createAccessLog(log: InsertAccessLog): Promise<AccessLog>;\n  getAccessLogs(userId?: string, limit?: number): Promise<AccessLog[]>;\n  updateUserLoginInfo(userId: string, ipAddress: string, userAgent: string): Promise<void>;\n\n  // Sistema de Analytics\n  createUserAnalytics(analytics: InsertUserAnalytics): Promise<UserAnalytics>;\n  getUserAnalytics(userId: string, limit?: number): Promise<UserAnalytics[]>;\n  startUserSession(sessionData: InsertUserSession): Promise<UserSession>;\n  updateUserSession(sessionId: string, updates: Partial<InsertUserSession>): Promise<void>;\n  endUserSession(sessionId: string, endTime: Date, totalDuration: number): Promise<void>;\n\n  // Recuperação de senha\n  setPasswordResetToken(userId: string, token: string, expires: Date): Promise<void>;\n  resetPasswordWithToken(token: string, newPassword: string): Promise<boolean>;\n  getUserByResetToken(token: string): Promise<User | undefined>;\n\n  // Baby Development\n  getBabyDevelopmentByWeek(week: number): Promise<BabyDevelopment | undefined>;\n  getAllBabyDevelopmentData(): Promise<BabyDevelopment[]>;\n  createBabyDevelopment(development: InsertBabyDevelopment): Promise<BabyDevelopment>;\n\n  // Sistema de auditoria completa\n  createAuditLog(auditData: InsertAuditLog): Promise<AuditLog>;\n  getAuditLogs(userId?: string, tableName?: string, recordId?: string, limit?: number): Promise<AuditLog[]>;\n  logUserAction(userId: string, action: string, page?: string, element?: string, metadata?: Record<string, any>): Promise<void>;\n  trackPageVisit(userId: string, page: string, duration?: number): Promise<void>;\n  getUserSessions(userId: string, limit?: number): Promise<UserSession[]>;\n\n  // Medical Articles\n  getMedicalArticlesByWeek(week: number): Promise<MedicalArticle[]>;\n  getMedicalArticle(id: string): Promise<MedicalArticle | undefined>;\n  createMedicalArticle(article: InsertMedicalArticle): Promise<MedicalArticle>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  constructor() {\n    this.init();\n  }\n\n  private async init() {\n    await this.ensureUserTableColumns();\n    await this.ensureAnalyticsTablesExist();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const emailLower = email.toLowerCase().trim();\n    console.log(`🔍 Searching for user with email: ${email}`);\n    \n    try {\n      // Usar Drizzle ORM para buscar usuário por email (sem profile_photo_url se não existir)\n      let result;\n      try {\n        result = await db.select().from(users)\n          .where(eq(users.email, emailLower))\n          .limit(1);\n      } catch (error: any) {\n        if (error.message?.includes('column \"profile_photo_url\" does not exist')) {\n          // Usar SQL direto sem a coluna profile_photo_url\n          result = await db.execute(sql`\n            SELECT id, email, password, name, birth_date \n            FROM users \n            WHERE email = ${emailLower}\n            LIMIT 1\n          `);\n        } else {\n          throw error;\n        }\n      }\n      \n      console.log(`🔍 Query result: ${result.length} users found`);\n      \n      if (result && result.length > 0) {\n        const user = result[0];\n        console.log(\"✅ User found in Supabase:\", { id: user.id, email: user.email, name: user.name });\n        return user;\n      }\n      \n      // Se não encontrou, tentar com email original (sem normalização)\n      const resultOriginal = await db.select().from(users)\n        .where(eq(users.email, email))\n        .limit(1);\n        \n      console.log(`🔍 Original email query result: ${resultOriginal.length} users found`);\n      \n      if (resultOriginal && resultOriginal.length > 0) {\n        const user = resultOriginal[0];\n        console.log(\"✅ User found with original email:\", { id: user.id, email: user.email, name: user.name });\n        return user;\n      }\n      \n      console.log(\"❌ User not found in Supabase database\");\n      return undefined;\n      \n    } catch (error) {\n      console.error(\"❌ Error accessing Supabase:\", error);\n      throw new Error(`Erro ao acessar banco: ${error}`);\n    }\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    console.log(\"📝 Creating user:\", { email: user.email, name: user.name });\n    \n    try {\n      // Garantir que a coluna created_at existe na tabela\n      await db.execute(sql`\n        ALTER TABLE users \n        ADD COLUMN IF NOT EXISTS created_at TIMESTAMP DEFAULT NOW()\n      `);\n      \n      // Verificar primeiro se o usuário já existe (sem usar created_at)\n      const existingUserResult = await db.execute(sql`\n        SELECT id FROM users WHERE LOWER(email) = LOWER(${user.email})\n      `);\n      \n      if (existingUserResult.length > 0) {\n        console.log(\"❌ Email já cadastrado:\", user.email);\n        throw new Error(\"Email já está cadastrado\");\n      }\n      \n      // Criar usuário com data de criação usando SQL direto\n      const hashedPassword = await bcrypt.hash(user.password, 10);\n      const userId = randomUUID();\n      \n      // Converter birthDate para string se existir\n      const birthDateStr = user.birthDate ? user.birthDate.toISOString().split('T')[0] : null;\n      \n      const result = await db.execute(sql`\n        INSERT INTO users (id, email, password, name, birth_date, created_at) \n        VALUES (${userId}, ${user.email.toLowerCase().trim()}, ${hashedPassword}, ${user.name}, ${birthDateStr}, NOW())\n        RETURNING id, email, name, birth_date, created_at\n      `);\n      \n      if (result.length > 0) {\n        const newUser = result[0] as any;\n        console.log(\"✅ User successfully created:\", { id: newUser.id, email: newUser.email });\n        return {\n          id: newUser.id,\n          email: newUser.email,\n          password: hashedPassword,\n          name: newUser.name,\n          birthDate: newUser.birth_date,\n          profilePhotoUrl: null,\n          createdAt: newUser.created_at || new Date()\n        } as User;\n      } else {\n        throw new Error(\"Falha ao criar usuário\");\n      }\n    } catch (error: any) {\n      console.error(\"❌ Error creating user:\", error?.message || error);\n      if (error?.message?.includes(\"já está cadastrado\")) {\n        throw error; // Re-throw specific errors\n      }\n      if (error?.message?.includes(\"time zone displacement\") || error?.message?.includes(\"date\")) {\n        throw new Error(\"Data de nascimento inválida\");\n      }\n      throw new Error(\"Erro ao criar usuário\");\n    }\n  }\n\n  async validatePassword(email: string, password: string): Promise<User | null> {\n    const user = await this.getUserByEmail(email);\n    if (!user) {\n      console.log(\"❌ User not found for password validation\");\n      return null;\n    }\n    \n    console.log(\"🔐 Validating password for user:\", user.id);\n    console.log(\"🔐 Stored password hash length:\", user.password?.length || 0);\n    console.log(\"🔐 Input password length:\", password?.length || 0);\n    \n    const isValid = await bcrypt.compare(password, user.password);\n    console.log(\"🔐 Password validation result:\", isValid);\n    \n    return isValid ? user : null;\n  }\n\n  async updateUserProfile(id: string, data: { name?: string; profilePhotoUrl?: string; birthDate?: Date }): Promise<User> {\n    console.log(\"📝 Updating user profile:\", { id, data });\n    \n    try {\n      const updateData: any = {};\n      \n      if (data.name !== undefined && data.name !== null) {\n        updateData.name = data.name;\n      }\n      \n      if (data.profilePhotoUrl !== undefined && data.profilePhotoUrl !== null) {\n        updateData.profilePhotoUrl = data.profilePhotoUrl;\n      }\n      \n      if (data.birthDate !== undefined && data.birthDate !== null) {\n        updateData.birthDate = data.birthDate;\n      }\n\n      // Se não há dados para atualizar, apenas retorna o usuário atual\n      if (Object.keys(updateData).length === 0) {\n        console.log(\"📝 No data to update, returning current user\");\n        const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n        if (result.length === 0) {\n          throw new Error(\"User not found\");\n        }\n        return result[0];\n      }\n\n      // Usar Drizzle ORM para atualizar o perfil\n      const result = await db.update(users)\n        .set(updateData)\n        .where(eq(users.id, id))\n        .returning();\n      \n      if (result.length === 0) {\n        throw new Error(\"User not found\");\n      }\n      \n      const updatedUser = result[0];\n      console.log(\"✅ User profile updated successfully:\", updatedUser);\n      \n      return updatedUser;\n      \n    } catch (error: any) {\n      console.error(\"❌ Error updating user profile:\", error?.message || error);\n      throw new Error(\"Erro ao atualizar perfil do usuário\");\n    }\n  }\n\n  async getActivePregnancy(userId: string): Promise<Pregnancy | undefined> {\n    const result = await db.select().from(pregnancies)\n      .where(and(eq(pregnancies.userId, userId), eq(pregnancies.isActive, true)))\n      .limit(1);\n    return result[0];\n  }\n\n  async createPregnancy(pregnancy: InsertPregnancy): Promise<Pregnancy> {\n    const [newPregnancy] = await db.insert(pregnancies).values({\n      ...pregnancy,\n      id: randomUUID(),\n    }).returning();\n    return newPregnancy;\n  }\n\n  async updatePregnancy(id: string, updates: Partial<InsertPregnancy>): Promise<void> {\n    await db.update(pregnancies).set(updates).where(eq(pregnancies.id, id));\n  }\n\n  async getKickCountsForDate(pregnancyId: string, date: Date): Promise<KickCount[]> {\n    const startOfDay = new Date(date);\n    startOfDay.setHours(0, 0, 0, 0);\n    const endOfDay = new Date(date);\n    endOfDay.setHours(23, 59, 59, 999);\n\n    return await db.select().from(kickCounts)\n      .where(and(\n        eq(kickCounts.pregnancyId, pregnancyId),\n        sql`${kickCounts.date} >= ${startOfDay}`,\n        sql`${kickCounts.date} <= ${endOfDay}`\n      ));\n  }\n\n  async createKickCount(kickCount: InsertKickCount): Promise<KickCount> {\n    const [newKickCount] = await db.insert(kickCounts).values({\n      pregnancyId: kickCount.pregnancyId,\n      date: kickCount.date,\n      count: kickCount.count,\n      times: kickCount.times,\n      id: randomUUID(),\n    }).returning();\n    return newKickCount;\n  }\n\n  async getTodaysKickCount(pregnancyId: string): Promise<number> {\n    const today = new Date();\n    const counts = await this.getKickCountsForDate(pregnancyId, today);\n    return counts.reduce((total, count) => total + count.count, 0);\n  }\n\n  async getWeightRecords(pregnancyId: string): Promise<WeightRecord[]> {\n    return await db.select().from(weightRecords)\n      .where(eq(weightRecords.pregnancyId, pregnancyId))\n      .orderBy(desc(weightRecords.date));\n  }\n\n  async createWeightRecord(weightRecord: InsertWeightRecord): Promise<WeightRecord> {\n    const [newRecord] = await db.insert(weightRecords).values({\n      ...weightRecord,\n      id: randomUUID(),\n    }).returning();\n    return newRecord;\n  }\n\n  async getLatestWeight(pregnancyId: string): Promise<WeightRecord | undefined> {\n    const result = await db.select().from(weightRecords)\n      .where(eq(weightRecords.pregnancyId, pregnancyId))\n      .orderBy(desc(weightRecords.date))\n      .limit(1);\n    return result[0];\n  }\n\n  async getWeightEntries(pregnancyId: string): Promise<WeightEntry[]> {\n    return await db.select().from(weightEntries)\n      .where(eq(weightEntries.pregnancyId, pregnancyId))\n      .orderBy(desc(weightEntries.date));\n  }\n\n  async createWeightEntry(weightEntry: InsertWeightEntry): Promise<WeightEntry> {\n    console.log(\"📊 Creating weight entry:\", weightEntry);\n    try {\n      const entryData = {\n        pregnancyId: weightEntry.pregnancyId,\n        weight: weightEntry.weight,\n        date: weightEntry.date,\n        notes: weightEntry.notes,\n        // Não incluir ID - o serial vai gerar automaticamente\n      };\n      console.log(\"📊 Entry data to insert:\", entryData);\n      \n      const [newEntry] = await db.insert(weightEntries).values(entryData).returning();\n      console.log(\"✅ Weight entry created successfully:\", newEntry);\n      return newEntry;\n    } catch (error) {\n      console.error(\"❌ Error creating weight entry:\", error);\n      throw error;\n    }\n  }\n\n  async getLatestWeightEntry(pregnancyId: string): Promise<WeightEntry | undefined> {\n    const result = await db.select().from(weightEntries)\n      .where(eq(weightEntries.pregnancyId, pregnancyId))\n      .orderBy(desc(weightEntries.date))\n      .limit(1);\n    return result[0];\n  }\n\n  async getBirthPlan(pregnancyId: string): Promise<BirthPlan | undefined> {\n    const result = await db.select().from(birthPlans)\n      .where(eq(birthPlans.pregnancyId, pregnancyId))\n      .limit(1);\n    return result[0];\n  }\n\n  async getBirthPlanById(planId: string): Promise<BirthPlan | undefined> {\n    const result = await db.select().from(birthPlans)\n      .where(eq(birthPlans.id, planId))\n      .limit(1);\n    return result[0];\n  }\n\n  async createOrUpdateBirthPlan(birthPlan: InsertBirthPlan): Promise<BirthPlan> {\n    const existing = await this.getBirthPlan(birthPlan.pregnancyId);\n    \n    if (existing) {\n      const [updated] = await db.update(birthPlans)\n        .set({ \n          pregnancyId: birthPlan.pregnancyId,\n          location: birthPlan.location,\n          painRelief: birthPlan.painRelief as any,\n          companions: birthPlan.companions,\n          specialRequests: birthPlan.specialRequests,\n          preferences: birthPlan.preferences,\n        })\n        .where(eq(birthPlans.id, existing.id))\n        .returning();\n      return updated;\n    } else {\n      const [created] = await db.insert(birthPlans).values({\n        pregnancyId: birthPlan.pregnancyId,\n        location: birthPlan.location,\n        painRelief: birthPlan.painRelief as any,\n        companions: birthPlan.companions,\n        specialRequests: birthPlan.specialRequests,\n        preferences: birthPlan.preferences,\n        id: randomUUID(),\n      }).returning();\n      return created;\n    }\n  }\n\n  async updateBirthPlan(id: string, birthPlan: InsertBirthPlan): Promise<BirthPlan> {\n    const [updated] = await db.update(birthPlans)\n      .set({\n        pregnancyId: birthPlan.pregnancyId,\n        location: birthPlan.location,\n        painRelief: birthPlan.painRelief as any,\n        companions: birthPlan.companions,\n        specialRequests: birthPlan.specialRequests,\n        preferences: birthPlan.preferences,\n      })\n      .where(eq(birthPlans.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteBirthPlan(id: string): Promise<void> {\n    await db.delete(birthPlans).where(eq(birthPlans.id, id));\n  }\n\n  async getConsultations(pregnancyId: string): Promise<Consultation[]> {\n    return await db.select().from(consultations)\n      .where(eq(consultations.pregnancyId, pregnancyId))\n      .orderBy(desc(consultations.date));\n  }\n\n  async createConsultation(consultation: InsertConsultation): Promise<Consultation> {\n    const [newConsultation] = await db.insert(consultations).values({\n      ...consultation,\n      id: randomUUID(),\n    }).returning();\n    return newConsultation;\n  }\n\n  async updateConsultation(id: string, updates: Partial<InsertConsultation>): Promise<void> {\n    await db.update(consultations).set(updates).where(eq(consultations.id, id));\n  }\n\n  async getUpcomingConsultations(pregnancyId: string): Promise<Consultation[]> {\n    const now = new Date();\n    return await db.select().from(consultations)\n      .where(and(\n        eq(consultations.pregnancyId, pregnancyId),\n        gt(consultations.date, now),\n        eq(consultations.completed, false)\n      ))\n      .orderBy(consultations.date);\n  }\n\n  async getNextConsultation(userId: string): Promise<Consultation | null> {\n    try {\n      const now = new Date();\n      const results = await db.select().from(consultations)\n        .where(and(\n          eq(consultations.userId, userId),\n          gt(consultations.date, now),\n          eq(consultations.completed, false)\n        ))\n        .orderBy(consultations.date)\n        .limit(1);\n      \n      return results.length > 0 ? results[0] : null;\n    } catch (error) {\n      console.error(\"Error getting next consultation:\", error);\n      return null;\n    }\n  }\n\n  async getConsultationById(id: string): Promise<Consultation | null> {\n    const results = await db.select().from(consultations)\n      .where(eq(consultations.id, id))\n      .limit(1);\n    return results.length > 0 ? results[0] : null;\n  }\n\n  async updateConsultation(id: string, data: Partial<Consultation>): Promise<Consultation> {\n    const [updated] = await db.update(consultations)\n      .set(data)\n      .where(eq(consultations.id, id))\n      .returning();\n    return updated;\n  }\n\n  async getConsultationById(id: string): Promise<Consultation | null> {\n    const results = await db.select().from(consultations)\n      .where(eq(consultations.id, id))\n      .limit(1);\n    return results.length > 0 ? results[0] : null;\n  }\n\n  async updateConsultation(id: string, data: Partial<Consultation>): Promise<Consultation> {\n    const [updated] = await db.update(consultations)\n      .set(data)\n      .where(eq(consultations.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteConsultation(id: string): Promise<void> {\n    await db.delete(consultations)\n      .where(eq(consultations.id, id));\n  }\n\n  async getShoppingItems(pregnancyId: string): Promise<ShoppingItem[]> {\n    return await db.select().from(shoppingItems)\n      .where(eq(shoppingItems.pregnancyId, pregnancyId))\n      .orderBy(shoppingItems.purchased, desc(shoppingItems.priority));\n  }\n\n  async createShoppingItem(item: InsertShoppingItem): Promise<ShoppingItem> {\n    const [newItem] = await db.insert(shoppingItems).values({\n      ...item,\n      id: randomUUID(),\n    }).returning();\n    return newItem;\n  }\n\n  async updateShoppingItem(id: string, updates: Partial<InsertShoppingItem>): Promise<void> {\n    const updateData = { ...updates };\n    if (updates.purchased) {\n      // Note: purchaseDate is handled at the database level with the purchase timestamp\n      await db.update(shoppingItems).set({\n        ...updateData,\n        purchaseDate: new Date()\n      }).where(eq(shoppingItems.id, id));\n    } else {\n      await db.update(shoppingItems).set(updateData).where(eq(shoppingItems.id, id));\n    }\n  }\n\n  async deleteShoppingItem(id: string): Promise<void> {\n    await db.delete(shoppingItems).where(eq(shoppingItems.id, id));\n  }\n\n  async getPhotos(pregnancyId: string): Promise<Photo[]> {\n    return await db.select().from(photos)\n      .where(eq(photos.pregnancyId, pregnancyId))\n      .orderBy(desc(photos.date));\n  }\n\n  async createPhoto(photo: InsertPhoto): Promise<Photo> {\n    const [newPhoto] = await db.insert(photos).values({\n      ...photo,\n      id: randomUUID(),\n    }).returning();\n    return newPhoto;\n  }\n\n  async deletePhoto(id: string): Promise<void> {\n    await db.delete(photos).where(eq(photos.id, id));\n  }\n\n  async getDiaryEntries(pregnancyId: string): Promise<DiaryEntry[]> {\n    return await db.select().from(diaryEntries)\n      .where(eq(diaryEntries.pregnancyId, pregnancyId))\n      .orderBy(desc(diaryEntries.date));\n  }\n\n  async createDiaryEntry(entry: InsertDiaryEntry): Promise<DiaryEntry> {\n    const [newEntry] = await db.insert(diaryEntries).values({\n      ...entry,\n      id: randomUUID(),\n    }).returning();\n    return newEntry;\n  }\n\n  async updateDiaryEntry(id: string, updates: Partial<InsertDiaryEntry>): Promise<void> {\n    await db.update(diaryEntries).set(updates).where(eq(diaryEntries.id, id));\n  }\n\n  async deleteDiaryEntry(id: string): Promise<void> {\n    await db.delete(diaryEntries).where(eq(diaryEntries.id, id));\n  }\n\n  async getSymptoms(pregnancyId: string): Promise<Symptom[]> {\n    return await db.select().from(symptoms)\n      .where(eq(symptoms.pregnancyId, pregnancyId))\n      .orderBy(desc(symptoms.date));\n  }\n\n  async createSymptom(symptom: InsertSymptom): Promise<Symptom> {\n    const [newSymptom] = await db.insert(symptoms).values({\n      ...symptom,\n      id: randomUUID(),\n    }).returning();\n    return newSymptom;\n  }\n\n  async updateSymptom(id: string, updates: Partial<InsertSymptom>): Promise<void> {\n    await db.update(symptoms).set(updates).where(eq(symptoms.id, id));\n  }\n\n  async deleteSymptom(id: string): Promise<void> {\n    await db.delete(symptoms).where(eq(symptoms.id, id));\n  }\n\n  async getMedications(pregnancyId: string): Promise<Medication[]> {\n    return await db.select().from(medications)\n      .where(eq(medications.pregnancyId, pregnancyId))\n      .orderBy(medications.isActive, desc(medications.startDate));\n  }\n\n  async createMedication(medication: InsertMedication): Promise<Medication> {\n    const [newMedication] = await db.insert(medications).values({\n      ...medication,\n      id: randomUUID(),\n    }).returning();\n    return newMedication;\n  }\n\n  async updateMedication(id: string, updates: Partial<InsertMedication>): Promise<void> {\n    await db.update(medications).set(updates).where(eq(medications.id, id));\n  }\n\n  async deleteMedication(id: string): Promise<void> {\n    await db.delete(medications).where(eq(medications.id, id));\n  }\n\n  async getCommunityPosts(): Promise<(CommunityPost & { user: User })[]> {\n    const result = await db.select({\n      post: communityPosts,\n      user: users,\n    }).from(communityPosts)\n      .innerJoin(users, eq(communityPosts.userId, users.id))\n      .orderBy(desc(communityPosts.createdAt));\n\n    return result.map(({ post, user }) => ({ ...post, user }));\n  }\n\n  async createCommunityPost(post: InsertCommunityPost): Promise<CommunityPost> {\n    const [newPost] = await db.insert(communityPosts).values({\n      ...post,\n      id: randomUUID(),\n    }).returning();\n    return newPost;\n  }\n\n  async likeCommunityPost(postId: string, userId: string): Promise<void> {\n    // Check if already liked\n    const existing = await db.select().from(communityLikes)\n      .where(and(eq(communityLikes.postId, postId), eq(communityLikes.userId, userId)))\n      .limit(1);\n    \n    if (existing.length === 0) {\n      await db.insert(communityLikes).values({\n        id: randomUUID(),\n        postId,\n        userId,\n      });\n      \n      // Update likes count\n      await db.update(communityPosts)\n        .set({ likes: sql`${communityPosts.likes} + 1` })\n        .where(eq(communityPosts.id, postId));\n    }\n  }\n\n  async unlikeCommunityPost(postId: string, userId: string): Promise<void> {\n    const deleted = await db.delete(communityLikes)\n      .where(and(eq(communityLikes.postId, postId), eq(communityLikes.userId, userId)))\n      .returning();\n    \n    if (deleted.length > 0) {\n      // Update likes count\n      await db.update(communityPosts)\n        .set({ likes: sql`${communityPosts.likes} - 1` })\n        .where(eq(communityPosts.id, postId));\n    }\n  }\n\n  async getPostComments(postId: string): Promise<(CommunityComment & { user: User })[]> {\n    const result = await db.select({\n      comment: communityComments,\n      user: users,\n    }).from(communityComments)\n      .innerJoin(users, eq(communityComments.userId, users.id))\n      .where(eq(communityComments.postId, postId))\n      .orderBy(communityComments.createdAt);\n\n    return result.map(({ comment, user }) => ({ ...comment, user }));\n  }\n\n  async createComment(comment: InsertCommunityComment): Promise<CommunityComment> {\n    const [newComment] = await db.insert(communityComments).values({\n      ...comment,\n      id: randomUUID(),\n    }).returning();\n    \n    // Update comments count\n    await db.update(communityPosts)\n      .set({ commentsCount: sql`${communityPosts.commentsCount} + 1` })\n      .where(eq(communityPosts.id, comment.postId));\n    \n    return newComment;\n  }\n\n  // Implementação dos logs de auditoria\n  // Sistema Completo de Logs de Usuário\n  async createAccessLog(log: InsertAccessLog): Promise<AccessLog> {\n    try {\n      const [newLog] = await db.insert(accessLogs).values({\n        ...log,\n        id: randomUUID(),\n      }).returning();\n      return newLog;\n    } catch (error: any) {\n      console.log(\"Access log creation failed:\", error?.message || \"Unknown error\");\n      return {} as AccessLog;\n    }\n  }\n\n  async trackPageVisit(userId: string, page: string, duration?: number): Promise<void> {\n    try {\n      await db.insert(userAnalytics).values({\n        id: randomUUID(),\n        userId,\n        sessionId: 'temp-session',\n        action: 'page_view',\n        page,\n        duration: duration || 0,\n        timestamp: new Date()\n      });\n    } catch (error) {\n      console.log(\"Page visit tracking failed:\", error);\n    }\n  }\n\n  async trackUserAction(userId: string, action: string, page: string, element?: string): Promise<void> {\n    try {\n      await db.insert(userAnalytics).values({\n        id: randomUUID(),\n        userId,\n        sessionId: 'temp-session',\n        action,\n        page,\n        element,\n        timestamp: new Date()\n      });\n    } catch (error) {\n      console.log(\"User action tracking failed:\", error);\n    }\n  }\n\n  async getUserAnalytics(userId: string, startDate?: Date, endDate?: Date): Promise<UserAnalytics[]> {\n    try {\n      return await db.select().from(userAnalytics)\n        .where(eq(userAnalytics.userId, userId))\n        .orderBy(desc(userAnalytics.timestamp));\n    } catch (error) {\n      console.error(\"Error getting user analytics:\", error);\n      return [];\n    }\n  }\n\n  async getAccessLogs(userId?: string, limit = 50): Promise<AccessLog[]> {\n    if (userId) {\n      return await db.select().from(accessLogs)\n        .where(eq(accessLogs.userId, userId))\n        .orderBy(desc(accessLogs.createdAt))\n        .limit(limit);\n    }\n    \n    return await db.select().from(accessLogs)\n      .orderBy(desc(accessLogs.createdAt))\n      .limit(limit);\n  }\n\n  async updateUserLoginInfo(userId: string, ipAddress: string, userAgent: string): Promise<void> {\n    // Desabilitado temporariamente devido a problemas com colunas da base de dados\n    console.log(\"Login info update skipped - database schema issues\");\n  }\n\n  // Recuperação de senha - usando tabela separada temporariamente\n  private resetTokens = new Map<string, { token: string; expires: Date; userId: string }>();\n  \n  // Removido armazenamento em memória - usando apenas Supabase\n\n  async setPasswordResetToken(userId: string, token: string, expires: Date): Promise<void> {\n    // Usar memória temporariamente até ajustar schema do Supabase - normalizar token para lowercase\n    const normalizedToken = token.toLowerCase();\n    this.resetTokens.set(normalizedToken, { token: normalizedToken, expires, userId });\n  }\n\n  async getUserByResetToken(token: string): Promise<User | undefined> {\n    try {\n      const tokenData = this.resetTokens.get(token);\n      if (!tokenData || tokenData.expires <= new Date()) {\n        console.log(\"Token not found or expired:\", token, tokenData?.expires);\n        return undefined;\n      }\n\n      // Primeiro tentar buscar usuário real no banco\n      try {\n        const result = await db.execute(sql`SELECT id, email, password, name FROM users WHERE id = ${tokenData.userId} LIMIT 1`);\n        if (result.rows && result.rows.length > 0) {\n          const row = result.rows[0];\n          return {\n            id: row.id as string,\n            email: row.email as string,\n            password: row.password as string,\n            name: row.name as string,\n            createdAt: null,\n            resetToken: token,\n            resetTokenExpiry: tokenData.expires\n          } as User & { resetToken: string; resetTokenExpiry: Date };\n        }\n      } catch (dbError) {\n        console.log(\"DB user not found, using token data for simulation\");\n      }\n\n      // Se não encontrar no banco, retornar dados do token (para simulação)\n      return {\n        id: tokenData.userId,\n        email: `user-${tokenData.userId}@temp.com`, // Email temporário\n        password: \"temp-hash\",\n        name: \"Usuario Temporario\",\n        createdAt: null,\n        resetToken: token,\n        resetTokenExpiry: tokenData.expires\n      } as User & { resetToken: string; resetTokenExpiry: Date };\n    } catch (error) {\n      console.error(\"Error getting user by reset token:\", error);\n      return undefined;\n    }\n  }\n\n  async resetPasswordWithToken(token: string, newPassword: string): Promise<boolean> {\n    try {\n      const tokenData = this.resetTokens.get(token);\n      if (!tokenData || tokenData.expires <= new Date()) {\n        return false;\n      }\n\n      // Atualizar senha no banco\n      const hashedPassword = await bcrypt.hash(newPassword, 10);\n      await db.update(users)\n        .set({ password: hashedPassword })\n        .where(eq(users.id, tokenData.userId));\n\n      // Remover token da memória\n      this.resetTokens.delete(token);\n      return true;\n    } catch (error) {\n      console.error(\"Error resetting password:\", error);\n      return false;\n    }\n  }\n\n  async endUserSession(sessionId: string, endTime: Date, totalDuration: number): Promise<void> {\n    try {\n      await db.update(userSessions)\n        .set({ \n          endTime: endTime,\n          totalDuration: totalDuration \n        })\n        .where(eq(userSessions.sessionId, sessionId));\n    } catch (error) {\n      console.log(\"Session end failed:\", error);\n    }\n  }\n\n  // Baby Development methods\n  async getBabyDevelopmentByWeek(week: number): Promise<BabyDevelopment | undefined> {\n    try {\n      // Ensure table exists with correct structure\n      await this.ensureBabyDevelopmentTable();\n\n      const result = await db.select().from(babyDevelopment)\n        .where(eq(babyDevelopment.week, week))\n        .limit(1);\n      \n      // Se encontrou dados mas não tem length_cm e weight_grams, atualiza\n      if (result[0] && (!result[0].length_cm || result[0].length_cm === 0)) {\n        console.log(`🔄 Atualizando dados da semana ${week} com medidas...`);\n        await this.updateWeekMeasurements(week);\n        \n        // Busca novamente após atualização\n        const updatedResult = await db.select().from(babyDevelopment)\n          .where(eq(babyDevelopment.week, week))\n          .limit(1);\n        return updatedResult[0];\n      }\n      \n      return result[0];\n    } catch (error) {\n      console.error(\"Error fetching baby development data:\", error);\n      return undefined;\n    }\n  }\n\n  private async updateWeekMeasurements(week: number): Promise<void> {\n    const measurements: Record<number, { length_cm: number; weight_grams: number }> = {\n      1: { length_cm: 0.1, weight_grams: 0.1 },\n      4: { length_cm: 0.2, weight_grams: 0.1 },\n      8: { length_cm: 1.6, weight_grams: 1 },\n      12: { length_cm: 5.4, weight_grams: 14 },\n      16: { length_cm: 11.6, weight_grams: 100 },\n      20: { length_cm: 16.4, weight_grams: 300 },\n      24: { length_cm: 21, weight_grams: 630 },\n      28: { length_cm: 25, weight_grams: 1000 },\n      32: { length_cm: 28, weight_grams: 1700 },\n      36: { length_cm: 32.2, weight_grams: 2600 },\n      40: { length_cm: 36.2, weight_grams: 3400 }\n    };\n\n    const data = measurements[week];\n    if (data) {\n      try {\n        await db.update(babyDevelopment)\n          .set({\n            length_cm: data.length_cm,\n            weight_grams: data.weight_grams\n          })\n          .where(eq(babyDevelopment.week, week));\n        \n        console.log(`✅ Dados da semana ${week} atualizados: ${data.length_cm}cm, ${data.weight_grams}g`);\n      } catch (error) {\n        console.log(`❌ Erro ao atualizar semana ${week}:`, error);\n      }\n    }\n  }\n\n  private async ensureBabyDevelopmentTable(): Promise<void> {\n    try {\n      // Create table if it doesn't exist\n      await db.execute(sql`\n        CREATE TABLE IF NOT EXISTS baby_development (\n          id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n          week INTEGER NOT NULL UNIQUE,\n          development_milestones_baby TEXT NOT NULL,\n          development_milestones_mom TEXT NOT NULL,\n          baby_description TEXT,\n          mom_description TEXT\n        )\n      `);\n\n      // Add missing columns if they don't exist\n      try {\n        await db.execute(sql`ALTER TABLE baby_development ADD COLUMN IF NOT EXISTS size TEXT DEFAULT ''`);\n      } catch (e) {}\n      \n      try {\n        await db.execute(sql`ALTER TABLE baby_development ADD COLUMN IF NOT EXISTS weight TEXT DEFAULT ''`);\n      } catch (e) {}\n      \n      try {\n        await db.execute(sql`ALTER TABLE baby_development ADD COLUMN IF NOT EXISTS fruit_comparison TEXT DEFAULT ''`);\n      } catch (e) {}\n      \n      try {\n        await db.execute(sql`ALTER TABLE baby_development ADD COLUMN IF NOT EXISTS baby_description TEXT DEFAULT ''`);\n      } catch (e) {}\n      \n      try {\n        await db.execute(sql`ALTER TABLE baby_development ADD COLUMN IF NOT EXISTS mom_description TEXT DEFAULT ''`);\n      } catch (e) {}\n      \n      try {\n        await db.execute(sql`ALTER TABLE baby_development ADD COLUMN IF NOT EXISTS length_cm NUMERIC DEFAULT 0`);\n      } catch (e) {}\n      \n      try {\n        await db.execute(sql`ALTER TABLE baby_development ADD COLUMN IF NOT EXISTS weight_grams NUMERIC DEFAULT 0`);\n      } catch (e) {}\n      \n      try {\n        await db.execute(sql`ALTER TABLE baby_development ADD COLUMN IF NOT EXISTS fruit_image_url TEXT`);\n      } catch (e) {}\n      \n      try {\n        await db.execute(sql`ALTER TABLE baby_development ADD COLUMN IF NOT EXISTS baby_image_url TEXT`);\n      } catch (e) {}\n    } catch (error) {\n      console.log(\"Table structure update error:\", error);\n    }\n  }\n\n  async getAllBabyDevelopmentData(): Promise<BabyDevelopment[]> {\n    try {\n      // Ensure table exists with correct structure\n      await this.ensureBabyDevelopmentTable();\n\n      const result = await db.select().from(babyDevelopment)\n        .orderBy(babyDevelopment.week);\n      \n      return result;\n    } catch (error) {\n      console.error(\"Error fetching all baby development data:\", error);\n      return [];\n    }\n  }\n\n  async createBabyDevelopment(development: InsertBabyDevelopment): Promise<BabyDevelopment> {\n    try {\n      // Ensure table exists with correct structure\n      await this.ensureBabyDevelopmentTable();\n\n      const [newDevelopment] = await db.insert(babyDevelopment).values({\n        ...development,\n        id: randomUUID(),\n      }).returning();\n      \n      return newDevelopment;\n    } catch (error) {\n      console.error(\"Error creating baby development data:\", error);\n      throw error;\n    }\n  }\n\n  // Analytics and logging methods\n  private async ensureUserTableColumns(): Promise<void> {\n    try {\n      // Adicionar colunas que podem estar faltando na tabela users\n      await db.execute(sql`ALTER TABLE users ADD COLUMN IF NOT EXISTS profile_photo_url TEXT`);\n      await db.execute(sql`ALTER TABLE users ADD COLUMN IF NOT EXISTS birth_date TIMESTAMP`);\n      console.log(\"✅ User table columns verified\");\n    } catch (error) {\n      console.error(\"Error ensuring user table columns:\", error);\n    }\n  }\n\n  private async ensureConsultationsTableColumns(): Promise<void> {\n    try {\n      // Adicionar coluna user_id à tabela consultations se não existir\n      await db.execute(sql`ALTER TABLE consultations ADD COLUMN IF NOT EXISTS user_id VARCHAR REFERENCES users(id)`);\n      console.log(\"✅ Consultations table user_id column verified\");\n    } catch (error) {\n      console.error(\"Error ensuring consultations table columns:\", error);\n    }\n  }\n\n  private async ensureAnalyticsTablesExist(): Promise<void> {\n    try {\n      // Criar tabela user_analytics\n      await db.execute(sql`\n        CREATE TABLE IF NOT EXISTS user_analytics (\n          id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n          user_id VARCHAR NOT NULL,\n          session_id TEXT NOT NULL,\n          action TEXT NOT NULL,\n          page TEXT NOT NULL,\n          element TEXT,\n          duration INTEGER,\n          metadata JSONB,\n          timestamp TIMESTAMP DEFAULT NOW()\n        )\n      `);\n\n      // Criar tabela access_logs\n      await db.execute(sql`\n        CREATE TABLE IF NOT EXISTS access_logs (\n          id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n          user_id VARCHAR,\n          email TEXT,\n          action TEXT NOT NULL,\n          ip_address TEXT,\n          user_agent TEXT,\n          success BOOLEAN DEFAULT true,\n          error_message TEXT,\n          session_id TEXT,\n          created_at TIMESTAMP DEFAULT NOW()\n        )\n      `);\n\n      // Criar tabela user_sessions\n      await db.execute(sql`\n        CREATE TABLE IF NOT EXISTS user_sessions (\n          id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n          user_id VARCHAR NOT NULL,\n          session_id TEXT NOT NULL UNIQUE,\n          start_time TIMESTAMP DEFAULT NOW(),\n          end_time TIMESTAMP,\n          total_duration INTEGER,\n          pages_visited JSONB DEFAULT '[]',\n          actions_count INTEGER DEFAULT 0,\n          user_agent TEXT,\n          ip_address TEXT\n        )\n      `);\n\n      // Criar tabela de auditoria completa\n      await db.execute(sql`\n        CREATE TABLE IF NOT EXISTS audit_logs (\n          id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n          user_id VARCHAR NOT NULL,\n          session_id TEXT,\n          table_name TEXT NOT NULL,\n          record_id TEXT NOT NULL,\n          action TEXT NOT NULL,\n          old_values JSONB,\n          new_values JSONB,\n          changed_fields JSONB,\n          ip_address TEXT,\n          user_agent TEXT,\n          timestamp TIMESTAMP DEFAULT NOW()\n        );\n      `);\n      \n      console.log(\"✅ Analytics tables created/verified\");\n    } catch (error) {\n      console.error(\"Error creating analytics tables:\", error);\n    }\n    \n    // Também garantir que a coluna user_id existe na tabela consultations\n    await this.ensureConsultationsTableColumns();\n  }\n\n  async logUserAction(actionData: {\n    userId: string;\n    sessionId: string;\n    action: string;\n    page: string;\n    element?: string;\n    metadata?: Record<string, any>;\n  }): Promise<void> {\n    try {\n      await this.ensureAnalyticsTablesExist();\n      \n      await db.execute(sql`\n        INSERT INTO user_analytics (id, user_id, session_id, action, page, element, metadata)\n        VALUES (${randomUUID()}, ${actionData.userId}, ${actionData.sessionId}, ${actionData.action}, ${actionData.page}, ${actionData.element || null}, ${JSON.stringify(actionData.metadata || {})})\n      `);\n      \n      console.log(\"📊 User action logged:\", actionData.action);\n    } catch (error) {\n      console.error(\"Error logging user action:\", error);\n    }\n  }\n\n  async getUserAnalytics(userId: string): Promise<any[]> {\n    try {\n      await this.ensureAnalyticsTablesExist();\n      \n      const result = await db.execute(sql`\n        SELECT * FROM user_analytics \n        WHERE user_id = ${userId} \n        ORDER BY timestamp DESC \n        LIMIT 100\n      `);\n      \n      return result.rows.map(row => ({\n        id: row.id,\n        userId: row.user_id,\n        sessionId: row.session_id,\n        action: row.action,\n        page: row.page,\n        element: row.element,\n        duration: row.duration,\n        metadata: row.metadata,\n        timestamp: row.timestamp\n      }));\n    } catch (error) {\n      console.error(\"Error getting user analytics:\", error);\n      return [];\n    }\n  }\n\n  async getUserSessions(userId: string): Promise<any[]> {\n    try {\n      await this.ensureAnalyticsTablesExist();\n      \n      const result = await db.execute(sql`\n        SELECT * FROM user_sessions \n        WHERE user_id = ${userId} \n        ORDER BY start_time DESC \n        LIMIT 50\n      `);\n      \n      return result.rows.map(row => ({\n        id: row.id,\n        userId: row.user_id,\n        sessionId: row.session_id,\n        startTime: row.start_time,\n        endTime: row.end_time,\n        totalDuration: row.total_duration,\n        pagesVisited: row.pages_visited,\n        actionsCount: row.actions_count,\n        userAgent: row.user_agent,\n        ipAddress: row.ip_address\n      }));\n    } catch (error) {\n      console.error(\"Error getting user sessions:\", error);\n      return [];\n    }\n  }\n\n  async logAccessEvent(eventData: {\n    userId?: string;\n    email?: string;\n    action: string;\n    ipAddress?: string;\n    userAgent?: string;\n    success: boolean;\n    errorMessage?: string;\n    sessionId?: string;\n  }): Promise<void> {\n    try {\n      await this.ensureAnalyticsTablesExist();\n      \n      await db.execute(sql`\n        INSERT INTO access_logs (id, user_id, email, action, ip_address, user_agent, success, error_message, session_id)\n        VALUES (${randomUUID()}, ${eventData.userId || null}, ${eventData.email || null}, ${eventData.action}, ${eventData.ipAddress || null}, ${eventData.userAgent || null}, ${eventData.success}, ${eventData.errorMessage || null}, ${eventData.sessionId || null})\n      `);\n      \n      console.log(\"🔐 Access event logged:\", eventData.action);\n    } catch (error) {\n      console.error(\"Error logging access event:\", error);\n    }\n  }\n\n  async getAccessLogs(userId: string): Promise<any[]> {\n    try {\n      await this.ensureAnalyticsTablesExist();\n      \n      const result = await db.execute(sql`\n        SELECT * FROM access_logs \n        WHERE user_id = ${userId} \n        ORDER BY created_at DESC \n        LIMIT 100\n      `);\n      \n      return result.rows.map(row => ({\n        id: row.id,\n        userId: row.user_id,\n        email: row.email,\n        action: row.action,\n        ipAddress: row.ip_address,\n        userAgent: row.user_agent,\n        success: row.success,\n        errorMessage: row.error_message,\n        sessionId: row.session_id,\n        createdAt: row.created_at\n      }));\n    } catch (error) {\n      console.error(\"Error getting access logs:\", error);\n      return [];\n    }\n  }\n\n  // Sistema de auditoria completa - métodos principais\n  async createAuditLog(auditData: InsertAuditLog): Promise<AuditLog> {\n    await this.ensureAnalyticsTablesExist();\n    \n    console.log(`📝 Creating audit log:`, { \n      action: auditData.action, \n      tableName: auditData.tableName, \n      recordId: auditData.recordId \n    });\n    \n    const auditId = randomUUID();\n    await db.execute(sql`\n      INSERT INTO audit_logs (id, user_id, session_id, table_name, record_id, action, old_values, new_values, changed_fields, ip_address, user_agent)\n      VALUES (${auditId}, ${auditData.userId}, ${auditData.sessionId || null}, ${auditData.tableName}, ${auditData.recordId}, ${auditData.action}, ${JSON.stringify(auditData.oldValues || {})}, ${JSON.stringify(auditData.newValues || {})}, ${JSON.stringify(auditData.changedFields || [])}, ${auditData.ipAddress || null}, ${auditData.userAgent || null})\n    `);\n    \n    return { ...auditData, id: auditId, timestamp: new Date() } as AuditLog;\n  }\n\n  async getAuditLogs(userId?: string, tableName?: string, recordId?: string, limit = 100): Promise<AuditLog[]> {\n    await this.ensureAnalyticsTablesExist();\n    \n    let whereClause = '';\n    const conditions = [];\n    \n    if (userId) conditions.push(`user_id = '${userId}'`);\n    if (tableName) conditions.push(`table_name = '${tableName}'`);\n    if (recordId) conditions.push(`record_id = '${recordId}'`);\n    \n    if (conditions.length > 0) {\n      whereClause = `WHERE ${conditions.join(' AND ')}`;\n    }\n    \n    const result = await db.execute(sql.raw(`\n      SELECT * FROM audit_logs \n      ${whereClause}\n      ORDER BY timestamp DESC \n      LIMIT ${limit}\n    `));\n    \n    return result.rows.map(row => ({\n      id: row.id,\n      userId: row.user_id,\n      sessionId: row.session_id,\n      tableName: row.table_name,\n      recordId: row.record_id,\n      action: row.action,\n      oldValues: row.old_values,\n      newValues: row.new_values,\n      changedFields: row.changed_fields,\n      ipAddress: row.ip_address,\n      userAgent: row.user_agent,\n      timestamp: row.timestamp\n    })) as AuditLog[];\n  }\n\n  // Método auxiliar para automatizar auditoria\n  async auditDataChange(\n    userId: string, \n    sessionId: string, \n    tableName: string, \n    recordId: string, \n    action: 'create' | 'update' | 'delete',\n    oldValues?: Record<string, any>,\n    newValues?: Record<string, any>,\n    request?: any\n  ) {\n    try {\n      const changedFields = [];\n      \n      if (action === 'update' && oldValues && newValues) {\n        for (const key in newValues) {\n          if (JSON.stringify(oldValues[key]) !== JSON.stringify(newValues[key])) {\n            changedFields.push(key);\n          }\n        }\n      }\n\n      await this.createAuditLog({\n        userId,\n        sessionId,\n        tableName,\n        recordId,\n        action,\n        oldValues: oldValues || null,\n        newValues: newValues || null,\n        changedFields,\n        ipAddress: request?.ip || request?.connection?.remoteAddress,\n        userAgent: request?.get?.('User-Agent'),\n      });\n\n      console.log(`🔍 Audit logged: ${action} on ${tableName} record ${recordId} by user ${userId}`);\n    } catch (error) {\n      console.error('Error creating audit log:', error);\n    }\n  }\n\n  // Medical Articles methods\n  async getMedicalArticlesByWeek(week: number): Promise<MedicalArticle[]> {\n    return await db.select().from(medicalArticles)\n      .where(and(\n        eq(medicalArticles.week, week),\n        eq(medicalArticles.isActive, true)\n      ))\n      .orderBy(medicalArticles.importance, medicalArticles.createdAt);\n  }\n\n  async getMedicalArticle(id: string): Promise<MedicalArticle | undefined> {\n    const result = await db.select().from(medicalArticles)\n      .where(eq(medicalArticles.id, id))\n      .limit(1);\n    return result[0];\n  }\n\n  async createMedicalArticle(article: InsertMedicalArticle): Promise<MedicalArticle> {\n    const result = await db.insert(medicalArticles)\n      .values(article)\n      .returning();\n    return result[0];\n  }\n\n  async getAllMedicalArticles(): Promise<MedicalArticle[]> {\n    return await db.select().from(medicalArticles).where(eq(medicalArticles.isActive, true));\n  }\n\n  // Garantir que a tabela de artigos médicos existe\n  async ensureMedicalArticlesTableExists() {\n    try {\n      console.log(\"🏥 Creating medical articles table...\");\n      \n      await client.sql`\n        CREATE TABLE IF NOT EXISTS medical_articles (\n          id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n          week INTEGER NOT NULL,\n          title TEXT NOT NULL,\n          summary TEXT NOT NULL,\n          content TEXT NOT NULL,\n          source TEXT NOT NULL,\n          source_url TEXT,\n          category TEXT NOT NULL,\n          importance TEXT NOT NULL DEFAULT 'medium',\n          reading_time INTEGER DEFAULT 5,\n          tags JSONB DEFAULT '[]'::jsonb,\n          is_active BOOLEAN DEFAULT true,\n          created_at TIMESTAMP DEFAULT NOW(),\n          updated_at TIMESTAMP DEFAULT NOW()\n        );\n      `;\n      \n      console.log(\"✅ Medical articles table created/verified\");\n      return true;\n    } catch (error) {\n      console.log(\"⚠️ Medical articles table error:\", error);\n      return false;\n    }\n  }\n}\n\nexport const storage = new DatabaseStorage();\nexport { db };\n","size_bytes":52466},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, decimal, boolean, jsonb, numeric, serial } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  name: text(\"name\").notNull(),\n  profilePhotoUrl: text(\"profile_photo_url\"), // URL da foto de perfil no object storage\n  birthDate: timestamp(\"birth_date\"), // Data de nascimento (coletada no setup)\n  // createdAt: timestamp(\"created_at\").defaultNow(), // Will add back after migration\n});\n\n// Tabela de logs de acesso para auditoria completa\nexport const accessLogs = pgTable(\"access_logs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  email: text(\"email\"),\n  action: text(\"action\").notNull(), // 'login', 'logout', 'register', 'password_reset'\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  success: boolean(\"success\").default(true),\n  errorMessage: text(\"error_message\"),\n  sessionId: text(\"session_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Tabela de analytics e comportamento do usuário\nexport const userAnalytics = pgTable(\"user_analytics\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  sessionId: text(\"session_id\").notNull(),\n  action: text(\"action\").notNull(), // 'page_view', 'click', 'scroll', 'focus', 'blur'\n  page: text(\"page\").notNull(), // '/dashboard', '/kick-counter', etc.\n  element: text(\"element\"), // button id, link, etc.\n  duration: integer(\"duration\"), // tempo em milissegundos para page_view\n  metadata: jsonb(\"metadata\").$type<Record<string, any>>(), // dados adicionais específicos da ação\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n});\n\n// Tabela para sessões de usuário com tempo total\nexport const userSessions = pgTable(\"user_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  sessionId: text(\"session_id\").notNull().unique(),\n  startTime: timestamp(\"start_time\").defaultNow(),\n  endTime: timestamp(\"end_time\"),\n  totalDuration: integer(\"total_duration\"), // em segundos\n  pagesVisited: jsonb(\"pages_visited\").$type<string[]>().default([]),\n  actionsCount: integer(\"actions_count\").default(0),\n  userAgent: text(\"user_agent\"),\n  ipAddress: text(\"ip_address\"),\n});\n\nexport const pregnancies = pgTable(\"pregnancies\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  dueDate: timestamp(\"due_date\").notNull(),\n  lastMenstrualPeriod: timestamp(\"last_menstrual_period\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const kickCounts = pgTable(\"kick_counts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  pregnancyId: varchar(\"pregnancy_id\").references(() => pregnancies.id).notNull(),\n  date: timestamp(\"date\").notNull(),\n  count: integer(\"count\").notNull(),\n  times: jsonb(\"times\").$type<string[]>().default([]),\n});\n\nexport const weightRecords = pgTable(\"weight_records\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  pregnancyId: varchar(\"pregnancy_id\").references(() => pregnancies.id).notNull(),\n  weight: decimal(\"weight\", { precision: 5, scale: 2 }).notNull(),\n  date: timestamp(\"date\").notNull(),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const weightEntries = pgTable(\"weight_entries\", {\n  id: serial(\"id\").primaryKey(),\n  pregnancyId: varchar(\"pregnancy_id\").references(() => pregnancies.id).notNull(),\n  weight: decimal(\"weight\", { precision: 5, scale: 2 }).notNull(),\n  date: timestamp(\"date\").notNull(),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const birthPlans = pgTable(\"birth_plans\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  pregnancyId: varchar(\"pregnancy_id\").references(() => pregnancies.id).notNull(),\n  location: text(\"location\"),\n  painRelief: jsonb(\"pain_relief\").$type<{natural: boolean, epidural: boolean, other?: string}>(),\n  companions: text(\"companions\"),\n  specialRequests: text(\"special_requests\"),\n  preferences: jsonb(\"preferences\").$type<Record<string, any>>(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const consultations = pgTable(\"consultations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  pregnancyId: varchar(\"pregnancy_id\").references(() => pregnancies.id).notNull(),\n  title: text(\"title\").notNull(),\n  date: timestamp(\"date\").notNull(),\n  location: text(\"location\"),\n  doctorName: text(\"doctor_name\"),\n  notes: text(\"notes\"),\n  completed: boolean(\"completed\").default(false),\n});\n\nexport const shoppingItems = pgTable(\"shopping_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  pregnancyId: varchar(\"pregnancy_id\").references(() => pregnancies.id).notNull(),\n  name: text(\"name\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }),\n  purchased: boolean(\"purchased\").default(false),\n  category: text(\"category\"),\n  priority: text(\"priority\"),\n  purchaseDate: timestamp(\"purchase_date\"),\n});\n\nexport const photos = pgTable(\"photos\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  pregnancyId: varchar(\"pregnancy_id\").references(() => pregnancies.id).notNull(),\n  objectPath: text(\"object_path\").notNull(),\n  week: integer(\"week\"),\n  caption: text(\"caption\"),\n  date: timestamp(\"date\").notNull(),\n});\n\nexport const diaryEntries = pgTable(\"diary_entries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  pregnancyId: varchar(\"pregnancy_id\").references(() => pregnancies.id).notNull(),\n  title: text(\"title\"),\n  content: text(\"content\").notNull(),\n  week: integer(\"week\"),\n  mood: text(\"mood\"),\n  date: timestamp(\"date\").notNull(),\n});\n\nexport const symptoms = pgTable(\"symptoms\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  pregnancyId: varchar(\"pregnancy_id\").references(() => pregnancies.id).notNull(),\n  name: text(\"name\").notNull(),\n  severity: integer(\"severity\"), // 1-5 scale\n  date: timestamp(\"date\").notNull(),\n  notes: text(\"notes\"),\n});\n\nexport const medications = pgTable(\"medications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  pregnancyId: varchar(\"pregnancy_id\").references(() => pregnancies.id).notNull(),\n  name: text(\"name\").notNull(),\n  dosage: text(\"dosage\"),\n  frequency: text(\"frequency\"),\n  prescribedBy: text(\"prescribed_by\"),\n  startDate: timestamp(\"start_date\"),\n  endDate: timestamp(\"end_date\"),\n  notes: text(\"notes\"),\n  isActive: boolean(\"is_active\").default(true),\n});\n\nexport const communityPosts = pgTable(\"community_posts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  title: text(\"title\"),\n  content: text(\"content\").notNull(),\n  week: integer(\"week\"),\n  likes: integer(\"likes\").default(0),\n  commentsCount: integer(\"comments_count\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const communityComments = pgTable(\"community_comments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  postId: varchar(\"post_id\").references(() => communityPosts.id).notNull(),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  content: text(\"content\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const communityLikes = pgTable(\"community_likes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  postId: varchar(\"post_id\").references(() => communityPosts.id).notNull(),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const babyDevelopment = pgTable(\"baby_development\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  week: integer(\"week\").notNull().unique(),\n  size: text(\"size\").notNull(),\n  weight: text(\"weight\").notNull(),\n  fruit_comparison: text(\"fruit_comparison\").notNull(),\n  fruit_image_url: text(\"fruit_image_url\"), // Campo para URL da imagem da fruta/grão\n  baby_image_url: text(\"baby_image_url\"), // Campo para URL da imagem do bebê\n  development_milestones_baby: text(\"development_milestones_baby\").notNull(),\n  development_milestones_mom: text(\"development_milestones_mom\").notNull(),\n  baby_description: text(\"baby_description\"),\n  mom_description: text(\"mom_description\"),\n  length_cm: numeric(\"length_cm\").default(sql`0`),\n  weight_grams: numeric(\"weight_grams\").default(sql`0`),\n});\n\n// Tabela de auditoria completa - registra todas as modificações de dados\nexport const auditLogs = pgTable(\"audit_logs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  sessionId: text(\"session_id\"),\n  tableName: text(\"table_name\").notNull(), // birth_plans, kick_counts, weight_entries, etc\n  recordId: text(\"record_id\").notNull(), // ID do registro modificado\n  action: text(\"action\").notNull(), // 'create', 'update', 'delete'\n  oldValues: jsonb(\"old_values\").$type<Record<string, any>>(), // dados antes da modificação\n  newValues: jsonb(\"new_values\").$type<Record<string, any>>(), // dados depois da modificação\n  changedFields: jsonb(\"changed_fields\").$type<string[]>(), // campos que mudaram\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({ id: true }).extend({\n  birthDate: z.string().optional().transform((val) => val ? new Date(val) : undefined),\n});\nexport const insertPregnancySchema = createInsertSchema(pregnancies).omit({ id: true, createdAt: true });\nexport const insertKickCountSchema = createInsertSchema(kickCounts).omit({ id: true });\nexport const insertWeightRecordSchema = createInsertSchema(weightRecords).omit({ id: true });\nexport const insertWeightEntrySchema = createInsertSchema(weightEntries).omit({ id: true, createdAt: true });\nexport const insertBirthPlanSchema = createInsertSchema(birthPlans).omit({ id: true, updatedAt: true });\nexport const insertConsultationSchema = createInsertSchema(consultations).omit({ id: true }).extend({\n  date: z.string().transform((val) => new Date(val)),\n});\nexport const insertShoppingItemSchema = createInsertSchema(shoppingItems).omit({ id: true, purchaseDate: true });\nexport const insertPhotoSchema = createInsertSchema(photos).omit({ id: true });\nexport const insertDiaryEntrySchema = createInsertSchema(diaryEntries).omit({ id: true });\nexport const insertSymptomSchema = createInsertSchema(symptoms).omit({ id: true });\nexport const insertMedicationSchema = createInsertSchema(medications).omit({ id: true });\nexport const insertCommunityPostSchema = createInsertSchema(communityPosts).omit({ id: true, likes: true, commentsCount: true, createdAt: true });\nexport const insertCommunityCommentSchema = createInsertSchema(communityComments).omit({ id: true, createdAt: true });\nexport const insertAccessLogSchema = createInsertSchema(accessLogs).omit({ id: true, createdAt: true });\nexport const insertUserAnalyticsSchema = createInsertSchema(userAnalytics).omit({ id: true, timestamp: true });\nexport const insertUserSessionSchema = createInsertSchema(userSessions).omit({ id: true, startTime: true, endTime: true });\nexport const insertBabyDevelopmentSchema = createInsertSchema(babyDevelopment).omit({ id: true });\nexport const insertAuditLogSchema = createInsertSchema(auditLogs).omit({ id: true, timestamp: true });\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Pregnancy = typeof pregnancies.$inferSelect;\nexport type InsertPregnancy = z.infer<typeof insertPregnancySchema>;\nexport type KickCount = typeof kickCounts.$inferSelect;\nexport type InsertKickCount = z.infer<typeof insertKickCountSchema>;\nexport type WeightRecord = typeof weightRecords.$inferSelect;\nexport type InsertWeightRecord = z.infer<typeof insertWeightRecordSchema>;\nexport type WeightEntry = typeof weightEntries.$inferSelect;\nexport type InsertWeightEntry = z.infer<typeof insertWeightEntrySchema>;\nexport type BirthPlan = typeof birthPlans.$inferSelect;\nexport type InsertBirthPlan = z.infer<typeof insertBirthPlanSchema>;\nexport type Consultation = typeof consultations.$inferSelect;\nexport type InsertConsultation = z.infer<typeof insertConsultationSchema>;\nexport type ShoppingItem = typeof shoppingItems.$inferSelect;\nexport type InsertShoppingItem = z.infer<typeof insertShoppingItemSchema>;\nexport type Photo = typeof photos.$inferSelect;\nexport type InsertPhoto = z.infer<typeof insertPhotoSchema>;\nexport type DiaryEntry = typeof diaryEntries.$inferSelect;\nexport type InsertDiaryEntry = z.infer<typeof insertDiaryEntrySchema>;\nexport type Symptom = typeof symptoms.$inferSelect;\nexport type InsertSymptom = z.infer<typeof insertSymptomSchema>;\nexport type Medication = typeof medications.$inferSelect;\nexport type InsertMedication = z.infer<typeof insertMedicationSchema>;\nexport type CommunityPost = typeof communityPosts.$inferSelect;\nexport type InsertCommunityPost = z.infer<typeof insertCommunityPostSchema>;\nexport type CommunityComment = typeof communityComments.$inferSelect;\nexport type InsertCommunityComment = z.infer<typeof insertCommunityCommentSchema>;\nexport type AccessLog = typeof accessLogs.$inferSelect;\nexport type InsertAccessLog = z.infer<typeof insertAccessLogSchema>;\nexport type UserAnalytics = typeof userAnalytics.$inferSelect;\nexport type InsertUserAnalytics = z.infer<typeof insertUserAnalyticsSchema>;\nexport type UserSession = typeof userSessions.$inferSelect;\nexport type InsertUserSession = z.infer<typeof insertUserSessionSchema>;\nexport type BabyDevelopment = typeof babyDevelopment.$inferSelect;\nexport type InsertBabyDevelopment = z.infer<typeof insertBabyDevelopmentSchema>;\nexport type AuditLog = typeof auditLogs.$inferSelect;\nexport type InsertAuditLog = z.infer<typeof insertAuditLogSchema>;\n\n// Tabela para artigos médicos por semana\nexport const medicalArticles = pgTable(\"medical_articles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  week: integer(\"week\").notNull(),\n  title: text(\"title\").notNull(),\n  summary: text(\"summary\").notNull(),\n  content: text(\"content\").notNull(),\n  source: text(\"source\").notNull(), // Nome do hospital/fonte\n  sourceUrl: text(\"source_url\"), // Link opcional para o artigo original\n  category: text(\"category\").notNull(), // 'nutrition', 'exercise', 'health', 'preparation', 'symptoms'\n  importance: text(\"importance\").notNull().default('medium'), // 'low', 'medium', 'high'\n  readingTime: integer(\"reading_time\").default(5), // tempo estimado de leitura em minutos\n  tags: jsonb(\"tags\").$type<string[]>().default([]),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertMedicalArticleSchema = createInsertSchema(medicalArticles);\nexport type MedicalArticle = typeof medicalArticles.$inferSelect;\nexport type InsertMedicalArticle = z.infer<typeof insertMedicalArticleSchema>;\n\n// Tabela para artigos e vídeos por semana (conforme solicitado pelo usuário)\nexport const articles = pgTable(\"articles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  week: integer(\"week\").notNull(),\n  video_url: text(\"video_url\"), // URL do vídeo para embed\n  image: text(\"image\"), // URL da imagem do artigo\n  source: text(\"source\"), // Fonte do conteúdo\n  type: text(\"type\").notNull().default('article'), // 'article' ou 'video'\n  description: text(\"description\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertArticleSchema = createInsertSchema(articles);\nexport type Article = typeof articles.$inferSelect;\nexport type InsertArticle = z.infer<typeof insertArticleSchema>;\n","size_bytes":16595},"client/public/sw.js":{"content":"// Service Worker para PWA\nconst CACHE_NAME = 'maternidade-app-v1';\nconst urlsToCache = [\n  '/',\n  '/static/js/bundle.js',\n  '/static/css/main.css',\n  '/manifest.json',\n  // Adicionar mais recursos conforme necessário\n];\n\n// Instalação do Service Worker\nself.addEventListener('install', (event) => {\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then((cache) => {\n        console.log('Cache aberto');\n        return cache.addAll(urlsToCache);\n      })\n  );\n});\n\n// Interceptação de requests\nself.addEventListener('fetch', (event) => {\n  event.respondWith(\n    caches.match(event.request)\n      .then((response) => {\n        // Cache hit - retorna response\n        if (response) {\n          return response;\n        }\n        return fetch(event.request);\n      })\n  );\n});\n\n// Atualização do Service Worker\nself.addEventListener('activate', (event) => {\n  event.waitUntil(\n    caches.keys().then((cacheNames) => {\n      return Promise.all(\n        cacheNames.map((cacheName) => {\n          if (cacheName !== CACHE_NAME) {\n            console.log('Removendo cache antigo:', cacheName);\n            return caches.delete(cacheName);\n          }\n        })\n      );\n    })\n  );\n});\n\n// Sincronização em segundo plano\nself.addEventListener('sync', (event) => {\n  if (event.tag === 'background-sync') {\n    console.log('Sincronização em segundo plano');\n    event.waitUntil(doBackgroundSync());\n  }\n});\n\nfunction doBackgroundSync() {\n  // Implementar sincronização de dados offline\n  return Promise.resolve();\n}\n\n// Push notifications\nself.addEventListener('push', (event) => {\n  const options = {\n    body: event.data ? event.data.text() : 'Nova notificação da Maternidade',\n    icon: '/icons/icon-192x192.png',\n    badge: '/icons/badge-72x72.png',\n    vibrate: [100, 50, 100],\n    data: {\n      dateOfArrival: Date.now(),\n      primaryKey: 1\n    },\n    actions: [\n      {\n        action: 'explore',\n        title: 'Ver detalhes',\n        icon: '/icons/checkmark.png'\n      },\n      {\n        action: 'close',\n        title: 'Fechar',\n        icon: '/icons/xmark.png'\n      }\n    ]\n  };\n\n  event.waitUntil(\n    self.registration.showNotification('Maternidade App', options)\n  );\n});","size_bytes":2199},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { Suspense, Component } from \"react\";\nimport { LoadingSpinner } from \"@/components/ui/loading-spinner\";\n// Auth provider removido - usando auth manager\nimport { Layout } from \"@/components/Layout\";\n\n// Import das páginas essenciais\nimport Login from \"@/pages/login\";\nimport Dashboard from \"@/pages/dashboard\";\nimport PregnancySetup from \"@/pages/pregnancy-setup\";\nimport Setup from \"@/pages/setup\";\nimport ResetPassword from \"@/pages/reset-password\";\nimport Profile from \"@/pages/profile\";\n\n// Import das páginas principais\nimport KickCounter from \"@/pages/kick-counter\";\nimport WeightTracking from \"@/pages/weight-tracking\";\nimport Consultations from \"@/pages/consultations\";\nimport ShoppingList from \"@/pages/shopping-list\";\nimport PhotoAlbum from \"@/pages/photo-album\";\nimport Diary from \"@/pages/diary\";\nimport BirthPlan from \"@/pages/birth-plan\";\nimport Exercises from \"@/pages/exercises\";\nimport Recipes from \"@/pages/recipes\";\n\n// Import dos componentes que vou criar\nimport BabyDevelopment from \"@/pages/baby-development\";\nimport AuditLogs from \"@/pages/audit-logs\";\nimport { Progress } from \"@/pages/progress\";\nimport Symptoms from \"@/pages/symptoms\";\nimport Medications from \"@/pages/medications\";\nimport Community from \"@/pages/community\";\nimport Analytics from \"@/pages/analytics\";\nimport MedicalArticles from \"@/pages/medical-articles\";\n// import { MobileMenu } from \"@/components/Navigation\"; // Removido - não usar menu lateral\nimport NotFound from \"@/pages/not-found\";\nimport { PWAInstallPrompt } from \"@/components/PWAInstallPrompt\";\nimport { useUserTracking } from \"@/hooks/useUserTracking\";\n\nfunction Router() {\n  // Inicializar tracking automático\n  const { trackPageVisit, trackAction } = useUserTracking({\n    trackPageViews: true,\n    trackClicks: true,\n    trackTime: true\n  });\n\n  return (\n    <Layout>\n      <Switch>\n        {/* Páginas sem layout */}\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/reset-password\" component={ResetPassword} />\n        <Route path=\"/forgot-password\" component={ResetPassword} />\n        <Route path=\"/pregnancy-setup\" component={PregnancySetup} />\n        <Route path=\"/setup\" component={Setup} />\n        \n        {/* Páginas principais com layout */}\n        <Route path=\"/\" component={Dashboard} />\n        <Route path=\"/baby-development\" component={BabyDevelopment} />\n        <Route path=\"/kick-counter\" component={KickCounter} />\n        <Route path=\"/weight-tracking\" component={WeightTracking} />\n        <Route path=\"/progress\" component={Progress} />\n        <Route path=\"/consultations\" component={Consultations} />\n        <Route path=\"/shopping-list\" component={ShoppingList} />\n        <Route path=\"/photo-album\" component={PhotoAlbum} />\n        <Route path=\"/diary\" component={Diary} />\n        <Route path=\"/birth-plan\" component={BirthPlan} />\n        <Route path=\"/exercises\" component={Exercises} />\n        <Route path=\"/recipes\" component={Recipes} />\n        <Route path=\"/symptoms\" component={Symptoms} />\n        <Route path=\"/medications\" component={Medications} />\n        <Route path=\"/community\" component={Community} />\n        <Route path=\"/analytics\" component={Analytics} />\n        <Route path=\"/audit-logs\" component={AuditLogs} />\n        <Route path=\"/medical-articles\" component={MedicalArticles} />\n        <Route path=\"/profile\" component={Profile} />\n        {/* <Route path=\"/menu\" component={MobileMenu} /> */}\n        \n        {/* 404 */}\n        <Route component={NotFound} />\n      </Switch>\n    </Layout>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Suspense fallback={\n          <div className=\"min-h-screen flex items-center justify-center\">\n            <LoadingSpinner size=\"lg\" />\n          </div>\n        }>\n          <Toaster />\n          <PWAInstallPrompt />\n          <div className=\"App\">\n            <Router />\n          </div>\n        </Suspense>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":4312},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Orbitron:wght@400;500;600;700;800;900&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Custom Color Variables */\n:root {\n  /* Maternal Color Palette */\n  --baby-pink: hsl(340, 72%, 82%);\n  --peach: hsl(16, 92%, 78%);\n  --baby-blue: hsl(199, 85%, 82%);\n  --lavender: hsl(268, 51%, 86%);\n  --sage: hsl(145, 32%, 84%);\n  --cream: hsl(40, 100%, 97%);\n  --sand: hsl(36, 45%, 92%);\n  --ink: hsl(225, 15%, 20%);\n  --berry: hsl(336, 67%, 54%);\n  --ocean: hsl(199, 89%, 48%);\n  \n  /* Maternal Gradients */\n  --gradient-dawn-rose: linear-gradient(135deg, hsl(340,72%,92%), hsl(16,92%,90%));\n  --gradient-peach-sky: linear-gradient(135deg, hsl(16,92%,90%), hsl(199,85%,90%));\n  --gradient-lavender-mist: linear-gradient(135deg, hsl(268,51%,92%), hsl(145,32%,90%));\n  --gradient-soft-glass: linear-gradient(135deg, rgba(255,255,255,0.8), rgba(255,255,255,0.6));\n}\n\n/* Safe area utilities */\n@layer utilities {\n  .pt-safe {\n    padding-top: max(0.5rem, env(safe-area-inset-top));\n  }\n  \n  /* Maternal Background Classes */\n  .maternal-bg {\n    background: var(--gradient-dawn-rose);\n  }\n  \n  .glass-soft {\n    background: var(--gradient-soft-glass);\n    backdrop-filter: blur(20px);\n    border: 1px solid rgba(255, 255, 255, 0.3);\n    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n  }\n  \n  .warm-glow {\n    box-shadow: 0 0 20px rgba(255, 182, 193, 0.3);\n  }\n  \n  .soft-text {\n    color: var(--ink);\n  }\n}\n\n/* Global Body Styling */\nbody {\n  font-family: 'Inter', sans-serif;\n  background: var(--cream);\n  color: var(--ink);\n  overflow-x: hidden;\n}\n\n.maternal-font {\n  font-family: 'Inter', sans-serif;\n  font-weight: 500;\n}\n\n/* PWA specific styles */\n@media (display-mode: standalone) {\n  body {\n    -webkit-user-select: none;\n    -webkit-touch-callout: none;\n    -webkit-tap-highlight-color: transparent;\n    padding-top: env(safe-area-inset-top);\n    padding-bottom: env(safe-area-inset-bottom);\n    padding-left: env(safe-area-inset-left);\n    padding-right: env(safe-area-inset-right);\n  }\n  \n  /* Hide scrollbars in standalone mode */\n  ::-webkit-scrollbar {\n    width: 0;\n    background: transparent;\n  }\n}\n\n/* Gentle Maternal Animation Keyframes */\n@keyframes breathe {\n  0%, 100% { transform: scale(1); }\n  50% { transform: scale(1.02); }\n}\n\n@keyframes float-slow {\n  0%, 100% { transform: translateY(0px); }\n  50% { transform: translateY(-6px); }\n}\n\n@keyframes shimmer-soft {\n  0% { background-position: -1000px 0; }\n  100% { background-position: 1000px 0; }\n}\n\n@keyframes heartbeat-line {\n  0%, 100% { stroke-dashoffset: 0; }\n  50% { stroke-dashoffset: 10; }\n}\n\n@keyframes gentle-gradient {\n  0% { background-position: 0% 50%; }\n  50% { background-position: 100% 50%; }\n  100% { background-position: 0% 50%; }\n}\n\n/* Animações personalizadas para o login */\n@keyframes float-1 {\n  0%, 100% { transform: translateY(0px) rotate(0deg); }\n  50% { transform: translateY(-20px) rotate(180deg); }\n}\n\n@keyframes float-2 {\n  0%, 100% { transform: translateY(0px) rotate(0deg); }\n  50% { transform: translateY(-15px) rotate(-180deg); }\n}\n\n@keyframes float-3 {\n  0%, 100% { transform: translateY(0px) rotate(0deg); }\n  50% { transform: translateY(-25px) rotate(360deg); }\n}\n\n@keyframes float-4 {\n  0%, 100% { transform: translateY(0px) rotate(0deg); }\n  50% { transform: translateY(-18px) rotate(-360deg); }\n}\n\n@keyframes bubble-1 {\n  0% { transform: translateY(0px) scale(1); opacity: 0.7; }\n  50% { transform: translateY(-30px) scale(1.1); opacity: 1; }\n  100% { transform: translateY(0px) scale(1); opacity: 0.7; }\n}\n\n@keyframes bubble-2 {\n  0% { transform: translateY(0px) scale(1); opacity: 0.5; }\n  50% { transform: translateY(-25px) scale(1.2); opacity: 0.8; }\n  100% { transform: translateY(0px) scale(1); opacity: 0.5; }\n}\n\n@keyframes bubble-3 {\n  0% { transform: translateY(0px) scale(1); opacity: 0.6; }\n  50% { transform: translateY(-35px) scale(0.9); opacity: 0.9; }\n  100% { transform: translateY(0px) scale(1); opacity: 0.6; }\n}\n\n.animate-float-1 { animation: float-1 3s ease-in-out infinite; }\n.animate-float-2 { animation: float-2 4s ease-in-out infinite; }\n.animate-float-3 { animation: float-3 5s ease-in-out infinite; }\n.animate-float-4 { animation: float-4 3.5s ease-in-out infinite; }\n\n/* Gentle Maternal Animation Classes */\n.animate-breathe { animation: breathe 6s ease-in-out infinite; }\n.animate-float-gentle { animation: float-slow 8s ease-in-out infinite; }\n.animate-shimmer { \n  background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);\n  background-size: 1000px 100%;\n  animation: shimmer-soft 2s ease-in-out infinite;\n}\n.animate-gentle-gradient { \n  background-size: 200% 200%;\n  animation: gentle-gradient 4s ease infinite;\n}\n\n.animate-bubble-1 { animation: bubble-1 4s ease-in-out infinite; }\n.animate-bubble-2 { animation: bubble-2 5s ease-in-out infinite; }\n.animate-bubble-3 { animation: bubble-3 3s ease-in-out infinite; }\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(240, 10%, 3.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(240, 10%, 3.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(240, 10%, 3.9%);\n  --primary: hsl(336, 67%, 54%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(199, 89%, 48%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(240, 4.8%, 95.9%);\n  --muted-foreground: hsl(240, 3.8%, 46.1%);\n  --accent: hsl(240, 4.8%, 95.9%);\n  --accent-foreground: hsl(240, 5.9%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 5.9%, 90%);\n  --input: hsl(240, 5.9%, 90%);\n  --ring: hsl(240, 5.9%, 10%);\n  --radius: 1rem;\n\n  /* Custom maternity app colors */\n  --baby-pink: hsl(339, 75%, 84%);\n  --baby-pink-dark: hsl(340, 75%, 48%);\n  --baby-blue: hsl(199, 89%, 85%);\n  --baby-blue-dark: hsl(199, 89%, 48%);\n  --coral: hsl(8, 100%, 85%);\n  --cream: hsl(30, 100%, 97%);\n  --charcoal: hsl(0, 0%, 20%);\n  \n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --primary: hsl(336, 67%, 54%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(199, 89%, 48%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --ring: hsl(240, 4.9%, 83.9%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer utilities {\n  .gradient-bg {\n    background: linear-gradient(135deg, var(--cream) 0%, var(--baby-pink) 50%, var(--baby-blue) 100%);\n  }\n  \n  .glass-effect {\n    backdrop-filter: blur(10px);\n    background: rgba(255, 255, 255, 0.8);\n  }\n  \n  .progress-ring {\n    transition: stroke-dasharray 0.5s ease-in-out;\n  }\n}\n\n@layer components {\n  .animate-float {\n    animation: float 3s ease-in-out infinite;\n  }\n  \n  .animate-pulse-slow {\n    animation: pulse 3s infinite;\n  }\n  \n  .animate-bounce-slow {\n    animation: bounce 2s infinite;\n  }\n}\n\n@keyframes float {\n  0%, 100% { \n    transform: translateY(0px); \n  }\n  50% { \n    transform: translateY(-10px); \n  }\n}\n\n/* Animações para o componente Baby3D */\n@keyframes shimmer {\n  0% {\n    transform: translateX(-100%);\n  }\n  100% {\n    transform: translateX(100%);\n  }\n}\n\n@keyframes breathe {\n  0%, 100% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(1.05);\n  }\n}\n\n@keyframes glow {\n  0%, 100% {\n    box-shadow: 0 0 20px rgba(255, 255, 255, 0.3);\n  }\n  50% {\n    box-shadow: 0 0 30px rgba(255, 255, 255, 0.5);\n  }\n}\n\n.animate-shimmer {\n  animation: shimmer 3s infinite;\n}\n\n.animate-breathe {\n  animation: breathe 4s ease-in-out infinite;\n}\n\n.animate-glow {\n  animation: glow 2s ease-in-out infinite;\n}\n\n/* Utilitários para truncar texto */\n.line-clamp-2 {\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n}\n","size_bytes":8401},"client/src/main.tsx":{"content":"\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":158},"client/src/components/ErrorIllustration.tsx":{"content":"import { Heart, User, Lock } from \"lucide-react\";\n\ninterface ErrorIllustrationProps {\n  type: 'login' | 'register' | 'general';\n  title: string;\n  message: string;\n}\n\nexport function ErrorIllustration({ type, title, message }: ErrorIllustrationProps) {\n  return (\n    <div className=\"text-center py-6\">\n      {/* SVG Illustration */}\n      <div className=\"mb-6 flex justify-center\">\n        <svg width=\"200\" height=\"160\" viewBox=\"0 0 200 160\" className=\"text-pink-300\">\n          {/* Fundo com gradiente */}\n          <defs>\n            <linearGradient id=\"errorGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n              <stop offset=\"0%\" style={{stopColor: '#f8bbd9', stopOpacity: 0.3}} />\n              <stop offset=\"100%\" style={{stopColor: '#87ceeb', stopOpacity: 0.3}} />\n            </linearGradient>\n          </defs>\n          \n          {/* Fundo suave */}\n          <ellipse cx=\"100\" cy=\"140\" rx=\"80\" ry=\"15\" fill=\"url(#errorGradient)\" />\n          \n          {/* Personagem principal */}\n          <g transform=\"translate(100, 80)\">\n            {/* Corpo */}\n            <ellipse cx=\"0\" cy=\"20\" rx=\"25\" ry=\"35\" fill=\"#f8bbd9\" opacity=\"0.7\" />\n            \n            {/* Cabeça */}\n            <circle cx=\"0\" cy=\"-20\" r=\"25\" fill=\"#f8bbd9\" opacity=\"0.8\" />\n            \n            {/* Rosto triste */}\n            <circle cx=\"-8\" cy=\"-25\" r=\"2\" fill=\"#d946ef\" opacity=\"0.6\" />\n            <circle cx=\"8\" cy=\"-25\" r=\"2\" fill=\"#d946ef\" opacity=\"0.6\" />\n            <path d=\"M-8 -10 Q0 -5 8 -10\" stroke=\"#d946ef\" strokeWidth=\"2\" fill=\"none\" opacity=\"0.6\" />\n            \n            {/* Braços */}\n            <ellipse cx=\"-30\" cy=\"10\" rx=\"8\" ry=\"20\" fill=\"#f8bbd9\" opacity=\"0.7\" transform=\"rotate(-20)\" />\n            <ellipse cx=\"30\" cy=\"10\" rx=\"8\" ry=\"20\" fill=\"#f8bbd9\" opacity=\"0.7\" transform=\"rotate(20)\" />\n            \n            {/* Pernas */}\n            <ellipse cx=\"-12\" cy=\"55\" rx=\"6\" ry=\"15\" fill=\"#f8bbd9\" opacity=\"0.7\" />\n            <ellipse cx=\"12\" cy=\"55\" rx=\"6\" ry=\"15\" fill=\"#f8bbd9\" opacity=\"0.7\" />\n          </g>\n          \n          {/* Elementos decorativos baseados no tipo de erro */}\n          {type === 'login' && (\n            <>\n              {/* Cadeado quebrado */}\n              <g transform=\"translate(60, 40)\">\n                <rect x=\"0\" y=\"10\" width=\"20\" height=\"15\" rx=\"3\" fill=\"#ef4444\" opacity=\"0.6\" />\n                <path d=\"M5 10 Q5 5, 10 5 Q15 5, 15 10\" stroke=\"#ef4444\" strokeWidth=\"2\" fill=\"none\" opacity=\"0.6\" />\n                <line x1=\"12\" y1=\"8\" x2=\"20\" y2=\"0\" stroke=\"#ef4444\" strokeWidth=\"2\" opacity=\"0.6\" />\n              </g>\n              \n              {/* Interrogação */}\n              <g transform=\"translate(140, 30)\">\n                <circle cx=\"0\" cy=\"0\" r=\"12\" fill=\"#fbbf24\" opacity=\"0.6\" />\n                <text x=\"0\" y=\"6\" textAnchor=\"middle\" fontSize=\"16\" fill=\"white\" fontWeight=\"bold\">?</text>\n              </g>\n            </>\n          )}\n          \n          {type === 'register' && (\n            <>\n              {/* Envelope */}\n              <g transform=\"translate(50, 35)\">\n                <rect x=\"0\" y=\"0\" width=\"24\" height=\"16\" rx=\"2\" fill=\"#ef4444\" opacity=\"0.6\" />\n                <path d=\"M0 0 L12 8 L24 0\" stroke=\"white\" strokeWidth=\"1.5\" fill=\"none\" />\n              </g>\n              \n              {/* X mark */}\n              <g transform=\"translate(145, 35)\">\n                <circle cx=\"0\" cy=\"0\" r=\"10\" fill=\"#ef4444\" opacity=\"0.6\" />\n                <line x1=\"-5\" y1=\"-5\" x2=\"5\" y2=\"5\" stroke=\"white\" strokeWidth=\"2\" />\n                <line x1=\"5\" y1=\"-5\" x2=\"-5\" y2=\"5\" stroke=\"white\" strokeWidth=\"2\" />\n              </g>\n            </>\n          )}\n          \n          {/* Corações tristes flutuando */}\n          <g opacity=\"0.4\">\n            <path d=\"M30 20 L25 15 Q22 12, 22 10 Q22 8, 25 8 Q28 8, 28 10 Q28 8, 31 8 Q34 8, 34 10 Q34 12, 31 15 Z\" \n                  fill=\"#f8bbd9\" transform=\"rotate(15)\" />\n            <path d=\"M170 25 L165 20 Q162 17, 162 15 Q162 13, 165 13 Q168 13, 168 15 Q168 13, 171 13 Q174 13, 174 15 Q174 17, 171 20 Z\" \n                  fill=\"#87ceeb\" transform=\"rotate(-10)\" />\n          </g>\n        </svg>\n      </div>\n      \n      {/* Título e mensagem */}\n      <h3 className=\"text-xl font-semibold text-charcoal mb-2\">{title}</h3>\n      <p className=\"text-gray-600 text-sm max-w-sm mx-auto leading-relaxed\">{message}</p>\n      \n      {/* Decoração de corações */}\n      <div className=\"flex justify-center items-center mt-4 space-x-2\">\n        <Heart size={16} className=\"text-pink-300\" />\n        <div className=\"w-8 h-px bg-gradient-to-r from-pink-300 to-blue-300\"></div>\n        <Heart size={16} className=\"text-blue-300\" />\n      </div>\n    </div>\n  );\n}","size_bytes":4719},"client/src/components/InstallPWA.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Download, X, Smartphone } from \"lucide-react\";\n\ninterface BeforeInstallPromptEvent extends Event {\n  readonly platforms: string[];\n  readonly userChoice: Promise<{\n    outcome: 'accepted' | 'dismissed';\n    platform: string;\n  }>;\n  prompt(): Promise<void>;\n}\n\nexport function InstallPWA() {\n  const [deferredPrompt, setDeferredPrompt] = useState<BeforeInstallPromptEvent | null>(null);\n  const [showInstallCard, setShowInstallCard] = useState(false);\n  const [isIOS, setIsIOS] = useState(false);\n  const [isStandalone, setIsStandalone] = useState(false);\n\n  useEffect(() => {\n    const isIOSDevice = /iPad|iPhone|iPod/.test(navigator.userAgent);\n    const isInStandaloneMode = window.matchMedia('(display-mode: standalone)').matches;\n    \n    setIsIOS(isIOSDevice);\n    setIsStandalone(isInStandaloneMode);\n\n    const handleBeforeInstallPrompt = (e: Event) => {\n      e.preventDefault();\n      setDeferredPrompt(e as BeforeInstallPromptEvent);\n      \n      // Mostrar o card de instalação após alguns segundos\n      setTimeout(() => {\n        if (!isInStandaloneMode) {\n          setShowInstallCard(true);\n        }\n      }, 3000);\n    };\n\n    const handleAppInstalled = () => {\n      console.log('PWA foi instalado');\n      setShowInstallCard(false);\n      setDeferredPrompt(null);\n    };\n\n    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n    window.addEventListener('appinstalled', handleAppInstalled);\n\n    // Para iOS - mostrar instruções depois de um tempo\n    if (isIOSDevice && !isInStandaloneMode) {\n      setTimeout(() => {\n        setShowInstallCard(true);\n      }, 5000);\n    }\n\n    return () => {\n      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n      window.removeEventListener('appinstalled', handleAppInstalled);\n    };\n  }, []);\n\n  const handleInstallClick = async () => {\n    if (deferredPrompt) {\n      deferredPrompt.prompt();\n      const { outcome } = await deferredPrompt.userChoice;\n      \n      if (outcome === 'accepted') {\n        console.log('Usuario aceitou instalar a PWA');\n      } else {\n        console.log('Usuario rejeitou instalar a PWA');\n      }\n      \n      setDeferredPrompt(null);\n      setShowInstallCard(false);\n    }\n  };\n\n  const handleDismiss = () => {\n    setShowInstallCard(false);\n  };\n\n  // Não mostrar se já está instalado\n  if (isStandalone) {\n    return null;\n  }\n\n  // Não mostrar se não há prompt disponível e não é iOS\n  if (!deferredPrompt && !isIOS) {\n    return null;\n  }\n\n  // Não mostrar o card se foi dismissado\n  if (!showInstallCard) {\n    return null;\n  }\n\n  return (\n    <div className=\"fixed bottom-4 left-4 right-4 z-50 md:left-auto md:right-4 md:w-80\">\n      <Card className=\"bg-gradient-to-r from-baby-pink to-baby-blue border-0 shadow-lg\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-start justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"bg-white/20 p-2 rounded-full\">\n                <Smartphone className=\"h-5 w-5 text-white\" />\n              </div>\n              <div className=\"flex-1\">\n                <h3 className=\"text-white font-medium text-sm\">\n                  Instalar App\n                </h3>\n                <p className=\"text-white/90 text-xs\">\n                  {isIOS \n                    ? 'Toque no ícone de compartilhar e \"Adicionar à Tela Inicial\"'\n                    : 'Acesse offline e tenha uma experiência completa'\n                  }\n                </p>\n              </div>\n            </div>\n            <button\n              onClick={handleDismiss}\n              className=\"text-white/80 hover:text-white\"\n              data-testid=\"button-dismiss-install\"\n            >\n              <X size={18} />\n            </button>\n          </div>\n          \n          {!isIOS && (\n            <div className=\"mt-3 flex space-x-2\">\n              <Button\n                onClick={handleInstallClick}\n                size=\"sm\"\n                className=\"bg-white/20 hover:bg-white/30 text-white border-0 flex-1\"\n                data-testid=\"button-install-pwa\"\n              >\n                <Download size={16} className=\"mr-1\" />\n                Instalar\n              </Button>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":4495},"client/src/components/ObjectUploader.tsx":{"content":"import { useState } from \"react\";\nimport type { ReactNode } from \"react\";\nimport Uppy from \"@uppy/core\";\nimport { DashboardModal } from \"@uppy/react\";\nimport \"@uppy/core/dist/style.min.css\";\nimport \"@uppy/dashboard/dist/style.min.css\";\nimport AwsS3 from \"@uppy/aws-s3\";\nimport type { UploadResult } from \"@uppy/core\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface ObjectUploaderProps {\n  maxNumberOfFiles?: number;\n  maxFileSize?: number;\n  onGetUploadParameters: () => Promise<{\n    method: \"PUT\";\n    url: string;\n  }>;\n  onComplete?: (\n    result: UploadResult<Record<string, unknown>, Record<string, unknown>>\n  ) => void;\n  buttonClassName?: string;\n  children: ReactNode;\n}\n\n/**\n * A file upload component that renders as a button and provides a modal interface for\n * file management.\n */\nexport function ObjectUploader({\n  maxNumberOfFiles = 1,\n  maxFileSize = 10485760, // 10MB default\n  onGetUploadParameters,\n  onComplete,\n  buttonClassName,\n  children,\n}: ObjectUploaderProps) {\n  const [showModal, setShowModal] = useState(false);\n  const [uppy] = useState(() =>\n    new Uppy({\n      restrictions: {\n        maxNumberOfFiles,\n        maxFileSize,\n        allowedFileTypes: ['image/*'],\n      },\n      autoProceed: false,\n    })\n      .use(AwsS3, {\n        shouldUseMultipart: false,\n        getUploadParameters: onGetUploadParameters,\n      })\n      .on(\"complete\", (result) => {\n        onComplete?.(result);\n        setShowModal(false);\n      })\n  );\n\n  return (\n    <div>\n      <Button \n        type=\"button\"\n        onClick={() => setShowModal(true)} \n        className={buttonClassName}\n        variant=\"outline\"\n      >\n        {children}\n      </Button>\n\n      <DashboardModal\n        uppy={uppy}\n        open={showModal}\n        onRequestClose={() => setShowModal(false)}\n        proudlyDisplayPoweredByUppy={false}\n        showProgressDetails={true}\n        locale={{\n          strings: {\n            closeModal: 'Fechar',\n            addMore: 'Adicionar mais',\n            importFrom: 'Importar de',\n            dashboardWindowTitle: 'Upload de Imagem',\n            dashboardTitle: 'Selecione sua foto de perfil',\n            browseFiles: 'procure no dispositivo',\n          }\n        }}\n      />\n    </div>\n  );\n}","size_bytes":2251},"client/src/components/progress-circle.tsx":{"content":"interface ProgressCircleProps {\n  percentage: number;\n  size?: number;\n  strokeWidth?: number;\n  className?: string;\n}\n\nexport default function ProgressCircle({ \n  percentage, \n  size = 128, \n  strokeWidth = 8,\n  className \n}: ProgressCircleProps) {\n  const radius = (size - strokeWidth) / 2;\n  const circumference = 2 * Math.PI * radius;\n  const strokeDasharray = circumference;\n  const strokeDashoffset = circumference - (percentage / 100) * circumference;\n\n  return (\n    <div className={`relative ${className}`} style={{ width: size, height: size }}>\n      <svg \n        className=\"transform -rotate-90\" \n        width={size} \n        height={size}\n        viewBox={`0 0 ${size} ${size}`}\n      >\n        <defs>\n          <linearGradient id=\"progressGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n            <stop offset=\"0%\" stopColor=\"var(--baby-pink-dark)\" />\n            <stop offset=\"100%\" stopColor=\"var(--baby-blue-dark)\" />\n          </linearGradient>\n        </defs>\n        \n        {/* Background circle */}\n        <circle\n          cx={size / 2}\n          cy={size / 2}\n          r={radius}\n          fill=\"none\"\n          stroke=\"#E5E7EB\"\n          strokeWidth={strokeWidth}\n        />\n        \n        {/* Progress circle */}\n        <circle\n          cx={size / 2}\n          cy={size / 2}\n          r={radius}\n          fill=\"none\"\n          stroke=\"url(#progressGradient)\"\n          strokeWidth={strokeWidth}\n          strokeDasharray={strokeDasharray}\n          strokeDashoffset={strokeDashoffset}\n          strokeLinecap=\"round\"\n          className=\"progress-ring transition-all duration-500 ease-in-out\"\n        />\n      </svg>\n      \n      {/* Percentage text */}\n      <div className=\"absolute inset-0 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <span className=\"text-2xl font-bold text-charcoal\" data-testid=\"text-progress-percentage\">\n            {percentage}%\n          </span>\n          <div className=\"text-xs text-gray-600\">completo</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2055},"client/src/components/three-d-baby.tsx":{"content":"import { useEffect, useRef, useState } from 'react';\nimport { Baby } from 'lucide-react';\n\ninterface ThreeDBabyProps {\n  week: number;\n  size?: number;\n}\n\nexport default function ThreeDBaby({ week, size = 80 }: ThreeDBabyProps) {\n  const [isAnimating, setIsAnimating] = useState(false);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setIsAnimating(prev => !prev);\n    }, 2000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  // Calculate baby development stage based on week\n  const getStageColor = (week: number) => {\n    if (week <= 12) return \"text-baby-pink-dark\";\n    if (week <= 24) return \"text-baby-blue-dark\";\n    return \"text-coral\";\n  };\n\n  const getBabyIcon = (week: number) => {\n    return <Baby className={`${getStageColor(week)} transition-colors duration-500`} />;\n  };\n\n  return (\n    <div \n      className={`\n        w-20 h-20 bg-white bg-opacity-20 rounded-full \n        flex items-center justify-center \n        ${isAnimating ? 'animate-bounce-slow' : 'animate-pulse-slow'}\n        transition-all duration-1000\n      `}\n      style={{ width: size, height: size }}\n      data-testid=\"three-d-baby\"\n    >\n      <div className=\"text-2xl\">\n        {getBabyIcon(week)}\n      </div>\n    </div>\n  );\n}\n","size_bytes":1246},"client/src/components/weight-chart.tsx":{"content":"import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\n\ninterface WeightRecord {\n  id: string;\n  weight: string;\n  date: string;\n  notes?: string;\n}\n\ninterface WeightChartProps {\n  records: WeightRecord[];\n}\n\nexport default function WeightChart({ records }: WeightChartProps) {\n  const chartData = records\n    .slice()\n    .reverse()\n    .map((record) => ({\n      date: new Date(record.date).toLocaleDateString('pt-BR', { \n        month: 'short', \n        day: 'numeric' \n      }),\n      weight: parseFloat(record.weight),\n      fullDate: record.date,\n    }));\n\n  return (\n    <div className=\"h-48\">\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <LineChart data={chartData}>\n          <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\n          <XAxis \n            dataKey=\"date\" \n            axisLine={false}\n            tickLine={false}\n            fontSize={12}\n            stroke=\"#666\"\n          />\n          <YAxis \n            axisLine={false}\n            tickLine={false}\n            fontSize={12}\n            stroke=\"#666\"\n            domain={['dataMin - 2', 'dataMax + 2']}\n          />\n          <Tooltip \n            contentStyle={{\n              backgroundColor: 'white',\n              border: '1px solid #e0e0e0',\n              borderRadius: '8px',\n              fontSize: '12px',\n            }}\n            formatter={(value: number) => [`${value} kg`, 'Peso']}\n            labelFormatter={(label) => `Data: ${label}`}\n          />\n          <Line \n            type=\"monotone\" \n            dataKey=\"weight\" \n            stroke=\"url(#weightGradient)\" \n            strokeWidth={3}\n            dot={{ r: 4, fill: '#E91E63' }}\n            activeDot={{ r: 6, fill: '#E91E63' }}\n          />\n          <defs>\n            <linearGradient id=\"weightGradient\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"0\">\n              <stop offset=\"0%\" stopColor=\"var(--baby-pink-dark)\" />\n              <stop offset=\"100%\" stopColor=\"var(--baby-blue-dark)\" />\n            </linearGradient>\n          </defs>\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n","size_bytes":2123},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-pregnancy.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { calculatePregnancyWeek, calculateProgress } from \"@/lib/pregnancy-calculator\";\n\nexport function usePregnancy() {\n  const { data: pregnancyData, isLoading, error } = useQuery({\n    queryKey: [\"/api/pregnancies/active\"],\n    retry: false,\n    queryFn: async () => {\n      try {\n        const response = await fetch(\"/api/pregnancies/active\", {\n          credentials: \"include\",\n        });\n        if (!response.ok) {\n          // Se não autenticado ou não tem gravidez, return null\n          return null;\n        }\n        return response.json();\n      } catch (error) {\n        // Em caso de erro, return null\n        return null;\n      }\n    },\n  });\n\n  const pregnancy = pregnancyData?.pregnancy;\n\n  const weekInfo = pregnancy ? calculatePregnancyWeek(pregnancy.dueDate, pregnancy.lastMenstrualPeriod) : null;\n  const progress = weekInfo ? calculateProgress(weekInfo.week) : null;\n\n  return {\n    pregnancy,\n    weekInfo,\n    progress,\n    isLoading,\n    error,\n  };\n}\n","size_bytes":1032},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/baby-data.ts":{"content":"export interface BabyDevelopmentData {\n  week: number;\n  size: string;\n  weight: string;\n  length_cm?: number;\n  weight_grams?: number;\n  comparison: string;\n  fruit_comparison: string;\n  description: string;\n  developments: string[];\n  development_milestones_baby: string;\n  development_milestones_mom: string;\n  organs_developing: string[];\n}\n\nexport const babyDevelopmentData: BabyDevelopmentData[] = [\n  {\n    week: 1,\n    size: \"0.1mm\",\n    weight: \"< 1g\",\n    length_cm: 0,\n    weight_grams: 0,\n    comparison: \"ponto microscópico\",\n    fruit_comparison: \"🔸 Ponto microscópico\",\n    description: \"A fertilização acaba de acontecer\",\n    developments: [\"Óvulo fertilizado\", \"Início da divisão celular\"],\n    development_milestones_baby: \"Você ainda é apenas um óvulo fertilizado, iniciando uma jornada incrível. As células estão começando a se dividir rapidamente.\",\n    development_milestones_mom: \"Você pode não saber ainda que está grávida. Seu corpo já começou a produzir hormônios da gravidez.\",\n    organs_developing: [\"Células básicas\"]\n  },\n  {\n    week: 4,\n    size: \"2mm\",\n    weight: \"< 1g\",\n    length_cm: 0.2,\n    weight_grams: 0,\n    comparison: \"semente de papoula\",\n    fruit_comparison: \"🟤 Semente de papoula\",\n    description: \"Seu bebê é do tamanho de uma semente de papoula\",\n    developments: [\"Início da formação do tubo neural\", \"Desenvolvimento das células básicas\"],\n    development_milestones_baby: \"O tubo neural, que se tornará a medula espinhal e o cérebro, está se formando. O coração primitivo começa a se desenvolver.\",\n    development_milestones_mom: \"Você pode começar a sentir os primeiros sintomas da gravidez, como fadiga e mudanças no olfato.\",\n    organs_developing: [\"Tubo neural\", \"Coração primitivo\", \"Sistema nervoso básico\"]\n  },\n  {\n    week: 8,\n    size: \"1.6cm\",\n    weight: \"1g\",\n    length_cm: 1.6,\n    weight_grams: 1,\n    comparison: \"framboesa\",\n    fruit_comparison: \"🫐 Framboesa\",\n    description: \"Seu bebê é do tamanho de uma framboesa\",\n    developments: [\"Formação dos braços e pernas\", \"Início do desenvolvimento facial\", \"Primeiro batimento cardíaco\"],\n    development_milestones_baby: \"Braços e pernas estão se formando, e o coração já está batendo! As características faciais básicas começam a aparecer.\",\n    development_milestones_mom: \"Náuseas matinais podem estar no auge. Você pode notar que os seios estão mais sensíveis.\",\n    organs_developing: [\"Coração\", \"Membros\", \"Face\", \"Sistema digestivo básico\"]\n  },\n  {\n    week: 12,\n    size: \"5.4cm\",\n    weight: \"14g\",\n    length_cm: 5.4,\n    weight_grams: 14,\n    comparison: \"limão\",\n    fruit_comparison: \"🍋 Limão\",\n    description: \"Seu bebê é do tamanho de um limão\",\n    developments: [\"Reflexos começam a se desenvolver\", \"Rins funcionando\", \"Ossos começam a endurecer\"],\n    development_milestones_baby: \"Todos os órgãos principais estão formados! O bebê pode fazer punho, abrir e fechar os dedos, e até mesmo sugar o polegar.\",\n    development_milestones_mom: \"O primeiro trimestre está terminando e você pode sentir mais energia. As náuseas podem diminuir.\",\n    organs_developing: [\"Rins\", \"Sistema ósseo\", \"Músculos\", \"Reflexos neurológicos\"]\n  },\n  {\n    week: 16,\n    size: \"11.6cm\",\n    weight: \"100g\",\n    length_cm: 11.6,\n    weight_grams: 100,\n    comparison: \"abacate\",\n    fruit_comparison: \"🥑 Abacate\",\n    description: \"Seu bebê é do tamanho de um abacate\",\n    developments: [\"Pode ouvir sua voz\", \"Movimentos mais coordenados\", \"Desenvolvimento das impressões digitais\"],\n    development_milestones_baby: \"Os músculos faciais estão se desenvolvendo e o bebê pode fazer expressões! O sistema nervoso está funcionando melhor.\",\n    development_milestones_mom: \"Você pode começar a sentir os primeiros movimentos sutis do bebê. Sua barriga pode começar a aparecer.\",\n    organs_developing: [\"Sistema auditivo\", \"Músculos faciais\", \"Impressões digitais\", \"Sistema muscular\"]\n  },\n  {\n    week: 20,\n    size: \"16.4cm\",\n    weight: \"300g\",\n    length_cm: 16.4,\n    weight_grams: 300,\n    comparison: \"banana\",\n    fruit_comparison: \"🍌 Banana\",\n    description: \"Seu bebê é do tamanho de uma banana\",\n    developments: [\"Você pode sentir os movimentos\", \"Cabelo e unhas crescendo\", \"Sistema nervoso se desenvolvendo\"],\n    development_milestones_baby: \"É a metade da gravidez! O bebê está muito ativo e você pode sentir chutes e socos. O cabelo e as unhas estão crescendo.\",\n    development_milestones_mom: \"Os movimentos do bebê estão mais evidentes. Você pode descobrir o sexo do bebê nesta semana!\",\n    organs_developing: [\"Cabelo\", \"Unhas\", \"Pele\", \"Sistema reprodutivo\"]\n  },\n  {\n    week: 24,\n    size: \"21cm\",\n    weight: \"600g\",\n    length_cm: 21,\n    weight_grams: 600,\n    comparison: \"espiga de milho\",\n    fruit_comparison: \"🌽 Espiga de milho\",\n    description: \"Seu bebê é do tamanho de uma espiga de milho\",\n    developments: [\"Pulmões se desenvolvendo\", \"Pode sobreviver fora do útero\", \"Audição melhorando\"],\n    development_milestones_baby: \"Os pulmões estão se desenvolvendo rapidamente. O bebê pode responder a sons e sua voz. A pele está ficando menos transparente.\",\n    development_milestones_mom: \"Você pode sentir o bebê reagir a sons altos. Sua barriga está crescendo notavelmente.\",\n    organs_developing: [\"Pulmões\", \"Sistema auditivo\", \"Cérebro\", \"Sistema imunológico\"]\n  },\n  {\n    week: 28,\n    size: \"25cm\",\n    weight: \"1kg\",\n    length_cm: 25,\n    weight_grams: 1000,\n    comparison: \"berinjela\",\n    fruit_comparison: \"🍆 Berinjela\",\n    description: \"Seu bebê é do tamanho de uma berinjela\",\n    developments: [\"Terceiro trimestre começou\", \"Olhos podem abrir\", \"Cérebro desenvolvendo rapidamente\"],\n    development_milestones_baby: \"O cérebro está crescendo rapidamente e os olhos podem abrir e fechar. O bebê pode sonhar!\",\n    development_milestones_mom: \"O terceiro trimestre começou. Você pode sentir mais desconforto conforme o bebê cresce.\",\n    organs_developing: [\"Cérebro\", \"Olhos\", \"Sistema nervoso\", \"Tecido gorduroso\"]\n  },\n  {\n    week: 32,\n    size: \"28cm\",\n    weight: \"1.5kg\",\n    length_cm: 28,\n    weight_grams: 1500,\n    comparison: \"coco\",\n    fruit_comparison: \"🥥 Coco\",\n    description: \"Seu bebê é do tamanho de um coco\",\n    developments: [\"Ossos endurecendo\", \"Unhas crescendo\", \"Ganhando peso rapidamente\"],\n    development_milestones_baby: \"Os ossos estão ficando mais duros, exceto o crânio que permanece flexível para o parto. O bebê está ganhando peso rapidamente.\",\n    development_milestones_mom: \"Você pode sentir falta de ar à medida que o bebê pressiona seus pulmões. Braxton Hicks podem começar.\",\n    organs_developing: [\"Sistema ósseo\", \"Pulmões\", \"Sistema digestivo\", \"Coordenação motora\"]\n  },\n  {\n    week: 36,\n    size: \"32cm\",\n    weight: \"2.3kg\",\n    length_cm: 32,\n    weight_grams: 2300,\n    comparison: \"papaia\",\n    fruit_comparison: \"🥭 Papaia\",\n    description: \"Seu bebê é do tamanho de uma papaia\",\n    developments: [\"Pulmões quase maduros\", \"Sistema imunológico fortalecendo\", \"Posição para o parto\"],\n    development_milestones_baby: \"Os pulmões estão quase maduros e o bebê está se posicionando de cabeça para baixo para o nascimento.\",\n    development_milestones_mom: \"Você pode sentir mais pressão na pelve conforme o bebê se prepara para nascer. Consultas médicas são mais frequentes.\",\n    organs_developing: [\"Pulmões maduros\", \"Sistema imunológico\", \"Reflexos de sucção\", \"Regulação térmica\"]\n  },\n  {\n    week: 40,\n    size: \"36cm\",\n    weight: \"3.2kg\",\n    length_cm: 36,\n    weight_grams: 3200,\n    comparison: \"melancia pequena\",\n    fruit_comparison: \"🍉 Melancia pequena\",\n    description: \"Seu bebê é do tamanho de uma melancia pequena\",\n    developments: [\"Totalmente desenvolvido\", \"Pronto para nascer\", \"Sistema respiratório maduro\"],\n    development_milestones_baby: \"Seu bebê está totalmente desenvolvido e pronto para conhecer o mundo! Todos os sistemas estão funcionando.\",\n    development_milestones_mom: \"Você chegou ao fim da gravidez! O trabalho de parto pode começar a qualquer momento. Seu corpo está se preparando para o parto.\",\n    organs_developing: [\"Todos os sistemas maduros\", \"Pronto para vida extrauterina\"]\n  }\n];\n\n// Função auxiliar para buscar dados por semana\nexport function getBabyDevelopmentData(week: number): BabyDevelopmentData | undefined {\n  return babyDevelopmentData.find(data => data.week === week);\n}\n\n// Função para interpolar dados entre semanas\nexport function getInterpolatedBabyData(week: number): BabyDevelopmentData {\n  const exactMatch = getBabyDevelopmentData(week);\n  if (exactMatch) return exactMatch;\n\n  // Encontra as semanas mais próximas para interpolar\n  const sortedData = babyDevelopmentData.sort((a, b) => a.week - b.week);\n  \n  let previousData = sortedData[0];\n  let nextData = sortedData[sortedData.length - 1];\n\n  for (let i = 0; i < sortedData.length - 1; i++) {\n    if (sortedData[i].week <= week && sortedData[i + 1].week > week) {\n      previousData = sortedData[i];\n      nextData = sortedData[i + 1];\n      break;\n    }\n  }\n\n  // Se a semana for menor que a primeira ou maior que a última, retorna a mais próxima\n  if (week <= previousData.week) return previousData;\n  if (week >= nextData.week) return nextData;\n\n  // Interpola valores numéricos\n  const ratio = (week - previousData.week) / (nextData.week - previousData.week);\n  \n  const interpolatedLength = previousData.length_cm && nextData.length_cm \n    ? Math.round(previousData.length_cm + (nextData.length_cm - previousData.length_cm) * ratio)\n    : previousData.length_cm || nextData.length_cm || 0;\n    \n  const interpolatedWeight = previousData.weight_grams && nextData.weight_grams \n    ? Math.round(previousData.weight_grams + (nextData.weight_grams - previousData.weight_grams) * ratio)\n    : previousData.weight_grams || nextData.weight_grams || 0;\n\n  return {\n    week,\n    size: interpolatedLength ? `${interpolatedLength}cm` : previousData.size,\n    weight: interpolatedWeight ? `${interpolatedWeight}g` : previousData.weight,\n    length_cm: interpolatedLength,\n    weight_grams: interpolatedWeight,\n    comparison: previousData.comparison,\n    fruit_comparison: previousData.fruit_comparison,\n    description: previousData.description,\n    developments: previousData.developments,\n    development_milestones_baby: previousData.development_milestones_baby,\n    development_milestones_mom: previousData.development_milestones_mom,\n    organs_developing: previousData.organs_developing,\n  };\n}\n\n// Função para obter a fase da gravidez\nexport function getPregnancyPhase(week: number): { phase: string; color: string; description: string } {\n  if (week <= 12) {\n    return {\n      phase: \"Primeiro Trimestre\",\n      color: \"text-pink-600\",\n      description: \"Formação dos órgãos principais\"\n    };\n  } else if (week <= 27) {\n    return {\n      phase: \"Segundo Trimestre\",\n      color: \"text-blue-600\", \n      description: \"Crescimento e desenvolvimento\"\n    };\n  } else {\n    return {\n      phase: \"Terceiro Trimestre\",\n      color: \"text-purple-600\",\n      description: \"Preparação para o nascimento\"\n    };\n  }\n}","size_bytes":11322},"client/src/lib/pdf-generator.ts":{"content":"import jsPDF from 'jspdf';\n// import logoImage from '@assets/image_1756302873641.png';\nconst logoImage = ''; // Temporariamente desabilitado\n\nexport interface BirthPlanData {\n  motherName: string;\n  partnerName?: string;\n  dueDate: string;\n  \n  // Informações básicas\n  location: string;\n  birthType: string;\n  hospital: string;\n  doctor: string;\n  doula: string;\n  \n  // Alívio da dor\n  painRelief: {\n    natural: boolean;\n    epidural: boolean;\n    nitrous: boolean;\n    massage: boolean;\n    hydrotherapy: boolean;\n    other: string;\n  };\n  \n  // Ambiente\n  environment: {\n    lighting: string;\n    music: boolean;\n    aromatherapy: boolean;\n    personalItems: string;\n    photography: boolean;\n    videography: boolean;\n  };\n  \n  // Acompanhantes\n  companions: string;\n  supportTeam: {\n    partner: boolean;\n    mother: boolean;\n    doula: boolean;\n    other: string;\n  };\n  \n  // Nascimento\n  birthPreferences: {\n    position: string;\n    skinToSkin: boolean;\n    cordClamping: string;\n    placentaDelivery: string;\n  };\n  \n  // Pós-parto\n  postBirth: {\n    breastfeeding: boolean;\n    rooming: boolean;\n    eyeOintment: boolean;\n    vitaminK: boolean;\n  };\n  \n  specialRequests: string;\n  emergencyPreferences: string;\n  preferences: Record<string, any>;\n}\n\n// Helper function to load image as base64\nconst loadImageAsBase64 = (src: string): Promise<string> => {\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    img.crossOrigin = 'anonymous';\n    img.onload = () => {\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      canvas.width = img.width;\n      canvas.height = img.height;\n      ctx?.drawImage(img, 0, 0);\n      resolve(canvas.toDataURL('image/png'));\n    };\n    img.onerror = reject;\n    img.src = src;\n  });\n};\n\nexport async function generateBirthPlanPDF(data: BirthPlanData): Promise<void> {\n  const pdf = new jsPDF();\n  let yPosition = 30;\n  \n  // Colors for modern design\n  const colors = {\n    primary: [236, 72, 153] as [number, number, number], // rose-500\n    secondary: [252, 231, 243] as [number, number, number], // rose-100\n    accent: [190, 24, 93] as [number, number, number], // rose-700\n    text: [31, 41, 55] as [number, number, number], // gray-800\n    textLight: [107, 114, 128] as [number, number, number], // gray-500\n    white: [255, 255, 255] as [number, number, number],\n    success: [34, 197, 94] as [number, number, number], // green-500\n  };\n\n  // Load and add logo\n  try {\n    const logoBase64 = await loadImageAsBase64(logoImage);\n    pdf.addImage(logoBase64, 'PNG', 15, 15, 25, 25);\n  } catch (error) {\n    console.warn('Logo não pôde ser carregada:', error);\n  }\n\n  // Modern header with gradient-like background - ROSA COMPLETO\n  pdf.setFillColor(252, 231, 243); // rose-100 - rosa suave para toda a página\n  pdf.rect(0, 0, 210, 297, 'F'); // Página inteira rosa\n  \n  // Header mais vibrante\n  pdf.setFillColor(236, 72, 153); // rose-500 - rosa vibrante no header\n  pdf.rect(0, 0, 210, 80, 'F');\n  \n  // Add decorative pattern (removed circles that were causing dots)\n  pdf.setFillColor(255, 255, 255, 0.3);\n  pdf.rect(20, 65, 160, 2, 'F');\n  \n  // Add decorative elements\n  pdf.setFillColor(...colors.primary);\n  pdf.circle(190, 20, 8, 'F');\n  pdf.setFillColor(252, 165, 165); // rose-300\n  pdf.circle(185, 35, 4, 'F');\n  pdf.circle(195, 32, 3, 'F');\n\n  // Title with modern typography - BRANCO no header rosa\n  pdf.setFontSize(32);\n  pdf.setTextColor(255, 255, 255); // Branco para contraste\n  pdf.text('Plano de Parto', 50, 35);\n  \n  // Subtitle - BRANCO\n  pdf.setFontSize(14);\n  pdf.setTextColor(255, 255, 255);\n  pdf.text('Suas preferências para o momento especial', 50, 45);\n  \n  // Mother's name with elegant styling - BRANCO e maior\n  pdf.setFontSize(24);\n  pdf.setTextColor(255, 255, 255);\n  pdf.text(data.motherName || 'Nome não informado', 50, 62);\n  \n  // Due date with icon - BRANCO\n  if (data.dueDate) {\n    pdf.setFontSize(12);\n    pdf.setTextColor(255, 255, 255);\n    pdf.text(`Data prevista: ${new Date(data.dueDate).toLocaleDateString('pt-BR')}`, 50, 73);\n  }\n  \n  yPosition = 100;\n\n  // Helper function for modern sections\n  const addModernSection = (title: string, content: string[], color: [number, number, number] = colors.primary) => {\n    if (yPosition > 250) {\n      pdf.addPage();\n      yPosition = 30;\n    }\n    \n    // Section background com tema rosa\n    pdf.setFillColor(255, 255, 255); // Fundo branco para seções\n    pdf.roundedRect(15, yPosition - 5, 180, 15 + content.length * 7, 5, 5, 'F');\n    \n    // Add colored accent bar rosa mais largo\n    pdf.setFillColor(236, 72, 153); // rose-500 \n    pdf.rect(15, yPosition - 5, 12, 15 + content.length * 7, 'F');\n    \n    // Add subtle shadow effect\n    pdf.setFillColor(0, 0, 0, 0.1);\n    pdf.rect(17, yPosition - 3, 180, 15 + content.length * 7, 'F');\n    \n    // Section title - rosa vibrante\n    pdf.setFontSize(16);\n    pdf.setTextColor(190, 24, 93); // rose-700 - rosa escuro\n    pdf.text(title, 30, yPosition + 5);\n    \n    yPosition += 15;\n    \n    // Section content with better spacing - texto rosa escuro\n    pdf.setFontSize(11);\n    pdf.setTextColor(136, 19, 55); // rose-900 - rosa muito escuro para legibilidade\n    \n    content.forEach(item => {\n      if (yPosition > 270) {\n        pdf.addPage();\n        // Manter o fundo rosa na nova página\n        pdf.setFillColor(252, 231, 243); // rose-100 - rosa suave para toda a página\n        pdf.rect(0, 0, 210, 297, 'F');\n        yPosition = 30;\n      }\n      \n      // Add bullet point rosa\n      pdf.setFillColor(236, 72, 153); // rose-500\n      pdf.circle(32, yPosition - 1, 1.5, 'F');\n      \n      // Add content com cor rosa escura\n      pdf.setTextColor(136, 19, 55); // rose-900 - rosa muito escuro para legibilidade\n      const lines = pdf.splitTextToSize(item, 160);\n      pdf.text(lines, 37, yPosition);\n      yPosition += Math.max(lines.length * 5, 6);\n    });\n    \n    yPosition += 12;\n  };\n\n  // 1. Informações Básicas\n  const basicInfo = [];\n  if (data.birthType) basicInfo.push(`Tipo de parto: ${data.birthType}`);\n  if (data.hospital) basicInfo.push(`Local: ${data.hospital}`);\n  if (data.doctor) basicInfo.push(`Médico: ${data.doctor}`);\n  if (data.doula) basicInfo.push(`Doula: ${data.doula}`);\n  \n  if (basicInfo.length > 0) {\n    addModernSection('Informacoes Basicas', basicInfo);\n  }\n\n  // 2. Métodos de Alívio da Dor\n  const painReliefMethods = [];\n  if (data.painRelief.natural) painReliefMethods.push('Métodos naturais de alívio');\n  if (data.painRelief.epidural) painReliefMethods.push('Anestesia epidural');\n  if (data.painRelief.nitrous) painReliefMethods.push('Óxido nitroso (gás do riso)');\n  if (data.painRelief.massage) painReliefMethods.push('Massagem terapêutica');\n  if (data.painRelief.hydrotherapy) painReliefMethods.push('Hidroterapia/banho relaxante');\n  if (data.painRelief.other) painReliefMethods.push(`Outros métodos: ${data.painRelief.other}`);\n  \n  if (painReliefMethods.length > 0) {\n    addModernSection('Alivio da Dor', painReliefMethods, colors.accent);\n  }\n\n  // 3. Ambiente Desejado\n  const environmentPrefs = [];\n  if (data.environment.lighting) {\n    const lightingMap: Record<string, string> = {\n      'dim': 'Iluminação baixa e ambiente',\n      'natural': 'Luz natural',\n      'bright': 'Iluminação normal'\n    };\n    environmentPrefs.push(`Iluminação: ${lightingMap[data.environment.lighting] || data.environment.lighting}`);\n  }\n  if (data.environment.music) environmentPrefs.push('Música relaxante durante o trabalho de parto');\n  if (data.environment.aromatherapy) environmentPrefs.push('Aromaterapia para relaxamento');\n  if (data.environment.photography) environmentPrefs.push('Permitir fotografias do nascimento');\n  if (data.environment.videography) environmentPrefs.push('Permitir filmagem do momento');\n  if (data.environment.personalItems) {\n    environmentPrefs.push(`Itens pessoais: ${data.environment.personalItems}`);\n  }\n  \n  if (environmentPrefs.length > 0) {\n    addModernSection('Ambiente', environmentPrefs, colors.success);\n  }\n\n  // 4. Equipe de Apoio\n  const supportTeam = [];\n  if (data.supportTeam.partner) supportTeam.push('Parceiro(a) presente durante o parto');\n  if (data.supportTeam.mother) supportTeam.push('Minha mãe como acompanhante');\n  if (data.supportTeam.doula) supportTeam.push('Doula para apoio emocional');\n  if (data.supportTeam.other) supportTeam.push(`Outros acompanhantes: ${data.supportTeam.other}`);\n  if (data.companions) supportTeam.push(`Detalhes especiais: ${data.companions}`);\n  \n  if (supportTeam.length > 0) {\n    addModernSection('Acompanhantes', supportTeam, [168, 85, 247] as [number, number, number]); // purple\n  }\n\n  // 5. Preferências do Nascimento\n  const birthPrefs = [];\n  if (data.birthPreferences.position) {\n    const positionMap: Record<string, string> = {\n      'squatting': 'Posição de cócoras',\n      'side-lying': 'Deitada de lado',\n      'standing': 'Em pé ou caminhando',\n      'back': 'Deitada de costas'\n    };\n    birthPrefs.push(`Posição preferida: ${positionMap[data.birthPreferences.position] || data.birthPreferences.position}`);\n  }\n  if (data.birthPreferences.skinToSkin) birthPrefs.push('Contato pele a pele imediato após o nascimento');\n  if (data.birthPreferences.cordClamping) {\n    const clampingMap: Record<string, string> = {\n      'delayed': 'Clampeamento tardio do cordão umbilical',\n      'immediate': 'Clampeamento imediato do cordão'\n    };\n    birthPrefs.push(clampingMap[data.birthPreferences.cordClamping] || data.birthPreferences.cordClamping);\n  }\n  if (data.birthPreferences.placentaDelivery) {\n    const placentaMap: Record<string, string> = {\n      'natural': 'Dequitação natural da placenta',\n      'managed': 'Dequitação dirigida da placenta'\n    };\n    birthPrefs.push(placentaMap[data.birthPreferences.placentaDelivery] || data.birthPreferences.placentaDelivery);\n  }\n  \n  if (birthPrefs.length > 0) {\n    addModernSection('Nascimento', birthPrefs, [59, 130, 246] as [number, number, number]); // blue\n  }\n\n  // 6. Pós-parto\n  const postBirthPrefs = [];\n  if (data.postBirth.breastfeeding) postBirthPrefs.push('Amamentação imediata após o nascimento');\n  if (data.postBirth.rooming) postBirthPrefs.push('Alojamento conjunto (bebê no quarto)');\n  if (data.postBirth.eyeOintment) postBirthPrefs.push('Aplicação de pomada nos olhos do bebê');\n  if (data.postBirth.vitaminK) postBirthPrefs.push('Administração de vitamina K no bebê');\n  \n  if (postBirthPrefs.length > 0) {\n    addModernSection('Cuidados Pos-parto', postBirthPrefs, [34, 197, 94] as [number, number, number]); // green\n  }\n\n  // 7. Pedidos Especiais\n  if (data.specialRequests) {\n    addModernSection('Pedidos Especiais', [data.specialRequests], [251, 146, 60] as [number, number, number]); // orange\n  }\n\n  // 8. Emergências\n  if (data.emergencyPreferences) {\n    addModernSection('Em Caso de Emergencia', [data.emergencyPreferences], [239, 68, 68] as [number, number, number]); // red\n  }\n\n  // Modern footer with branding\n  if (yPosition > 240) {\n    pdf.addPage();\n    yPosition = 30;\n  }\n  \n  // Footer background\n  pdf.setFillColor(...colors.secondary);\n  pdf.rect(0, 260, 210, 37, 'F');\n  \n  // Add small logo in footer\n  try {\n    const logoBase64 = await loadImageAsBase64(logoImage);\n    pdf.addImage(logoBase64, 'PNG', 20, 267, 15, 15);\n  } catch (error) {\n    // Logo fallback\n    pdf.setFillColor(...colors.primary);\n    pdf.circle(27, 274, 7, 'F');\n  }\n  \n  // Footer text\n  pdf.setFontSize(11);\n  pdf.setTextColor(...colors.text);\n  pdf.text('MamaeCare', 40, 275);\n  \n  pdf.setFontSize(9);\n  pdf.setTextColor(...colors.textLight);\n  pdf.text(`Gerado em ${new Date().toLocaleDateString('pt-BR')} as ${new Date().toLocaleTimeString('pt-BR')}`, 40, 283);\n  \n  // Beautiful message without special characters\n  pdf.setFontSize(10);\n  pdf.setTextColor(...colors.primary);\n  pdf.text('Este é o seu momento especial - você consegue!', 40, 290);\n  \n  // Download the PDF\n  const fileName = `plano-de-parto-${data.motherName.replace(/\\s+/g, '-').toLowerCase()}.pdf`;\n  pdf.save(fileName);\n}\n","size_bytes":12152},"client/src/lib/pregnancy-calculator.ts":{"content":"export function calculatePregnancyWeek(dueDate: string, lastMenstrualPeriod?: string) {\n  const now = new Date();\n  \n  // Usar UTC ao meio-dia para evitar problemas de fuso horário\n  const todayUTC = new Date(Date.UTC(now.getFullYear(), now.getMonth(), now.getDate(), 12));\n  \n  let week: number;\n  let weeksUntilDue: number;\n  \n  if (lastMenstrualPeriod) {\n    // Calcular usando DUM (Data da Última Menstruação) - método mais preciso\n    const lmp = new Date(lastMenstrualPeriod);\n    const lmpUTC = new Date(Date.UTC(lmp.getFullYear(), lmp.getMonth(), lmp.getDate(), 12));\n    \n    const daysSinceLMP = Math.floor((todayUTC.getTime() - lmpUTC.getTime()) / (24 * 60 * 60 * 1000));\n    week = Math.floor(daysSinceLMP / 7) + 1;\n    \n    // Calcular semanas restantes (280 dias = 40 semanas)\n    const totalDays = 280;\n    const daysRemaining = totalDays - daysSinceLMP;\n    weeksUntilDue = Math.max(0, Math.ceil(daysRemaining / 7));\n  } else {\n    // Calcular usando DPP (Data Prevista do Parto)\n    const due = new Date(dueDate);\n    const dueUTC = new Date(Date.UTC(due.getFullYear(), due.getMonth(), due.getDate(), 12));\n    \n    const totalWeeks = 40;\n    const msPerWeek = 7 * 24 * 60 * 60 * 1000;\n    weeksUntilDue = Math.floor((dueUTC.getTime() - todayUTC.getTime()) / msPerWeek);\n    week = totalWeeks - weeksUntilDue;\n  }\n  \n  // Garantir que a semana esteja entre 1 e 40\n  week = Math.max(1, Math.min(40, week));\n  weeksUntilDue = Math.max(0, weeksUntilDue);\n  \n  return {\n    week,\n    weeksRemaining: weeksUntilDue,\n    daysRemaining: Math.max(0, Math.ceil((new Date(dueDate).getTime() - todayUTC.getTime()) / (24 * 60 * 60 * 1000))),\n  };\n}\n\nexport function calculateProgress(currentWeek: number) {\n  const totalWeeks = 40;\n  const percentage = Math.round((currentWeek / totalWeeks) * 100);\n  \n  return {\n    percentage: Math.min(100, Math.max(0, percentage)),\n    trimester: currentWeek <= 12 ? 1 : currentWeek <= 27 ? 2 : 3,\n  };\n}\n\nexport function calculateDueDateFromLMP(lmpDate: string) {\n  const lmp = new Date(lmpDate);\n  const dueDate = new Date(lmp.getTime() + (280 * 24 * 60 * 60 * 1000)); // Add 280 days\n  return dueDate.toISOString();\n}\n","size_bytes":2168},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    let errorMessage = `${res.status}: ${res.statusText}`;\n    let fieldErrors = undefined;\n    try {\n      const text = await res.text();\n      const jsonData = JSON.parse(text);\n      errorMessage = jsonData.error || errorMessage;\n      fieldErrors = jsonData.fieldErrors;\n    } catch (parseError) {\n      // Usar statusText se não conseguir parsear JSON\n      errorMessage = `${res.status}: ${res.statusText}`;\n    }\n    const error = new Error(errorMessage) as any;\n    if (fieldErrors) {\n      error.response = { fieldErrors };\n    }\n    throw error;\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1838},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/baby-development.tsx":{"content":"import { useLocation } from \"wouter\";\nimport PregnancyTracker from \"@/components/pregnancy-tracker\";\nimport BottomNavigation from \"@/components/layout/bottom-navigation\";\n\nexport default function BabyDevelopment() {\n  const [, setLocation] = useLocation();\n\n  return (\n    <div className=\"min-h-screen\">\n      <PregnancyTracker onBack={() => setLocation(\"/\")} />\n      <BottomNavigation />\n    </div>\n  );\n}\n","size_bytes":408},"client/src/pages/birth-plan.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation, Link } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { usePregnancy } from \"@/hooks/use-pregnancy\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { LoadingSpinner } from \"@/components/ui/loading-spinner\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogFooter } from \"@/components/ui/dialog\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { generateBirthPlanPDF } from \"@/lib/pdf-generator\";\nimport { \n  ArrowLeft, \n  Download, \n  FileText, \n  Building, \n  Heart, \n  Users, \n  Music, \n  Camera,\n  Baby,\n  Sparkles,\n  Save,\n  Eye,\n  Home,\n  Shield,\n  Volume2,\n  Moon,\n  ChevronLeft,\n  ChevronRight,\n  Check,\n  Plus,\n  Edit,\n  Trash2,\n  Calendar\n} from \"lucide-react\";\nimport BottomNavigation from \"@/components/layout/bottom-navigation\";\n\ninterface BirthPlan {\n  id: string;\n  pregnancyId?: string;\n  location?: string;\n  painRelief?: string[] | any;\n  companions?: string[] | string;\n  specialRequests?: string;\n  preferences?: any;\n  createdAt?: string;\n  updatedAt?: string;\n}\n\ntype ViewMode = 'list' | 'create' | 'edit' | 'view';\n\nexport default function BirthPlan() {\n  const [viewMode, setViewMode] = useState<ViewMode>('list');\n  const [selectedPlan, setSelectedPlan] = useState<BirthPlan | null>(null);\n  const [activeStep, setActiveStep] = useState(0);\n  const [formData, setFormData] = useState({\n    // Informações Básicas\n    location: \"\",\n    birthType: \"\",\n    hospital: \"\",\n    doctor: \"\",\n    doula: \"\",\n    \n    // Alívio da Dor\n    painRelief: {\n      natural: false,\n      epidural: false,\n      nitrous: false,\n      massage: false,\n      hydrotherapy: false,\n      other: \"\",\n    },\n    \n    // Ambiente\n    environment: {\n      lighting: \"\",\n      music: false,\n      photography: false,\n      visitors: \"\",\n      privacy: \"\",\n    },\n    \n    // Acompanhantes\n    companions: \"\",\n    supportTeam: \"\",\n    \n    // Nascimento\n    birthPreferences: {\n      position: \"\",\n      cutting: \"\",\n      delayed: false,\n      skinToSkin: false,\n      breastfeeding: false,\n    },\n    \n    // Pós-parto\n    postBirth: {\n      rooming: false,\n      feeding: \"\",\n      circumcision: false,\n      vitamins: false,\n    },\n    \n    specialRequests: \"\",\n    emergencyPreferences: \"\",\n  });\n\n  const [, setLocation] = useLocation();\n  const { user } = useAuth();\n  const { pregnancy } = usePregnancy();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Query para buscar planos de parto existentes\n  // Define interface para dados da API\n  interface BirthPlanApiResponse {\n    birthPlan?: {\n      id: string;\n      location?: string;\n      painRelief?: {\n        natural?: boolean;\n        epidural?: boolean;\n        other?: string;\n      };\n      companions?: string;\n      specialRequests?: string;\n      preferences?: any;\n    };\n  }\n\n  const { data: birthPlansData, isLoading: isLoadingPlans } = useQuery<BirthPlanApiResponse>({\n    queryKey: [\"/api/birth-plans\", pregnancy?.id],\n    enabled: !!pregnancy?.id,\n  });\n\n  // Mutation para criar plano de parto\n  const createPlanMutation = useMutation({\n    mutationFn: async (planData: any) => {\n      return apiRequest(\"POST\", \"/api/birth-plans\", { ...planData, pregnancyId: pregnancy?.id });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Sucesso!\",\n        description: \"Plano de parto criado com sucesso.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/birth-plans\"] });\n      setViewMode('list');\n      resetForm();\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao criar plano de parto.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Mutation para atualizar plano de parto\n  const updatePlanMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      return apiRequest(\"PUT\", `/api/birth-plans/${id}`, { ...data, pregnancyId: pregnancy?.id });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Sucesso!\",\n        description: \"Plano de parto atualizado com sucesso.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/birth-plans\"] });\n      setViewMode('list');\n      resetForm();\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao atualizar plano de parto.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Mutation para excluir plano de parto\n  const deletePlanMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(\"DELETE\", `/api/birth-plans/${id}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Sucesso!\",\n        description: \"Plano de parto excluído com sucesso.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/birth-plans\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao excluir plano de parto.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Resetar formulário\n  const resetForm = () => {\n    setActiveStep(0); // Resetar para o primeiro passo\n    setFormData({\n      location: \"\",\n      birthType: \"\",\n      hospital: \"\",\n      doctor: \"\",\n      doula: \"\",\n      painRelief: {\n        natural: false,\n        epidural: false,\n        nitrous: false,\n        massage: false,\n        hydrotherapy: false,\n        other: \"\",\n      },\n      environment: {\n        lighting: \"\",\n        music: false,\n        photography: false,\n        visitors: \"\",\n        privacy: \"\",\n      },\n      companions: \"\",\n      supportTeam: \"\",\n      birthPreferences: {\n        position: \"\",\n        cutting: \"\",\n        delayed: false,\n        skinToSkin: false,\n        breastfeeding: false,\n      },\n      postBirth: {\n        rooming: false,\n        feeding: \"\",\n        circumcision: false,\n        vitamins: false,\n      },\n      specialRequests: \"\",\n      emergencyPreferences: \"\",\n    });\n    setActiveStep(0);\n    setSelectedPlan(null);\n  };\n\n  // Carregar dados do plano selecionado\n  const loadPlanData = (plan: BirthPlan) => {\n    if (plan.preferences) {\n      setFormData({\n        location: plan.location || \"\",\n        birthType: plan.preferences.birthType || \"\",\n        hospital: plan.preferences.hospital || \"\",\n        doctor: plan.preferences.doctor || \"\",\n        doula: plan.preferences.doula || \"\",\n        painRelief: plan.preferences.painRelief || {\n          natural: false,\n          epidural: false,\n          nitrous: false,\n          massage: false,\n          hydrotherapy: false,\n          other: \"\",\n        },\n        environment: plan.preferences.environment || {\n          lighting: \"\",\n          music: false,\n          photography: false,\n          visitors: \"\",\n          privacy: \"\",\n        },\n        companions: Array.isArray(plan.companions) ? plan.companions.join(\", \") : (plan.companions || \"\"),\n        supportTeam: plan.preferences.supportTeam || \"\",\n        birthPreferences: plan.preferences.birthPreferences || {\n          position: \"\",\n          cutting: \"\",\n          delayed: false,\n          skinToSkin: false,\n          breastfeeding: false,\n        },\n        postBirth: plan.preferences.postBirth || {\n          rooming: false,\n          feeding: \"\",\n          circumcision: false,\n          vitamins: false,\n        },\n        specialRequests: plan.specialRequests || \"\",\n        emergencyPreferences: plan.preferences.emergencyPreferences || \"\",\n      });\n    }\n    setSelectedPlan(plan);\n  };\n\n  // Passos do formulário\n  const steps = [\n    {\n      title: \"Informações Básicas\",\n      icon: Building,\n      fields: [\"location\", \"birthType\", \"hospital\", \"doctor\"]\n    },\n    {\n      title: \"Alívio da Dor\",\n      icon: Heart,\n      fields: [\"painRelief\"]\n    },\n    {\n      title: \"Ambiente\",\n      icon: Home,\n      fields: [\"environment\"]\n    },\n    {\n      title: \"Acompanhantes\",\n      icon: Users,\n      fields: [\"companions\", \"supportTeam\"]\n    },\n    {\n      title: \"Nascimento\",\n      icon: Baby,\n      fields: [\"birthPreferences\"]\n    },\n    {\n      title: \"Pós-parto\",\n      icon: Shield,\n      fields: [\"postBirth\", \"specialRequests\", \"emergencyPreferences\"]\n    }\n  ];\n\n  const nextStep = () => {\n    if (activeStep < steps.length - 1) {\n      setActiveStep(activeStep + 1);\n    }\n  };\n\n  const prevStep = () => {\n    if (activeStep > 0) {\n      setActiveStep(activeStep - 1);\n    }\n  };\n\n  const updateFormData = (field: string, value: any) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  const updateNestedFormData = (section: string, field: string, value: any) => {\n    setFormData(prev => ({\n      ...prev,\n      [section]: {\n        ...(prev[section as keyof typeof prev] as object),\n        [field]: value\n      }\n    }));\n  };\n\n  const handleSave = () => {\n    const planData = {\n      location: formData.location,\n      painRelief: Object.keys(formData.painRelief).filter(key => \n        formData.painRelief[key as keyof typeof formData.painRelief] === true\n      ),\n      companions: formData.companions,\n      specialRequests: formData.specialRequests,\n      preferences: {\n        birthType: formData.birthType,\n        hospital: formData.hospital,\n        doctor: formData.doctor,\n        doula: formData.doula,\n        painRelief: formData.painRelief,\n        environment: formData.environment,\n        supportTeam: formData.supportTeam,\n        birthPreferences: formData.birthPreferences,\n        postBirth: formData.postBirth,\n        emergencyPreferences: formData.emergencyPreferences,\n      }\n    };\n\n    if (viewMode === 'edit' && selectedPlan) {\n      updatePlanMutation.mutate({ id: selectedPlan.id, data: planData });\n    } else {\n      createPlanMutation.mutate(planData);\n    }\n  };\n\n  const handleGeneratePDF = async (plan: BirthPlan) => {\n    try {\n      // Buscar dados da usuária\n      const userResponse = await fetch('/api/auth/me');\n      const userData = userResponse.ok ? await userResponse.json() : null;\n      const motherName = userData?.name || \"Futura Mamãe\";\n      \n      // Adaptar os dados do plano para o formato esperado pelo PDF\n      const pdfData = {\n        motherName: motherName,\n        dueDate: \"2026-05-30\", // Data padrão da gravidez\n        location: plan.location || \"Não especificado\",\n        birthType: plan.preferences?.birthType || \"Normal\",\n        hospital: plan.preferences?.hospital || \"Não especificado\",\n        doctor: plan.preferences?.doctor || \"Não especificado\",\n        doula: plan.preferences?.doula || \"Não especificado\",\n        painRelief: plan.preferences?.painRelief || {\n          natural: true,\n          epidural: false,\n          nitrous: false,\n          massage: false,\n          hydrotherapy: false,\n          other: \"\"\n        },\n        environment: plan.preferences?.environment || {\n          lighting: \"Natural\",\n          music: false,\n          aromatherapy: false,\n          personalItems: \"\",\n          photography: false,\n          videography: false\n        },\n        companions: Array.isArray(plan.companions) ? plan.companions.join(\", \") : (plan.companions || \"Não especificado\"),\n        supportTeam: plan.preferences?.supportTeam || {\n          partner: true,\n          mother: false,\n          doula: false,\n          other: \"\"\n        },\n        birthPreferences: plan.preferences?.birthPreferences || {\n          position: \"Natural\",\n          skinToSkin: true,\n          cordClamping: \"Após parar de pulsar\",\n          placentaDelivery: \"Natural\"\n        },\n        postBirth: plan.preferences?.postBirth || {\n          breastfeeding: true,\n          rooming: true,\n          eyeOintment: false,\n          vitaminK: true\n        },\n        specialRequests: plan.specialRequests || \"\",\n        emergencyPreferences: plan.preferences?.emergencyPreferences || \"\",\n        preferences: plan.preferences || {}\n      };\n      \n      await generateBirthPlanPDF(pdfData);\n      toast({\n        title: \"PDF Gerado!\",\n        description: \"Seu plano de parto foi baixado em PDF.\",\n      });\n    } catch (error) {\n      console.error(\"Erro ao gerar PDF:\", error);\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao gerar PDF do plano de parto.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (isLoadingPlans) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-pink-50 via-white to-blue-50\">\n        <LoadingSpinner size=\"lg\" />\n      </div>\n    );\n  }\n\n  // Lista de planos de parto\n  if (viewMode === 'list') {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-pink-50 via-white to-blue-50 pb-20\">\n        <div className=\"container mx-auto px-4 py-6\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between mb-6\">\n            <div className=\"flex items-center\">\n              <Link href=\"/\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"mr-2\"\n                  data-testid=\"button-back\"\n                >\n                  <ArrowLeft className=\"w-4 h-4\" />\n                </Button>\n              </Link>\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">Planos de Parto</h1>\n                <p className=\"text-gray-600\">Gerencie seus planos de parto</p>\n              </div>\n            </div>\n            <Button\n              onClick={() => {\n                resetForm();\n                setActiveStep(0); // Começar do primeiro passo\n                setViewMode('create');\n              }}\n              className=\"bg-gradient-to-r from-pink-500 to-purple-600 hover:from-pink-600 hover:to-purple-700\"\n              data-testid=\"button-create-plan\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Novo Plano\n            </Button>\n          </div>\n\n          {/* Lista de planos */}\n          <div className=\"space-y-4\">\n            {birthPlansData?.birthPlan ? (\n              <Card className=\"border-pink-200/30 hover:shadow-lg transition-shadow\">\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center\">\n                      <FileText className=\"w-5 h-5 text-pink-600 mr-2\" />\n                      <div>\n                        <CardTitle className=\"text-lg text-pink-700\">\n                          Plano de Parto Principal\n                        </CardTitle>\n                        <p className=\"text-sm text-gray-600 mt-1\">\n                          Local: {birthPlansData?.birthPlan?.location || \"Não especificado\"}\n                        </p>\n                      </div>\n                    </div>\n                    <Badge variant=\"secondary\" className=\"bg-pink-100 text-pink-700\">\n                      <Calendar className=\"w-3 h-3 mr-1\" />\n                      Ativo\n                    </Badge>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex flex-wrap gap-2\">\n                      {birthPlansData?.birthPlan?.painRelief && typeof birthPlansData.birthPlan.painRelief === 'object' && (\n                        <>\n                          {(birthPlansData.birthPlan.painRelief as any).natural && (\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              Natural\n                            </Badge>\n                          )}\n                          {(birthPlansData.birthPlan.painRelief as any).epidural && (\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              Epidural\n                            </Badge>\n                          )}\n                          {(birthPlansData.birthPlan.painRelief as any).other && (\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              {(birthPlansData.birthPlan.painRelief as any).other}\n                            </Badge>\n                          )}\n                        </>\n                      )}\n                    </div>\n                    <div className=\"flex space-x-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => {\n                          if (birthPlansData?.birthPlan) {\n                            loadPlanData(birthPlansData.birthPlan as BirthPlan);\n                            setViewMode('view');\n                          }\n                        }}\n                        data-testid=\"button-view-plan\"\n                      >\n                        <Eye className=\"w-4 h-4\" />\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => {\n                          if (birthPlansData?.birthPlan) {\n                            loadPlanData(birthPlansData.birthPlan as BirthPlan);\n                            setActiveStep(0); // Sempre começar do primeiro passo\n                            setViewMode('edit');\n                          }\n                        }}\n                        data-testid=\"button-edit-plan\"\n                      >\n                        <Edit className=\"w-4 h-4\" />\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => birthPlansData?.birthPlan && handleGeneratePDF(birthPlansData.birthPlan as BirthPlan)}\n                        data-testid=\"button-download-plan\"\n                      >\n                        <Download className=\"w-4 h-4\" />\n                      </Button>\n                      <AlertDialog>\n                        <AlertDialogTrigger asChild>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            className=\"text-red-600 hover:text-red-700\"\n                            data-testid=\"button-delete-plan\"\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </AlertDialogTrigger>\n                        <AlertDialogContent>\n                          <AlertDialogHeader>\n                            <AlertDialogTitle>Excluir Plano de Parto</AlertDialogTitle>\n                            <AlertDialogDescription>\n                              Tem certeza que deseja excluir este plano de parto? Esta ação não pode ser desfeita.\n                            </AlertDialogDescription>\n                          </AlertDialogHeader>\n                          <AlertDialogFooter>\n                            <AlertDialogCancel>Cancelar</AlertDialogCancel>\n                            <AlertDialogAction\n                              onClick={() => birthPlansData?.birthPlan?.id && deletePlanMutation.mutate(birthPlansData.birthPlan.id)}\n                              className=\"bg-red-600 hover:bg-red-700\"\n                            >\n                              Excluir\n                            </AlertDialogAction>\n                          </AlertDialogFooter>\n                        </AlertDialogContent>\n                      </AlertDialog>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ) : (\n              <Card className=\"border-dashed border-2 border-pink-200 bg-pink-50/30\">\n                <CardContent className=\"flex flex-col items-center justify-center py-12\">\n                  <FileText className=\"w-16 h-16 text-pink-300 mb-4\" />\n                  <h3 className=\"text-lg font-semibold text-gray-700 mb-2\">\n                    Nenhum plano de parto encontrado\n                  </h3>\n                  <p className=\"text-gray-600 text-center mb-6\">\n                    Crie seu primeiro plano de parto para se preparar para o nascimento do seu bebê.\n                  </p>\n                  <Button\n                    onClick={() => {\n                      resetForm();\n                      setActiveStep(0); // Começar do primeiro passo\n                      setViewMode('create');\n                    }}\n                    className=\"bg-gradient-to-r from-pink-500 to-purple-600 hover:from-pink-600 hover:to-purple-700\"\n                  >\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Criar Primeiro Plano\n                  </Button>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </div>\n        <BottomNavigation />\n      </div>\n    );\n  }\n\n  // Visualização do plano\n  if (viewMode === 'view' && selectedPlan) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-pink-50 via-white to-blue-50 pb-20\">\n        <div className=\"container mx-auto px-4 py-6\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between mb-6\">\n            <div className=\"flex items-center\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setViewMode('list')}\n                className=\"mr-2\"\n                data-testid=\"button-back\"\n              >\n                <ArrowLeft className=\"w-4 h-4\" />\n              </Button>\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">Plano de Parto</h1>\n                <p className=\"text-gray-600\">Visualizar detalhes</p>\n              </div>\n            </div>\n            <div className=\"flex space-x-2\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setViewMode('edit')}\n                data-testid=\"button-edit\"\n              >\n                <Edit className=\"w-4 h-4 mr-2\" />\n                Editar\n              </Button>\n              <Button\n                onClick={() => handleGeneratePDF(selectedPlan)}\n                className=\"bg-gradient-to-r from-pink-500 to-purple-600 hover:from-pink-600 hover:to-purple-700\"\n                data-testid=\"button-download\"\n              >\n                <Download className=\"w-4 h-4 mr-2\" />\n                Download PDF\n              </Button>\n            </div>\n          </div>\n\n          {/* Conteúdo do plano */}\n          <div className=\"space-y-6\">\n            <Card className=\"border-pink-200/30\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center text-pink-700\">\n                  <Building className=\"w-5 h-5 mr-2\" />\n                  Informações Básicas\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-700\">Local do Parto</Label>\n                    <p className=\"text-gray-900\">{selectedPlan.location || \"Não especificado\"}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-700\">Tipo de Parto</Label>\n                    <p className=\"text-gray-900\">{selectedPlan.preferences?.birthType || \"Não especificado\"}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-pink-200/30\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center text-pink-700\">\n                  <Heart className=\"w-5 h-5 mr-2\" />\n                  Alívio da Dor\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex flex-wrap gap-2\">\n                  {selectedPlan.painRelief && Array.isArray(selectedPlan.painRelief) && selectedPlan.painRelief.length > 0 && (\n                    selectedPlan.painRelief.map((relief: string, index: number) => (\n                      <Badge key={index} variant=\"secondary\" className=\"bg-pink-100 text-pink-700\">\n                        {relief}\n                      </Badge>\n                    ))\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-pink-200/30\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center text-pink-700\">\n                  <Users className=\"w-5 h-5 mr-2\" />\n                  Acompanhantes\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex flex-wrap gap-2\">\n                  {selectedPlan.companions && (\n                    <Badge variant=\"outline\">\n                      {selectedPlan.companions}\n                    </Badge>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {selectedPlan.specialRequests && (\n              <Card className=\"border-pink-200/30\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center text-pink-700\">\n                    <Shield className=\"w-5 h-5 mr-2\" />\n                    Solicitações Especiais\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-gray-900\">{selectedPlan.specialRequests}</p>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </div>\n        <BottomNavigation />\n      </div>\n    );\n  }\n\n  // Formulário de criação/edição\n  const renderStepContent = () => {\n    const currentStep = steps[activeStep];\n    \n    switch (activeStep) {\n      case 0: // Informações Básicas\n        return (\n          <div className=\"space-y-6\">\n            <Card className=\"border-pink-200/30\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center text-pink-700\">\n                  <Building className=\"w-5 h-5 mr-2\" />\n                  Onde seu bebê vai nascer?\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"location\" className=\"text-sm font-medium text-gray-700\">\n                    Local do Parto\n                  </Label>\n                  <Select value={formData.location} onValueChange={(value) => updateFormData(\"location\", value)}>\n                    <SelectTrigger className=\"w-full mt-1\">\n                      <SelectValue placeholder=\"Selecione o local\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"hospital\">Hospital</SelectItem>\n                      <SelectItem value=\"casa\">Casa de Parto</SelectItem>\n                      <SelectItem value=\"domicilio\">Domicílio</SelectItem>\n                      <SelectItem value=\"centro\">Centro de Parto</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"birthType\" className=\"text-sm font-medium text-gray-700\">\n                    Tipo de Parto Preferido\n                  </Label>\n                  <RadioGroup \n                    value={formData.birthType} \n                    onValueChange={(value) => updateFormData(\"birthType\", value)}\n                    className=\"mt-2\"\n                  >\n                    <div className=\"flex items-center space-x-2\">\n                      <RadioGroupItem value=\"normal\" id=\"normal\" />\n                      <Label htmlFor=\"normal\">Parto Normal</Label>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <RadioGroupItem value=\"cesariana\" id=\"cesariana\" />\n                      <Label htmlFor=\"cesariana\">Cesariana</Label>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <RadioGroupItem value=\"forceps\" id=\"forceps\" />\n                      <Label htmlFor=\"forceps\">Fórceps</Label>\n                    </div>\n                  </RadioGroup>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"hospital\" className=\"text-sm font-medium text-gray-700\">\n                    Hospital/Clínica\n                  </Label>\n                  <Input\n                    id=\"hospital\"\n                    value={formData.hospital}\n                    onChange={(e) => updateFormData(\"hospital\", e.target.value)}\n                    placeholder=\"Nome do hospital ou clínica\"\n                    className=\"mt-1\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"doctor\" className=\"text-sm font-medium text-gray-700\">\n                    Médico(a) Obstetra\n                  </Label>\n                  <Input\n                    id=\"doctor\"\n                    value={formData.doctor}\n                    onChange={(e) => updateFormData(\"doctor\", e.target.value)}\n                    placeholder=\"Nome do médico obstetra\"\n                    className=\"mt-1\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        );\n\n      case 1: // Alívio da Dor\n        return (\n          <div className=\"space-y-6\">\n            <Card className=\"border-pink-200/30\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center text-pink-700\">\n                  <Heart className=\"w-5 h-5 mr-2\" />\n                  Métodos de Alívio da Dor\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"natural\"\n                      checked={formData.painRelief.natural}\n                      onCheckedChange={(checked) => \n                        updateNestedFormData(\"painRelief\", \"natural\", checked)\n                      }\n                    />\n                    <Label htmlFor=\"natural\">Métodos Naturais</Label>\n                  </div>\n\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"epidural\"\n                      checked={formData.painRelief.epidural}\n                      onCheckedChange={(checked) => \n                        updateNestedFormData(\"painRelief\", \"epidural\", checked)\n                      }\n                    />\n                    <Label htmlFor=\"epidural\">Anestesia Epidural</Label>\n                  </div>\n\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"nitrous\"\n                      checked={formData.painRelief.nitrous}\n                      onCheckedChange={(checked) => \n                        updateNestedFormData(\"painRelief\", \"nitrous\", checked)\n                      }\n                    />\n                    <Label htmlFor=\"nitrous\">Óxido Nitroso</Label>\n                  </div>\n\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"massage\"\n                      checked={formData.painRelief.massage}\n                      onCheckedChange={(checked) => \n                        updateNestedFormData(\"painRelief\", \"massage\", checked)\n                      }\n                    />\n                    <Label htmlFor=\"massage\">Massagem</Label>\n                  </div>\n\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"hydrotherapy\"\n                      checked={formData.painRelief.hydrotherapy}\n                      onCheckedChange={(checked) => \n                        updateNestedFormData(\"painRelief\", \"hydrotherapy\", checked)\n                      }\n                    />\n                    <Label htmlFor=\"hydrotherapy\">Hidroterapia</Label>\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"painOther\" className=\"text-sm font-medium text-gray-700\">\n                    Outros Métodos\n                  </Label>\n                  <Textarea\n                    id=\"painOther\"\n                    value={formData.painRelief.other}\n                    onChange={(e) => updateNestedFormData(\"painRelief\", \"other\", e.target.value)}\n                    placeholder=\"Descreva outros métodos de alívio da dor...\"\n                    className=\"mt-1\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        );\n\n      case 2: // Ambiente\n        return (\n          <div className=\"space-y-6\">\n            <Card className=\"border-pink-200/30\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center text-pink-700\">\n                  <Home className=\"w-5 h-5 mr-2\" />\n                  Ambiente de Parto\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"lighting\" className=\"text-sm font-medium text-gray-700\">\n                    Iluminação Preferida\n                  </Label>\n                  <Select \n                    value={formData.environment.lighting} \n                    onValueChange={(value) => updateNestedFormData(\"environment\", \"lighting\", value)}\n                  >\n                    <SelectTrigger className=\"w-full mt-1\">\n                      <SelectValue placeholder=\"Selecione a iluminação\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"dim\">Luz Baixa</SelectItem>\n                      <SelectItem value=\"natural\">Luz Natural</SelectItem>\n                      <SelectItem value=\"bright\">Luz Clara</SelectItem>\n                      <SelectItem value=\"candles\">Velas</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id=\"music\"\n                    checked={formData.environment.music}\n                    onCheckedChange={(checked) => \n                      updateNestedFormData(\"environment\", \"music\", checked)\n                    }\n                  />\n                  <Label htmlFor=\"music\">Permitir Música</Label>\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id=\"photography\"\n                    checked={formData.environment.photography}\n                    onCheckedChange={(checked) => \n                      updateNestedFormData(\"environment\", \"photography\", checked)\n                    }\n                  />\n                  <Label htmlFor=\"photography\">Permitir Fotografia</Label>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"visitors\" className=\"text-sm font-medium text-gray-700\">\n                    Política de Visitantes\n                  </Label>\n                  <Textarea\n                    id=\"visitors\"\n                    value={formData.environment.visitors}\n                    onChange={(e) => updateNestedFormData(\"environment\", \"visitors\", e.target.value)}\n                    placeholder=\"Descreva suas preferências sobre visitantes...\"\n                    className=\"mt-1\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        );\n\n      case 3: // Acompanhantes\n        return (\n          <div className=\"space-y-6\">\n            <Card className=\"border-pink-200/30\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center text-pink-700\">\n                  <Users className=\"w-5 h-5 mr-2\" />\n                  Quem estará com você?\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"companions\" className=\"text-sm font-medium text-gray-700\">\n                    Acompanhantes (separados por vírgula)\n                  </Label>\n                  <Input\n                    id=\"companions\"\n                    value={formData.companions}\n                    onChange={(e) => updateFormData(\"companions\", e.target.value)}\n                    placeholder=\"Ex: Esposo, Mãe, Doula\"\n                    className=\"mt-1\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"supportTeam\" className=\"text-sm font-medium text-gray-700\">\n                    Equipe de Apoio\n                  </Label>\n                  <Textarea\n                    id=\"supportTeam\"\n                    value={formData.supportTeam}\n                    onChange={(e) => updateFormData(\"supportTeam\", e.target.value)}\n                    placeholder=\"Descreva sua equipe de apoio (doula, fisioterapeuta, etc.)\"\n                    className=\"mt-1\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        );\n\n      case 4: // Nascimento\n        return (\n          <div className=\"space-y-6\">\n            <Card className=\"border-pink-200/30\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center text-pink-700\">\n                  <Baby className=\"w-5 h-5 mr-2\" />\n                  Momento do Nascimento\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"position\" className=\"text-sm font-medium text-gray-700\">\n                    Posição para o Parto\n                  </Label>\n                  <Select \n                    value={formData.birthPreferences.position} \n                    onValueChange={(value) => updateNestedFormData(\"birthPreferences\", \"position\", value)}\n                  >\n                    <SelectTrigger className=\"w-full mt-1\">\n                      <SelectValue placeholder=\"Selecione a posição\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"squatting\">Cócoras</SelectItem>\n                      <SelectItem value=\"standing\">Em pé</SelectItem>\n                      <SelectItem value=\"side\">De lado</SelectItem>\n                      <SelectItem value=\"back\">Deitada</SelectItem>\n                      <SelectItem value=\"hands-knees\">Quatro apoios</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"delayed\"\n                      checked={formData.birthPreferences.delayed}\n                      onCheckedChange={(checked) => \n                        updateNestedFormData(\"birthPreferences\", \"delayed\", checked)\n                      }\n                    />\n                    <Label htmlFor=\"delayed\">Clampeamento Tardio do Cordão</Label>\n                  </div>\n\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"skinToSkin\"\n                      checked={formData.birthPreferences.skinToSkin}\n                      onCheckedChange={(checked) => \n                        updateNestedFormData(\"birthPreferences\", \"skinToSkin\", checked)\n                      }\n                    />\n                    <Label htmlFor=\"skinToSkin\">Contato Pele a Pele</Label>\n                  </div>\n\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"breastfeeding\"\n                      checked={formData.birthPreferences.breastfeeding}\n                      onCheckedChange={(checked) => \n                        updateNestedFormData(\"birthPreferences\", \"breastfeeding\", checked)\n                      }\n                    />\n                    <Label htmlFor=\"breastfeeding\">Amamentação Imediata</Label>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        );\n\n      case 5: // Pós-parto\n        return (\n          <div className=\"space-y-6\">\n            <Card className=\"border-pink-200/30\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center text-pink-700\">\n                  <Shield className=\"w-5 h-5 mr-2\" />\n                  Cuidados Pós-parto\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"rooming\"\n                      checked={formData.postBirth.rooming}\n                      onCheckedChange={(checked) => \n                        updateNestedFormData(\"postBirth\", \"rooming\", checked)\n                      }\n                    />\n                    <Label htmlFor=\"rooming\">Alojamento Conjunto</Label>\n                  </div>\n\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"vitamins\"\n                      checked={formData.postBirth.vitamins}\n                      onCheckedChange={(checked) => \n                        updateNestedFormData(\"postBirth\", \"vitamins\", checked)\n                      }\n                    />\n                    <Label htmlFor=\"vitamins\">Vitamina K para o Bebê</Label>\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"feeding\" className=\"text-sm font-medium text-gray-700\">\n                    Preferências de Alimentação\n                  </Label>\n                  <RadioGroup \n                    value={formData.postBirth.feeding} \n                    onValueChange={(value) => updateNestedFormData(\"postBirth\", \"feeding\", value)}\n                    className=\"mt-2\"\n                  >\n                    <div className=\"flex items-center space-x-2\">\n                      <RadioGroupItem value=\"breast\" id=\"breast\" />\n                      <Label htmlFor=\"breast\">Somente Amamentação</Label>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <RadioGroupItem value=\"formula\" id=\"formula\" />\n                      <Label htmlFor=\"formula\">Fórmula</Label>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <RadioGroupItem value=\"mixed\" id=\"mixed\" />\n                      <Label htmlFor=\"mixed\">Misto</Label>\n                    </div>\n                  </RadioGroup>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"specialRequests\" className=\"text-sm font-medium text-gray-700\">\n                    Solicitações Especiais\n                  </Label>\n                  <Textarea\n                    id=\"specialRequests\"\n                    value={formData.specialRequests}\n                    onChange={(e) => updateFormData(\"specialRequests\", e.target.value)}\n                    placeholder=\"Descreva qualquer solicitação especial...\"\n                    className=\"mt-1\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"emergencyPreferences\" className=\"text-sm font-medium text-gray-700\">\n                    Preferências em Emergência\n                  </Label>\n                  <Textarea\n                    id=\"emergencyPreferences\"\n                    value={formData.emergencyPreferences}\n                    onChange={(e) => updateFormData(\"emergencyPreferences\", e.target.value)}\n                    placeholder=\"Como você gostaria que as decisões de emergência fossem tomadas...\"\n                    className=\"mt-1\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-pink-50 via-white to-blue-50 pb-20\">\n      <div className=\"container mx-auto px-4 py-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <div className=\"flex items-center\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setViewMode('list')}\n              className=\"mr-2\"\n              data-testid=\"button-back\"\n            >\n              <ArrowLeft className=\"w-4 h-4\" />\n            </Button>\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900\">\n                {viewMode === 'edit' ? 'Editar Plano de Parto' : 'Novo Plano de Parto'}\n              </h1>\n              <p className=\"text-gray-600\">\n                {steps[activeStep].title} - Passo {activeStep + 1} de {steps.length}\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Progress */}\n        <div className=\"mb-8\">\n          <Progress value={((activeStep + 1) / steps.length) * 100} className=\"w-full\" />\n          <div className=\"flex justify-between mt-2 text-xs text-gray-600\">\n            {steps.map((step, index) => (\n              <span key={index} className={index <= activeStep ? \"text-pink-600 font-medium\" : \"\"}>\n                {step.title}\n              </span>\n            ))}\n          </div>\n        </div>\n\n        {/* Step Content */}\n        {renderStepContent()}\n\n        {/* Navigation */}\n        <div className=\"flex justify-between mt-8\">\n          <Button\n            variant=\"outline\"\n            onClick={prevStep}\n            disabled={activeStep === 0}\n            data-testid=\"button-prev\"\n          >\n            <ChevronLeft className=\"w-4 h-4 mr-2\" />\n            Anterior\n          </Button>\n\n          {activeStep === steps.length - 1 ? (\n            <Button\n              onClick={handleSave}\n              disabled={createPlanMutation.isPending || updatePlanMutation.isPending}\n              className=\"bg-gradient-to-r from-pink-500 to-purple-600 hover:from-pink-600 hover:to-purple-700\"\n              data-testid=\"button-save\"\n            >\n              {createPlanMutation.isPending || updatePlanMutation.isPending ? (\n                <LoadingSpinner size=\"sm\" className=\"mr-2\" />\n              ) : (\n                <Save className=\"w-4 h-4 mr-2\" />\n              )}\n              {viewMode === 'edit' ? 'Atualizar Plano' : 'Salvar Plano'}\n            </Button>\n          ) : (\n            <Button\n              onClick={nextStep}\n              className=\"bg-gradient-to-r from-pink-500 to-purple-600 hover:from-pink-600 hover:to-purple-700\"\n              data-testid=\"button-next\"\n            >\n              Próximo\n              <ChevronRight className=\"w-4 h-4 ml-2\" />\n            </Button>\n          )}\n        </div>\n      </div>\n      <BottomNavigation />\n    </div>\n  );\n}","size_bytes":48352},"client/src/pages/community.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { usePregnancy } from \"@/hooks/use-pregnancy\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { LoadingSpinner } from \"@/components/ui/loading-spinner\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport BottomNavigation from \"@/components/layout/bottom-navigation\";\nimport { ArrowLeft, Plus, Users, Heart, MessageCircle, Share, Send, Clock } from \"lucide-react\";\n\nexport default function Community() {\n  const [showNewPost, setShowNewPost] = useState(false);\n  const [postData, setPostData] = useState({\n    title: \"\",\n    content: \"\",\n  });\n  const [selectedPost, setSelectedPost] = useState<any>(null);\n  const [commentText, setCommentText] = useState(\"\");\n\n  const { user } = useAuth();\n  const { pregnancy, weekInfo } = usePregnancy();\n  const [, setLocation] = useLocation();\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const { data: postsData, isLoading } = useQuery({\n    queryKey: [\"/api/community/posts\"],\n    enabled: !!user,\n  });\n\n  const { data: commentsData } = useQuery({\n    queryKey: [\"/api/community/posts\", selectedPost?.id, \"comments\"],\n    enabled: !!selectedPost,\n  });\n\n  const createPostMutation = useMutation({\n    mutationFn: async (post: any) => {\n      const response = await apiRequest(\"POST\", \"/api/community/posts\", post);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/community/posts\"] });\n      setShowNewPost(false);\n      setPostData({ title: \"\", content: \"\" });\n      toast({\n        title: \"Post publicado!\",\n        description: \"Sua mensagem foi compartilhada com a comunidade.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao publicar post. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const likePostMutation = useMutation({\n    mutationFn: async (postId: string) => {\n      const response = await apiRequest(\"POST\", `/api/community/posts/${postId}/like`, {});\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/community/posts\"] });\n    },\n  });\n\n  const createCommentMutation = useMutation({\n    mutationFn: async ({ postId, content }: { postId: string; content: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/community/comments\", {\n        postId,\n        content,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/community/posts\", selectedPost?.id, \"comments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/community/posts\"] });\n      setCommentText(\"\");\n      toast({\n        title: \"Comentário adicionado!\",\n        description: \"Seu comentário foi publicado.\",\n      });\n    },\n  });\n\n  const handleSubmitPost = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!postData.content.trim()) {\n      toast({\n        title: \"Erro\",\n        description: \"O conteúdo do post é obrigatório\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createPostMutation.mutate({\n      title: postData.title.trim() || null,\n      content: postData.content.trim(),\n      week: weekInfo?.week || null,\n    });\n  };\n\n  const handleSubmitComment = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!commentText.trim()) return;\n    \n    createCommentMutation.mutate({\n      postId: selectedPost.id,\n      content: commentText.trim(),\n    });\n  };\n\n  const getInitials = (name: string) => {\n    return name\n      .split(' ')\n      .map(n => n[0])\n      .join('')\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  const formatTimeAgo = (dateString: string) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffInHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60));\n    \n    if (diffInHours < 1) return \"Agora mesmo\";\n    if (diffInHours < 24) return `${diffInHours}h atrás`;\n    \n    const diffInDays = Math.floor(diffInHours / 24);\n    if (diffInDays < 7) return `${diffInDays}d atrás`;\n    \n    return date.toLocaleDateString('pt-BR');\n  };\n\n  if (!user) {\n    setLocation(\"/login\");\n    return null;\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <LoadingSpinner size=\"lg\" />\n      </div>\n    );\n  }\n\n  const posts = postsData?.posts || [];\n  const comments = commentsData?.comments || [];\n\n  if (selectedPost) {\n    return (\n      <div className=\"min-h-screen bg-cream pb-20\">\n        <div className=\"p-4 pt-12\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <Button \n              variant=\"ghost\" \n              size=\"icon\"\n              className=\"rounded-full bg-white shadow-lg\"\n              onClick={() => setSelectedPost(null)}\n              data-testid=\"button-back-to-posts\"\n            >\n              <ArrowLeft className=\"h-5 w-5 text-charcoal\" />\n            </Button>\n            <h2 className=\"text-xl font-bold text-charcoal\">Comentários</h2>\n            <div className=\"w-10\" />\n          </div>\n\n          {/* Original Post */}\n          <Card className=\"shadow-lg mb-6\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-start space-x-3\">\n                <Avatar className=\"w-10 h-10\">\n                  <AvatarFallback className=\"bg-baby-pink text-baby-pink-dark\">\n                    {getInitials(selectedPost.user.name)}\n                  </AvatarFallback>\n                </Avatar>\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <span className=\"font-semibold text-charcoal\">{selectedPost.user.name}</span>\n                    {selectedPost.week && (\n                      <span className=\"text-xs text-baby-pink-dark bg-baby-pink px-2 py-1 rounded-full\">\n                        {selectedPost.week} semanas\n                      </span>\n                    )}\n                    <span className=\"text-xs text-gray-500 flex items-center\">\n                      <Clock className=\"h-3 w-3 mr-1\" />\n                      {formatTimeAgo(selectedPost.createdAt)}\n                    </span>\n                  </div>\n                  {selectedPost.title && (\n                    <h3 className=\"font-semibold text-charcoal mb-2\">{selectedPost.title}</h3>\n                  )}\n                  <p className=\"text-gray-700 mb-3\">{selectedPost.content}</p>\n                  <div className=\"flex items-center space-x-4 text-xs text-gray-500\">\n                    <span className=\"flex items-center\">\n                      <Heart className=\"h-3 w-3 mr-1\" />\n                      {selectedPost.likes}\n                    </span>\n                    <span className=\"flex items-center\">\n                      <MessageCircle className=\"h-3 w-3 mr-1\" />\n                      {selectedPost.commentsCount}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Comments */}\n          <div className=\"space-y-4 mb-6\">\n            {comments.map((comment: any) => (\n              <Card key={comment.id} className=\"shadow-sm\" data-testid={`comment-${comment.id}`}>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-start space-x-3\">\n                    <Avatar className=\"w-8 h-8\">\n                      <AvatarFallback className=\"bg-baby-blue text-baby-blue-dark text-xs\">\n                        {getInitials(comment.user.name)}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-2 mb-1\">\n                        <span className=\"font-medium text-charcoal text-sm\">{comment.user.name}</span>\n                        <span className=\"text-xs text-gray-500\">\n                          {formatTimeAgo(comment.createdAt)}\n                        </span>\n                      </div>\n                      <p className=\"text-gray-700 text-sm\">{comment.content}</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          {/* Add Comment */}\n          <Card className=\"shadow-lg sticky bottom-20\">\n            <CardContent className=\"p-4\">\n              <form onSubmit={handleSubmitComment} className=\"flex space-x-3\" data-testid=\"form-add-comment\">\n                <Input\n                  placeholder=\"Escreva um comentário...\"\n                  value={commentText}\n                  onChange={(e) => setCommentText(e.target.value)}\n                  className=\"flex-1 focus:ring-2 focus:ring-baby-pink focus:border-baby-pink-dark\"\n                  data-testid=\"input-comment\"\n                />\n                <Button\n                  type=\"submit\"\n                  size=\"sm\"\n                  className=\"bg-baby-pink-dark hover:bg-baby-pink-dark/90\"\n                  disabled={createCommentMutation.isPending || !commentText.trim()}\n                  data-testid=\"button-send-comment\"\n                >\n                  {createCommentMutation.isPending ? (\n                    <LoadingSpinner size=\"sm\" />\n                  ) : (\n                    <Send className=\"h-4 w-4\" />\n                  )}\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-cream pb-20\">\n      <div className=\"p-4 pt-12\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-2xl font-bold text-charcoal\" data-testid=\"text-page-title\">Comunidade</h2>\n          <Button \n            variant=\"ghost\" \n            size=\"icon\"\n            className=\"rounded-full bg-baby-pink-dark shadow-lg\"\n            onClick={() => setShowNewPost(true)}\n            data-testid=\"button-new-post\"\n          >\n            <Plus className=\"h-5 w-5 text-white\" />\n          </Button>\n        </div>\n\n        {/* Community Stats */}\n        <Card className=\"glass-effect shadow-lg mb-6\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-center space-x-6\">\n              <div className=\"text-center\">\n                <Users className=\"h-8 w-8 text-baby-pink-dark mx-auto mb-1\" />\n                <div className=\"text-lg font-bold text-charcoal\" data-testid=\"text-community-members\">1.2k+</div>\n                <div className=\"text-xs text-gray-600\">Mamães</div>\n              </div>\n              <div className=\"text-center\">\n                <MessageCircle className=\"h-8 w-8 text-baby-blue-dark mx-auto mb-1\" />\n                <div className=\"text-lg font-bold text-charcoal\" data-testid=\"text-total-posts\">{posts.length}</div>\n                <div className=\"text-xs text-gray-600\">Posts</div>\n              </div>\n              <div className=\"text-center\">\n                <Heart className=\"h-8 w-8 text-coral mx-auto mb-1\" />\n                <div className=\"text-lg font-bold text-charcoal\" data-testid=\"text-total-likes\">\n                  {posts.reduce((sum: number, post: any) => sum + post.likes, 0)}\n                </div>\n                <div className=\"text-xs text-gray-600\">Curtidas</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Posts */}\n        <div className=\"space-y-4\">\n          {posts.length === 0 ? (\n            <Card className=\"shadow-lg\">\n              <CardContent className=\"text-center py-12\">\n                <Users className=\"h-16 w-16 mx-auto mb-4 text-gray-400\" />\n                <h3 className=\"text-lg font-semibold text-charcoal mb-2\">Seja a primeira!</h3>\n                <p className=\"text-gray-600 mb-4\">Compartilhe sua experiência com outras mamães</p>\n                <Button\n                  onClick={() => setShowNewPost(true)}\n                  className=\"bg-gradient-to-r from-baby-pink-dark to-baby-blue-dark hover:opacity-90\"\n                  data-testid=\"button-first-post\"\n                >\n                  <Plus className=\"mr-2 h-4 w-4\" />\n                  Primeiro post\n                </Button>\n              </CardContent>\n            </Card>\n          ) : (\n            posts.map((post: any) => (\n              <Card key={post.id} className=\"shadow-lg\" data-testid={`post-${post.id}`}>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-start space-x-3\">\n                    <Avatar className=\"w-10 h-10\">\n                      <AvatarFallback className=\"bg-baby-pink text-baby-pink-dark\">\n                        {getInitials(post.user.name)}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-2 mb-2\">\n                        <span className=\"font-semibold text-charcoal\">{post.user.name}</span>\n                        {post.week && (\n                          <span className=\"text-xs text-baby-pink-dark bg-baby-pink px-2 py-1 rounded-full\">\n                            {post.week} semanas\n                          </span>\n                        )}\n                        <span className=\"text-xs text-gray-500 flex items-center\">\n                          <Clock className=\"h-3 w-3 mr-1\" />\n                          {formatTimeAgo(post.createdAt)}\n                        </span>\n                      </div>\n                      {post.title && (\n                        <h3 className=\"font-semibold text-charcoal mb-2\">{post.title}</h3>\n                      )}\n                      <p className=\"text-gray-700 mb-3\">{post.content}</p>\n                      <div className=\"flex items-center space-x-4 text-xs text-gray-500\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"flex items-center space-x-1 hover:text-baby-pink-dark p-0 h-auto\"\n                          onClick={() => likePostMutation.mutate(post.id)}\n                          data-testid={`button-like-${post.id}`}\n                        >\n                          <Heart className=\"h-3 w-3\" />\n                          <span>{post.likes}</span>\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"flex items-center space-x-1 hover:text-baby-blue-dark p-0 h-auto\"\n                          onClick={() => setSelectedPost(post)}\n                          data-testid={`button-comments-${post.id}`}\n                        >\n                          <MessageCircle className=\"h-3 w-3\" />\n                          <span>{post.commentsCount}</span>\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"flex items-center space-x-1 hover:text-coral p-0 h-auto\"\n                          data-testid={`button-share-${post.id}`}\n                        >\n                          <Share className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n          )}\n        </div>\n      </div>\n\n      {/* New Post Modal */}\n      {showNewPost && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50\">\n          <Card className=\"w-full max-w-md\">\n            <CardHeader>\n              <CardTitle className=\"text-charcoal\">Novo Post</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSubmitPost} className=\"space-y-4\" data-testid=\"form-new-post\">\n                <div>\n                  <Label htmlFor=\"title\" className=\"text-charcoal font-medium\">\n                    Título (opcional)\n                  </Label>\n                  <Input\n                    id=\"title\"\n                    placeholder=\"Ex: Dúvida sobre sintomas\"\n                    value={postData.title}\n                    onChange={(e) => setPostData({ ...postData, title: e.target.value })}\n                    className=\"focus:ring-2 focus:ring-baby-pink focus:border-baby-pink-dark\"\n                    data-testid=\"input-post-title\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"content\" className=\"text-charcoal font-medium\">\n                    Conteúdo *\n                  </Label>\n                  <Textarea\n                    id=\"content\"\n                    placeholder=\"Compartilhe sua experiência, dúvida ou dica...\"\n                    value={postData.content}\n                    onChange={(e) => setPostData({ ...postData, content: e.target.value })}\n                    className=\"h-32 resize-none focus:ring-2 focus:ring-baby-pink focus:border-baby-pink-dark\"\n                    data-testid=\"textarea-post-content\"\n                    required\n                  />\n                </div>\n                \n                <div className=\"flex space-x-3\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\"\n                    onClick={() => setShowNewPost(false)}\n                    className=\"flex-1\"\n                    data-testid=\"button-cancel-post\"\n                  >\n                    Cancelar\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    className=\"flex-1 bg-gradient-to-r from-baby-pink-dark to-baby-blue-dark hover:opacity-90\"\n                    disabled={createPostMutation.isPending}\n                    data-testid=\"button-publish-post\"\n                  >\n                    {createPostMutation.isPending ? (\n                      <LoadingSpinner size=\"sm\" className=\"mr-2\" />\n                    ) : (\n                      <Send className=\"mr-2 h-4 w-4\" />\n                    )}\n                    Publicar\n                  </Button>\n                </div>\n              </form>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      <BottomNavigation />\n    </div>\n  );\n}\n","size_bytes":18957},"client/src/pages/consultations.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { usePregnancy } from \"@/hooks/use-pregnancy\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { LoadingSpinner } from \"@/components/ui/loading-spinner\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport BottomNavigation from \"@/components/layout/bottom-navigation\";\nimport { \n  ArrowLeft, \n  Calendar, \n  Plus, \n  Clock, \n  MapPin, \n  User,\n  Edit,\n  Trash2\n} from \"lucide-react\";\nimport { format, parseISO } from 'date-fns';\n\ntype ConsultationType = 'prenatal' | 'ultrasound' | 'exam' | 'specialist' | 'emergency';\n\ninterface Consultation {\n  id: string;\n  title: string;\n  date: string;\n  location?: string;\n  doctorName?: string;\n  notes?: string;\n  completed: boolean;\n  type: ConsultationType;\n  priority: 'low' | 'medium' | 'high';\n  reminders: boolean;\n  preparation?: string[];\n}\n\ninterface ConsultationsData {\n  consultations: Consultation[];\n  upcoming: Consultation[];\n}\n\nexport default function Consultations() {\n  const [showAddForm, setShowAddForm] = useState(false);\n  const [editingId, setEditingId] = useState<string | null>(null);\n  const [formData, setFormData] = useState({\n    title: \"\",\n    date: \"\",\n    time: \"\",\n    location: \"\",\n    doctorName: \"\",\n    notes: \"\",\n    type: 'prenatal' as ConsultationType,\n    priority: 'medium' as 'low' | 'medium' | 'high',\n    reminders: true,\n    preparation: [] as string[]\n  });\n\n  const { user } = useAuth();\n  const { pregnancy } = usePregnancy();\n  const [, setLocation] = useLocation();\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const { data: consultationsData, isLoading } = useQuery<ConsultationsData>({\n    queryKey: [\"/api/consultations\", pregnancy?.id],\n    enabled: !!pregnancy,\n  });\n\n  const consultations = consultationsData?.consultations || [];\n  const upcoming = consultationsData?.upcoming || [];\n\n  const resetForm = () => {\n    setFormData({\n      title: \"\",\n      date: \"\",\n      time: \"\",\n      location: \"\",\n      doctorName: \"\",\n      notes: \"\",\n      type: 'prenatal',\n      priority: 'medium',\n      reminders: true,\n      preparation: []\n    });\n    setEditingId(null);\n    setShowAddForm(false);\n  };\n\n  const addConsultationMutation = useMutation({\n    mutationFn: async (consultation: any) => {\n      const response = await apiRequest(\"POST\", \"/api/consultations\", consultation);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/consultations\", pregnancy?.id] });\n      resetForm();\n      toast({\n        title: \"✅ Consulta agendada!\",\n        description: \"Sua consulta foi adicionada com sucesso.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"❌ Erro\",\n        description: \"Erro ao agendar consulta. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateConsultationMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string, data: any }) => {\n      const response = await apiRequest(\"PUT\", `/api/consultations/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/consultations\", pregnancy?.id] });\n      resetForm();\n      toast({\n        title: \"✅ Consulta atualizada!\",\n        description: \"Suas alterações foram salvas.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"❌ Erro\",\n        description: \"Erro ao atualizar consulta. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteConsultationMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/consultations/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/consultations\", pregnancy?.id] });\n      toast({\n        title: \"✅ Consulta removida!\",\n        description: \"A consulta foi excluída com sucesso.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"❌ Erro\",\n        description: \"Erro ao excluir consulta. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.title || !formData.date || !formData.time) {\n      toast({\n        title: \"Erro\",\n        description: \"Por favor, preencha os campos obrigatórios\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const dateTime = new Date(`${formData.date}T${formData.time}`);\n    \n    if (editingId) {\n      updateConsultationMutation.mutate({\n        id: editingId,\n        data: {\n          title: formData.title,\n          date: dateTime.toISOString(),\n          location: formData.location || null,\n          doctorName: formData.doctorName || null,\n          notes: formData.notes || null,\n        }\n      });\n    } else {\n      addConsultationMutation.mutate({\n        pregnancyId: pregnancy!.id,\n        title: formData.title,\n        date: dateTime.toISOString(),\n        location: formData.location || null,\n        doctorName: formData.doctorName || null,\n        notes: formData.notes || null,\n        type: formData.type,\n        priority: formData.priority,\n        reminders: formData.reminders,\n        preparation: formData.preparation\n      });\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <LoadingSpinner size=\"lg\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-pink-50 via-white to-blue-50\">\n      <div className=\"container mx-auto px-4 pt-6 pb-20\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <div className=\"flex items-center space-x-3\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setLocation(\"/\")}\n              className=\"p-2\"\n            >\n              <ArrowLeft className=\"h-5 w-5\" />\n            </Button>\n            <h1 className=\"text-2xl font-bold text-gray-800\">Consultas</h1>\n          </div>\n          <Button\n            onClick={() => setShowAddForm(true)}\n            className=\"bg-gradient-to-r from-pink-500 to-blue-500 hover:opacity-90\"\n          >\n            <Plus className=\"mr-2 h-4 w-4\" />\n            Nova\n          </Button>\n        </div>\n\n        {/* Upcoming Consultations */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Calendar className=\"mr-2 h-5 w-5 text-blue-500\" />\n              Próximas Consultas\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {upcoming.map((consultation) => (\n                <div key={consultation.id} className=\"p-4 bg-gray-50 rounded-lg border\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-semibold text-gray-800\">{consultation.title}</h3>\n                      <div className=\"space-y-1 text-sm text-gray-600 mt-2\">\n                        <div className=\"flex items-center\">\n                          <Clock className=\"h-3 w-3 mr-1\" />\n                          {format(parseISO(consultation.date), \"dd/MM/yyyy 'às' HH:mm\")}\n                        </div>\n                        {consultation.doctorName && (\n                          <div className=\"flex items-center\">\n                            <User className=\"h-3 w-3 mr-1\" />\n                            {consultation.doctorName}\n                          </div>\n                        )}\n                        {consultation.location && (\n                          <div className=\"flex items-center\">\n                            <MapPin className=\"h-3 w-3 mr-1\" />\n                            {consultation.location}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => {\n                          setFormData({\n                            title: consultation.title,\n                            date: format(parseISO(consultation.date), 'yyyy-MM-dd'),\n                            time: format(parseISO(consultation.date), 'HH:mm'),\n                            location: consultation.location || \"\",\n                            doctorName: consultation.doctorName || \"\",\n                            notes: consultation.notes || \"\",\n                            type: consultation.type,\n                            priority: consultation.priority,\n                            reminders: consultation.reminders,\n                            preparation: consultation.preparation || []\n                          });\n                          setEditingId(consultation.id);\n                          setShowAddForm(true);\n                        }}\n                        className=\"h-8 w-8 p-0\"\n                      >\n                        <Edit className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => {\n                          if (confirm('Tem certeza que deseja excluir esta consulta?')) {\n                            deleteConsultationMutation.mutate(consultation.id);\n                          }\n                        }}\n                        className=\"h-8 w-8 p-0 text-red-500 hover:text-red-700\"\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ))}\n              {upcoming.length === 0 && (\n                <p className=\"text-gray-500 text-center py-8\">Nenhuma consulta agendada</p>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Add consultation modal */}\n      {showAddForm && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50\">\n          <Card className=\"w-full max-w-lg max-h-[90vh] overflow-y-auto\">\n            <CardHeader>\n              <CardTitle className=\"text-gray-800\">\n                {editingId ? 'Editar Consulta' : 'Nova Consulta'}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"title\" className=\"text-gray-700 font-medium\">\n                    Título da consulta *\n                  </Label>\n                  <Input\n                    id=\"title\"\n                    placeholder=\"Ex: Consulta pré-natal\"\n                    value={formData.title}\n                    onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n                    className=\"mt-1\"\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"date\" className=\"text-gray-700 font-medium\">\n                      Data *\n                    </Label>\n                    <Input\n                      type=\"date\"\n                      id=\"date\"\n                      value={formData.date}\n                      onChange={(e) => setFormData({ ...formData, date: e.target.value })}\n                      className=\"mt-1\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"time\" className=\"text-gray-700 font-medium\">\n                      Horário *\n                    </Label>\n                    <Input\n                      type=\"time\"\n                      id=\"time\"\n                      value={formData.time}\n                      onChange={(e) => setFormData({ ...formData, time: e.target.value })}\n                      className=\"mt-1\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"doctorName\" className=\"text-gray-700 font-medium\">\n                    Nome do médico\n                  </Label>\n                  <Input\n                    id=\"doctorName\"\n                    placeholder=\"Ex: Dr. Silva\"\n                    value={formData.doctorName}\n                    onChange={(e) => setFormData({ ...formData, doctorName: e.target.value })}\n                    className=\"mt-1\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"location\" className=\"text-gray-700 font-medium\">\n                    Local da consulta\n                  </Label>\n                  <Input\n                    id=\"location\"\n                    placeholder=\"Ex: Hospital São Paulo\"\n                    value={formData.location}\n                    onChange={(e) => setFormData({ ...formData, location: e.target.value })}\n                    className=\"mt-1\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"notes\" className=\"text-gray-700 font-medium\">\n                    Observações\n                  </Label>\n                  <Textarea\n                    id=\"notes\"\n                    placeholder=\"Observações sobre a consulta...\"\n                    value={formData.notes}\n                    onChange={(e) => setFormData({ ...formData, notes: e.target.value })}\n                    className=\"mt-1\"\n                    rows={3}\n                  />\n                </div>\n                \n                <div className=\"flex space-x-3 pt-4\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\"\n                    onClick={resetForm}\n                    className=\"flex-1\"\n                  >\n                    Cancelar\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    className=\"flex-1 bg-gradient-to-r from-pink-500 to-blue-500 hover:opacity-90\"\n                    disabled={addConsultationMutation.isPending || updateConsultationMutation.isPending}\n                  >\n                    {(addConsultationMutation.isPending || updateConsultationMutation.isPending) ? (\n                      <LoadingSpinner size=\"sm\" className=\"mr-2\" />\n                    ) : (\n                      <Calendar className=\"mr-2 h-4 w-4\" />\n                    )}\n                    {editingId ? 'Salvar' : 'Agendar'}\n                  </Button>\n                </div>\n              </form>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      <BottomNavigation />\n    </div>\n  );\n}","size_bytes":15357},"client/src/pages/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { ArrowLeft, ArrowRight, Ruler, Weight, Calendar, Sparkles, ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport Baby3D from \"../components/Baby3D\";\nimport { useBabyDevelopment } from \"../hooks/use-baby-development\";\nimport { useArticles } from \"../hooks/use-articles\";\nimport { usePregnancy } from \"../hooks/use-pregnancy\";\nimport { useAuth } from \"../hooks/useAuth\";\nimport NextConsultationCard from \"../components/NextConsultationCard\";\nimport { LoadingSpinner } from \"../components/ui/loading-spinner\";\nimport ProgressCircle from \"../components/progress-circle\";\nimport { VideoSection } from \"../components/VideoSection\";\n\ninterface UserData {\n  name: string;\n  dueDate?: string;\n  currentWeek?: number;\n}\n\nexport default function Dashboard() {\n  const [location, setLocation] = useLocation();\n  const { user } = useAuth();\n  const { pregnancy, weekInfo, progress, isLoading } = usePregnancy();\n  \n  const [viewingWeek, setViewingWeek] = useState<number | null>(null);\n  const currentWeek = viewingWeek || weekInfo?.week || 1;\n  \n  const [activeTab, setActiveTab] = useState<\"mom\" | \"baby\">(\"baby\");\n  const [selectedVideo, setSelectedVideo] = useState<{url: string, title: string} | null>(null);\n  \n  const { data: development, isLoading: isLoadingDevelopment } = useBabyDevelopment(currentWeek);\n  const { data: articlesData, isLoading: isArticlesLoading, error: articlesError } = useArticles(currentWeek);\n\n  const navigateToWeek = (direction: 'prev' | 'next') => {\n    const newWeek = direction === 'prev' ? Math.max(1, currentWeek - 1) : Math.min(40, currentWeek + 1);\n    setViewingWeek(newWeek);\n    setLocation(`/?week=${newWeek}`);\n  };\n\n  const backToCurrentWeek = () => {\n    setViewingWeek(null);\n    setLocation('/');\n  };\n\n  const getFruitEmoji = (fruit: string | null) => {\n    if (!fruit) return \"🤔\";\n    const fruitMap: Record<string, string> = {\n      \"grão de areia\": \"🟡\",\n      \"cabeça de alfinete\": \"📍\", \n      \"semente de chia\": \"⚪\",\n      \"semente de papoula\": \"⚫\",\n      \"framboesa\": \"🫐\",\n      \"lima\": \"🟢\",\n      \"limão\": \"🍋\",\n      \"banana\": \"🍌\",\n      \"milho\": \"🌽\",\n      \"berinjela\": \"🍆\"\n    };\n    return fruitMap[fruit.toLowerCase()] || \"🍎\";\n  };\n\n  // Wait for pregnancy data to load before redirecting\n  if (isLoading) {\n    return (\n      <div className=\"maternal-bg min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <LoadingSpinner />\n          <p className=\"mt-4 text-gray-600 maternal-font\">Carregando informações da gravidez...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Only redirect after loading is complete and no pregnancy found\n  if (!pregnancy && !weekInfo) {\n    setLocation(\"/pregnancy-setup\");\n    return null;\n  }\n\n  return (\n    <div className=\"maternal-bg min-h-screen pb-20 relative\">\n      {/* Gentle floating elements */}\n      <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n        <div className=\"absolute top-20 left-10 w-3 h-3 bg-pink-200 rounded-full animate-float-gentle opacity-60\"></div>\n        <div className=\"absolute top-40 right-20 w-2 h-2 bg-blue-200 rounded-full animate-breathe opacity-50\"></div>\n        <div className=\"absolute bottom-32 left-1/4 w-2.5 h-2.5 bg-purple-200 rounded-full animate-float-gentle opacity-40\"></div>\n        <div className=\"absolute bottom-20 right-1/3 w-2 h-2 bg-green-200 rounded-full animate-breathe opacity-50\"></div>\n      </div>\n      \n      {/* Header */}\n      <div className=\"glass-soft border-b border-pink-200/30 sticky top-0 z-40 relative\">\n        <div className=\"flex items-center justify-between p-4\">\n          <div>\n            <h1 className=\"text-xl font-bold bg-gradient-to-r from-pink-400 via-purple-400 to-blue-400 bg-clip-text text-transparent maternal-font animate-gentle-gradient\">Mama Care</h1>\n            <p className=\"text-sm text-gray-600 maternal-font\">Olá, {user?.name?.split(' ')[0] || 'Mamãe'}!</p>\n          </div>\n          <div className=\"flex items-center gap-4\">\n            <div className=\"text-right\">\n              <p className=\"text-sm text-pink-600 maternal-font font-medium\">Semana {weekInfo?.week || 1}</p>\n              <p className=\"text-xs text-gray-500 maternal-font\">{weekInfo?.weeksRemaining || 0} semanas restantes</p>\n            </div>\n            {/* Logout Button */}\n            <button\n              onClick={() => {\n                // Clear session and redirect to login\n                fetch('/api/auth/logout', { method: 'POST' })\n                  .then(() => {\n                    setLocation('/login');\n                  })\n                  .catch((error) => {\n                    console.error('Logout error:', error);\n                    // Force redirect even if API fails\n                    setLocation('/login');\n                  });\n              }}\n              className=\"p-2 rounded-full glass-soft border border-pink-300/50 hover:border-pink-400 transition-all duration-200 warm-glow\"\n              title=\"Sair da conta\"\n              data-testid=\"button-logout\"\n            >\n              <svg className=\"w-5 h-5 text-gray-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1\" />\n              </svg>\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Loading State */}\n      {isLoadingDevelopment && (\n        <div className=\"flex items-center justify-center py-20 relative\">\n          <LoadingSpinner />\n          <span className=\"ml-3 text-gray-600 maternal-font\">Carregando informações...</span>\n        </div>\n      )}\n\n      {/* Development Info */}\n      {!isLoadingDevelopment && development && (\n        <div className=\"p-4 relative\">\n          {/* Hero Section com navegação nas bordas */}\n          <div className=\"mb-8 relative\">\n            <div className=\"flex items-center justify-center mb-6 px-4 relative\">\n              {/* Botão semana anterior */}\n              <button\n                onClick={() => navigateToWeek('prev')}\n                disabled={currentWeek <= 1}\n                className={`absolute left-4 top-1/2 transform -translate-y-1/2 z-20 p-3 rounded-full transition-all glass-soft border border-pink-300/30 warm-glow ${\n                  currentWeek <= 1 \n                    ? 'opacity-30 cursor-not-allowed' \n                    : 'hover:border-pink-400 hover:shadow-lg active:scale-95 animate-breathe'\n                }`}\n                data-testid=\"button-previous-week\"\n              >\n                <ChevronLeft className=\"w-6 h-6 text-pink-600\" />\n              </button>\n\n              {/* Botão próxima semana */}\n              <button\n                onClick={() => navigateToWeek('next')}\n                disabled={currentWeek >= 40}\n                className={`absolute right-4 top-1/2 transform -translate-y-1/2 z-20 p-3 rounded-full transition-all glass-soft border border-blue-300/30 warm-glow ${\n                  currentWeek >= 40 \n                    ? 'opacity-30 cursor-not-allowed' \n                    : 'hover:border-blue-400 hover:shadow-lg active:scale-95 animate-breathe'\n                }`}\n                data-testid=\"button-next-week\"\n              >\n                <ChevronRight className=\"w-6 h-6 text-blue-600\" />\n              </button>\n\n              {/* Baby 3D Component */}\n              <div className=\"w-48 h-48 mx-4 rounded-full overflow-hidden border-4 border-white/60 shadow-xl warm-glow animate-breathe\" style={{background: 'var(--gradient-peach-sky)'}}>\n                <Baby3D week={currentWeek} className=\"w-full h-full rounded-full\" />\n              </div>\n              \n              {/* Progress Ring ao lado da imagem */}\n              {weekInfo && (\n                <div className=\"relative ml-8\">\n                  <ProgressCircle \n                    percentage={Math.round((currentWeek / 40) * 100)} \n                    size={128}\n                  />\n                </div>\n              )}\n            </div>\n            \n            {/* Informações da gestação */}\n            {weekInfo && (\n              <div className=\"glass-effect rounded-2xl p-6 mx-4 backdrop-blur-md bg-white/80 mb-4\">\n                <div className=\"grid grid-cols-2 gap-6\">\n                  {/* Semana atual */}\n                  <div className=\"text-center\">\n                    <p className=\"text-gray-700 text-lg mb-2 flex items-center justify-center gap-2\">\n                      <Calendar className=\"h-5 w-5\" />\n                      {viewingWeek && viewingWeek !== weekInfo.week ? 'Visualizando a' : 'Você está na'}\n                    </p>\n                    <p className=\"text-3xl font-bold text-gray-800 mb-2\">\n                      {currentWeek}ª semana\n                    </p>\n                    <p className=\"text-gray-600 text-sm\">\n                      {viewingWeek && viewingWeek !== weekInfo.week ? (\n                        <div className=\"flex flex-col items-center gap-2\">\n                          <span>de desenvolvimento</span>\n                          <button \n                            onClick={backToCurrentWeek}\n                            className=\"group flex items-center gap-2 px-4 py-2 bg-gradient-to-r from-pink-500 to-purple-500 hover:from-pink-600 hover:to-purple-600 text-white text-sm rounded-xl transition-all duration-300 shadow-lg hover:shadow-xl transform hover:scale-105\"\n                            data-testid=\"button-back-to-current-week\"\n                          >\n                            <Calendar className=\"h-4 w-4\" />\n                            <span>Voltar para semana {weekInfo.week}</span>\n                          </button>\n                        </div>\n                      ) : 'da sua gestação'}\n                    </p>\n                  </div>\n                  \n                  {/* Semanas restantes */}\n                  <div className=\"text-center\">\n                    <p className=\"text-gray-700 text-lg mb-2 flex items-center justify-center gap-2\">\n                      <Sparkles className=\"h-5 w-5\" />\n                      Faltam aproximadamente\n                    </p>\n                    <p className=\"text-3xl font-bold text-gray-800 mb-2\">\n                      {40 - currentWeek} semanas\n                    </p>\n                    <p className=\"text-gray-600 text-sm\">\n                      para conhecer seu bebê!\n                    </p>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Informações do bebê - horizontal */}\n          {development?.developmentData && (\n            <div className=\"glass-effect rounded-2xl p-4 mx-4 backdrop-blur-md bg-white/80\">\n              <div className=\"bg-gradient-to-r from-pink-50 to-blue-50 rounded-xl p-4 flex items-center justify-around\">\n                <div className=\"text-center\">\n                  <Ruler className=\"h-6 w-6 mx-auto mb-1 text-blue-600\" />\n                  <p className=\"text-xs text-gray-500 mb-1\">Tamanho</p>\n                  <p className=\"font-semibold text-gray-800\">\n                    {development.developmentData?.length_cm ? `${development.developmentData.length_cm} cm` : development.developmentData?.size || \"Calculando...\"}\n                  </p>\n                </div>\n                <div className=\"text-center\">\n                  <Weight className=\"h-6 w-6 mx-auto mb-1 text-pink-600\" />\n                  <p className=\"text-xs text-gray-500 mb-1\">Peso</p>\n                  <p className=\"font-semibold text-gray-800\">\n                    {development.developmentData?.weight_grams && Number(development.developmentData.weight_grams) > 0 \n                      ? `${development.developmentData.weight_grams}g` \n                      : development.developmentData?.weight || \"< 1g\"}\n                  </p>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl mb-1\">{getFruitEmoji(development.developmentData?.fruit_comparison)}</div>\n                  <p className=\"text-xs text-gray-500 mb-1\">Como</p>\n                  <p className=\"font-semibold text-gray-800 text-sm\">{development.developmentData?.fruit_comparison || \"Calculando...\"}</p>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Expert Content Section */}\n      <div className=\"glass-effect rounded-2xl p-5 mx-4 mt-6 backdrop-blur-md bg-white/80\">\n        <div className=\"flex items-center gap-2 mb-4\">\n          <div className=\"w-8 h-8 bg-gradient-to-br from-purple-500 to-pink-500 rounded-lg flex items-center justify-center\">\n            <span className=\"text-white text-sm\">👩‍⚕️</span>\n          </div>\n          <h3 className=\"text-lg font-semibold text-gray-800\">\n            Conteúdos para Você - Semana {currentWeek}\n          </h3>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          {isArticlesLoading ? (\n            <div className=\"col-span-full flex items-center justify-center py-8\">\n              <LoadingSpinner />\n              <span className=\"ml-2 text-gray-600\">Carregando conteúdos...</span>\n            </div>\n          ) : articlesData?.articles && articlesData.articles.length > 0 ? (\n            articlesData.articles.map((article, index) => (\n              <div \n                key={article.id}\n                className=\"bg-white rounded-2xl overflow-hidden shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105 cursor-pointer\"\n                data-testid={`article-content-${index + 1}`}\n                onClick={() => {\n                  if (article.video_url) {\n                    // Abrir vídeo em modal na própria tela\n                    setSelectedVideo({\n                      url: article.video_url,\n                      title: article.title\n                    });\n                  }\n                }}\n              >\n                {/* Imagem do artigo */}\n                <div className=\"relative h-32 bg-gradient-to-br from-pink-100 via-purple-100 to-blue-100 overflow-hidden\">\n                  {article.image ? (\n                    <img \n                      src={article.image.replace('@assets/', '/attached_assets/')} \n                      alt={article.title}\n                      className=\"w-full h-full object-cover\"\n                    />\n                  ) : (\n                    <div className=\"w-full h-full flex items-center justify-center\">\n                      <span className=\"text-4xl\">\n                        {article.video_url ? '🎥' : '📖'}\n                      </span>\n                    </div>\n                  )}\n                  \n                  {/* Badge de tipo de conteúdo */}\n                  <div className=\"absolute top-2 right-2\">\n                    <span className={`px-2 py-1 rounded-full text-xs font-medium text-white ${\n                      article.video_url ? 'bg-red-500' : 'bg-blue-500'\n                    }`}>\n                      {article.video_url ? 'Vídeo' : 'Artigo'}\n                    </span>\n                  </div>\n                </div>\n                \n                {/* Conteúdo do card */}\n                <div className=\"p-4\">\n                  <h4 className=\"font-bold text-gray-800 text-sm mb-2 line-clamp-2\">\n                    {article.title}\n                  </h4>\n                  \n                  {/* Fonte do conteúdo */}\n                  {article.source && (\n                    <p className=\"text-xs text-gray-500 mb-3\">\n                      📚 {article.source}\n                    </p>\n                  )}\n                  \n                  {/* Botão de ação */}\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-xs text-purple-600 font-medium\">\n                      {article.video_url ? 'Assistir' : 'Ler'} →\n                    </span>\n                    <div className=\"flex items-center text-xs text-gray-400\">\n                      <span>Semana {currentWeek}</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))\n          ) : currentWeek === 1 ? (\n            <>\n              <div className=\"p-4 rounded-xl border-l-4 border-green-400 bg-green-50\" data-testid=\"expert-content-1\">\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-8 h-8 rounded-full bg-green-100 flex items-center justify-center flex-shrink-0 mt-1\">\n                    <span className=\"text-sm\">📖</span>\n                  </div>\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-semibold text-gray-800 text-sm mb-2\">Primeira Consulta Pré-natal</h4>\n                    <p className=\"text-gray-600 text-sm leading-relaxed\">\n                      Agende sua primeira consulta com o obstetra. É importante iniciar o acompanhamento médico o quanto antes para garantir uma gravidez saudável.\n                    </p>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"p-4 rounded-xl border-l-4 border-blue-400 bg-blue-50\" data-testid=\"expert-content-2\">\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-8 h-8 rounded-full bg-green-100 flex items-center justify-center flex-shrink-0 mt-1\">\n                    <span className=\"text-sm\">🍎</span>\n                  </div>\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-semibold text-gray-800 text-sm mb-2\">Alimentação Saudável</h4>\n                    <p className=\"text-gray-600 text-sm leading-relaxed\">\n                      Mantenha uma dieta equilibrada rica em frutas, vegetais, proteínas e grãos integrais. Evite alimentos crus ou mal cozidos.\n                    </p>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"p-4 rounded-xl border-l-4 border-purple-400 bg-purple-50\" data-testid=\"expert-content-3\">\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-8 h-8 rounded-full bg-purple-100 flex items-center justify-center flex-shrink-0 mt-1\">\n                    <span className=\"text-sm\">💆‍♀️</span>\n                  </div>\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-semibold text-gray-800 text-sm mb-2\">Cuide do seu Bem-estar</h4>\n                    <p className=\"text-gray-600 text-sm leading-relaxed\">\n                      Pratique técnicas de relaxamento, durma adequadamente e mantenha-se hidratada. Seu bem-estar reflete na saúde do bebê.\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </>\n          ) : null}\n        </div>\n      </div>\n      \n      {/* Next Consultation Card */}\n      <div className=\"mx-4 mt-4\">\n        <NextConsultationCard />\n      </div>\n\n      {/* Video Section */}\n      <VideoSection \n        videos={articlesData?.articles || []} \n        isLoading={isArticlesLoading}\n        currentWeek={currentWeek}\n      />\n\n      {/* Mom/Baby Toggle */}\n      <div className=\"px-4 mb-6\">\n        <div className=\"bg-white/60 backdrop-blur-sm rounded-full p-1 flex border border-gray-200\">\n          <button\n            onClick={() => setActiveTab(\"mom\")}\n            className={`flex-1 py-3 px-6 rounded-full text-sm font-medium transition-all ${\n              activeTab === \"mom\"\n                ? \"bg-gradient-to-r from-pink-400 to-rose-400 text-white shadow-lg\"\n                : \"text-gray-600\"\n            }`}\n            data-testid=\"tab-mom\"\n          >\n            Mamãe\n          </button>\n          <button\n            onClick={() => setActiveTab(\"baby\")}\n            className={`flex-1 py-3 px-6 rounded-full text-sm font-medium transition-all ${\n              activeTab === \"baby\"\n                ? \"bg-gradient-to-r from-purple-400 to-blue-400 text-white shadow-lg\"\n                : \"text-gray-600\"\n            }`}\n            data-testid=\"tab-baby\"\n          >\n            Bebê\n          </button>\n        </div>\n      </div>\n\n      {/* Development Milestones Content */}\n      {development?.developmentData && (\n        <div className=\"mx-4 mb-6\">\n          <div className=\"glass-effect rounded-2xl p-5 backdrop-blur-md bg-white/80\">\n            <div className=\"flex items-center gap-2 mb-4\">\n              <div className={`w-8 h-8 bg-gradient-to-br ${\n                activeTab === \"baby\" \n                  ? \"from-purple-500 to-blue-500\" \n                  : \"from-pink-500 to-rose-500\"\n              } rounded-lg flex items-center justify-center`}>\n                <span className=\"text-white text-sm\">\n                  {activeTab === \"baby\" ? \"👶\" : \"🤱\"}\n                </span>\n              </div>\n              <h3 className=\"text-lg font-semibold text-gray-800\">\n                {activeTab === \"baby\" ? \"Desenvolvimento do Bebê\" : \"Mudanças na Mamãe\"}\n              </h3>\n            </div>\n            \n            <div>\n              {activeTab === \"baby\" && development.developmentData.development_milestones_baby ? (\n                <div \n                  className=\"p-4 bg-gradient-to-r from-purple-50 to-blue-50 rounded-lg border border-purple-100\"\n                  data-testid=\"text-baby-milestones-complete\"\n                >\n                  <p className=\"text-gray-700 leading-relaxed\">\n                    {development.developmentData.development_milestones_baby}\n                  </p>\n                </div>\n              ) : activeTab === \"mom\" && development.developmentData.development_milestones_mom ? (\n                <div \n                  className=\"p-4 bg-gradient-to-r from-pink-50 to-rose-50 rounded-lg border border-pink-100\"\n                  data-testid=\"text-mom-milestones-complete\"\n                >\n                  <p className=\"text-gray-700 leading-relaxed\">\n                    {development.developmentData.development_milestones_mom}\n                  </p>\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <div className=\"text-4xl mb-4\">\n                    {activeTab === \"baby\" ? \"👶\" : \"🤱\"}\n                  </div>\n                  <p className=\"text-gray-500 text-sm\">\n                    {activeTab === \"baby\" \n                      ? \"Marcos de desenvolvimento do bebê não disponíveis para esta semana\"\n                      : \"Informações sobre mudanças na mamãe não disponíveis para esta semana\"\n                    }\n                  </p>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Feature Grid */}\n      <div className=\"px-4 pb-6\">\n        <div className=\"grid grid-cols-2 gap-3\">\n          {/* Weight Tracking */}\n          <div \n            className=\"bg-gradient-to-br from-pink-400 to-pink-500 p-4 rounded-2xl text-white cursor-pointer transform hover:scale-105 transition-all duration-200 shadow-lg\"\n            onClick={() => setLocation(\"/weight-tracking\")}\n            data-testid=\"card-weight-tracking\"\n          >\n            <Weight className=\"h-8 w-8 mb-2\" />\n            <h3 className=\"font-semibold text-sm\">Controle de Peso</h3>\n            <p className=\"text-xs opacity-90 mt-1\">Acompanhe sua evolução</p>\n          </div>\n\n          {/* Kick Counter */}\n          <div \n            className=\"bg-gradient-to-br from-purple-400 to-purple-500 p-4 rounded-2xl text-white cursor-pointer transform hover:scale-105 transition-all duration-200 shadow-lg\"\n            onClick={() => setLocation(\"/kick-counter\")}\n            data-testid=\"card-kick-counter\"\n          >\n            <div className=\"text-2xl mb-2\">👶</div>\n            <h3 className=\"font-semibold text-sm\">Contador de Chutes</h3>\n            <p className=\"text-xs opacity-90 mt-1\">Monitore os movimentos</p>\n          </div>\n\n          {/* Birth Plan */}\n          <div \n            className=\"bg-gradient-to-br from-blue-400 to-blue-500 p-4 rounded-2xl text-white cursor-pointer transform hover:scale-105 transition-all duration-200 shadow-lg\"\n            onClick={() => setLocation(\"/birth-plan\")}\n            data-testid=\"card-birth-plan\"\n          >\n            <div className=\"text-2xl mb-2\">📋</div>\n            <h3 className=\"font-semibold text-sm\">Plano de Parto</h3>\n            <p className=\"text-xs opacity-90 mt-1\">Planeje seu parto</p>\n          </div>\n\n          {/* Consultations */}\n          <div \n            className=\"bg-gradient-to-br from-green-400 to-green-500 p-4 rounded-2xl text-white cursor-pointer transform hover:scale-105 transition-all duration-200 shadow-lg\"\n            onClick={() => setLocation(\"/consultations\")}\n            data-testid=\"card-consultations\"\n          >\n            <Calendar className=\"h-8 w-8 mb-2\" />\n            <h3 className=\"font-semibold text-sm\">Consultas</h3>\n            <p className=\"text-xs opacity-90 mt-1\">Agende e gerencie</p>\n          </div>\n\n          {/* Shopping List */}\n          <div \n            className=\"bg-gradient-to-br from-orange-400 to-orange-500 p-4 rounded-2xl text-white cursor-pointer transform hover:scale-105 transition-all duration-200 shadow-lg\"\n            onClick={() => setLocation(\"/shopping-list\")}\n            data-testid=\"card-shopping-list\"\n          >\n            <div className=\"text-2xl mb-2\">🛒</div>\n            <h3 className=\"font-semibold text-sm\">Lista de Compras</h3>\n            <p className=\"text-xs opacity-90 mt-1\">Organize suas compras</p>\n          </div>\n\n          {/* Photo Album */}\n          <div \n            className=\"bg-gradient-to-br from-indigo-400 to-indigo-500 p-4 rounded-2xl text-white cursor-pointer transform hover:scale-105 transition-all duration-200 shadow-lg\"\n            onClick={() => setLocation(\"/photo-album\")}\n            data-testid=\"card-photo-album\"\n          >\n            <div className=\"text-2xl mb-2\">📸</div>\n            <h3 className=\"font-semibold text-sm\">Álbum de Fotos</h3>\n            <p className=\"text-xs opacity-90 mt-1\">Guarde suas memórias</p>\n          </div>\n\n          {/* Diary */}\n          <div \n            className=\"bg-gradient-to-br from-teal-400 to-teal-500 p-4 rounded-2xl text-white cursor-pointer transform hover:scale-105 transition-all duration-200 shadow-lg\"\n            onClick={() => setLocation(\"/diary\")}\n            data-testid=\"card-diary\"\n          >\n            <div className=\"text-2xl mb-2\">📝</div>\n            <h3 className=\"font-semibold text-sm\">Diário</h3>\n            <p className=\"text-xs opacity-90 mt-1\">Registre seus sentimentos</p>\n          </div>\n\n          {/* Medical Articles */}\n          <div \n            className=\"bg-gradient-to-br from-red-400 to-red-500 p-4 rounded-2xl text-white cursor-pointer transform hover:scale-105 transition-all duration-200 shadow-lg\"\n            onClick={() => setLocation(\"/medical-articles\")}\n            data-testid=\"card-medical-articles\"\n          >\n            <div className=\"text-2xl mb-2\">🏥</div>\n            <h3 className=\"font-semibold text-sm\">Artigos Médicos</h3>\n            <p className=\"text-xs opacity-90 mt-1\">Informações confiáveis</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Modal de Vídeo */}\n      {selectedVideo && (\n        <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-75 p-4\">\n          <div className=\"bg-white rounded-2xl max-w-2xl w-full max-h-[80vh] overflow-hidden\">\n            <div className=\"flex items-center justify-between p-3 border-b\">\n              <h3 className=\"text-base font-semibold text-gray-800 line-clamp-1 pr-4\">\n                {selectedVideo.title}\n              </h3>\n              <button \n                onClick={() => setSelectedVideo(null)}\n                className=\"text-gray-500 hover:text-gray-700 text-xl flex-shrink-0\"\n                data-testid=\"close-video-modal\"\n              >\n                ✕\n              </button>\n            </div>\n            <div className=\"aspect-video\">\n              <iframe\n                src={selectedVideo.url.replace('watch?v=', 'embed/').replace('youtu.be/', 'youtube.com/embed/')}\n                className=\"w-full h-full\"\n                frameBorder=\"0\"\n                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                allowFullScreen\n                title={selectedVideo.title}\n              />\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":28829},"client/src/pages/diary.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { usePregnancy } from \"@/hooks/use-pregnancy\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { LoadingSpinner } from \"@/components/ui/loading-spinner\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport BottomNavigation from \"@/components/layout/bottom-navigation\";\nimport { \n  ArrowLeft, \n  Plus, \n  Book, \n  Edit, \n  Trash2, \n  Calendar as CalendarIcon, \n  Heart,\n  Sparkles,\n  TrendingUp,\n  BarChart3,\n  Filter,\n  Download,\n  Eye,\n  MessageCircle,\n  Tag,\n  Target,\n  Clock,\n  Lightbulb,\n  Star,\n  Activity,\n  Zap,\n  Sun,\n  CloudRain,\n  Cloud,\n  CloudSnow\n} from \"lucide-react\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell } from 'recharts';\nimport { format, startOfMonth, endOfMonth, eachDayOfInterval, isSameDay, subDays } from 'date-fns';\nimport { ptBR } from 'date-fns/locale';\n\ninterface DiaryEntry {\n  id: string;\n  pregnancyId: string;\n  title?: string;\n  content: string;\n  mood: number;\n  emotions: string[];\n  milestone?: string;\n  week?: number;\n  date: string;\n  prompts?: string[];\n}\n\ninterface DiaryData {\n  entries: DiaryEntry[];\n}\n\n// Comprehensive mood system (1-10 scale)\nconst moods = [\n  { value: 1, label: \"Terrível\", emoji: \"😭\", color: \"#DC2626\", bgColor: \"#FEF2F2\" },\n  { value: 2, label: \"Muito mal\", emoji: \"😢\", color: \"#EF4444\", bgColor: \"#FEF2F2\" },\n  { value: 3, label: \"Mal\", emoji: \"😔\", color: \"#F97316\", bgColor: \"#FFF7ED\" },\n  { value: 4, label: \"Chateada\", emoji: \"😕\", color: \"#EAB308\", bgColor: \"#FEFCE8\" },\n  { value: 5, label: \"Neutra\", emoji: \"😐\", color: \"#6B7280\", bgColor: \"#F9FAFB\" },\n  { value: 6, label: \"Ok\", emoji: \"🙂\", color: \"#10B981\", bgColor: \"#F0FDF4\" },\n  { value: 7, label: \"Bem\", emoji: \"😊\", color: \"#059669\", bgColor: \"#F0FDF4\" },\n  { value: 8, label: \"Muito bem\", emoji: \"😄\", color: \"#0891B2\", bgColor: \"#F0F9FF\" },\n  { value: 9, label: \"Excelente\", emoji: \"😍\", color: \"#7C3AED\", bgColor: \"#FAF5FF\" },\n  { value: 10, label: \"Radiante\", emoji: \"🤩\", color: \"#C2185B\", bgColor: \"#FCE7F3\" }\n];\n\n// Emotion tags for categorization\nconst emotionTags = [\n  { value: \"gratidao\", label: \"Gratidão\", color: \"#10B981\" },\n  { value: \"ansiedade\", label: \"Ansiedade\", color: \"#F59E0B\" },\n  { value: \"amor\", label: \"Amor\", color: \"#EC4899\" },\n  { value: \"medo\", label: \"Medo\", color: \"#EF4444\" },\n  { value: \"esperanca\", label: \"Esperança\", color: \"#3B82F6\" },\n  { value: \"cansaco\", label: \"Cansaço\", color: \"#6B7280\" },\n  { value: \"empolgacao\", label: \"Empolgação\", color: \"#8B5CF6\" },\n  { value: \"nostalgia\", label: \"Nostalgia\", color: \"#14B8A6\" },\n  { value: \"preocupacao\", label: \"Preocupação\", color: \"#F97316\" },\n  { value: \"paz\", label: \"Paz\", color: \"#06B6D4\" },\n  { value: \"curiosidade\", label: \"Curiosidade\", color: \"#84CC16\" },\n  { value: \"confianca\", label: \"Confiança\", color: \"#A855F7\" }\n];\n\n// Important pregnancy milestones\nconst milestones = {\n  8: 'Primeiro batimento cardíaco',\n  12: 'Fim do primeiro trimestre',\n  16: 'Descoberta do sexo',\n  20: 'Primeiros movimentos',\n  24: 'Viabilidade fetal',\n  28: 'Terceiro trimestre',\n  32: 'Desenvolvimento pulmonar',\n  36: 'Bebê considerado a termo',\n  40: 'Data provável do parto'\n};\n\n// Writing prompts based on pregnancy week\nconst getWritingPrompts = (week?: number) => {\n  if (!week) return [];\n  \n  if (week <= 12) {\n    return [\n      \"Como você se sente sabendo que está grávida?\",\n      \"Quais são suas maiores expectativas para esta gestação?\",\n      \"O que você gostaria de dizer para seu bebê neste momento?\",\n      \"Como sua vida mudou desde que descobriu a gravidez?\"\n    ];\n  } else if (week <= 28) {\n    return [\n      \"Como você imagina seu bebê neste momento?\",\n      \"Quais preparativos você está fazendo?\",\n      \"O que você mais espera nos próximos meses?\",\n      \"Como se sente sobre as mudanças no seu corpo?\"\n    ];\n  } else {\n    return [\n      \"Como você se sente sabendo que o encontro está próximo?\",\n      \"O que você quer que seu bebê saiba sobre este período?\",\n      \"Quais são seus maiores medos e esperanças agora?\",\n      \"Como você se imagina sendo mãe?\"\n    ];\n  }\n};\n\nexport default function Diary() {\n  const [showAddForm, setShowAddForm] = useState(false);\n  const [editingEntry, setEditingEntry] = useState<DiaryEntry | null>(null);\n  const [selectedDate, setSelectedDate] = useState<Date>(new Date());\n  const [filterMood, setFilterMood] = useState<string>('all');\n  const [filterEmotion, setFilterEmotion] = useState<string>('all');\n  const [selectedPrompt, setSelectedPrompt] = useState<string>('');\n  \n  // Form data\n  const [formData, setFormData] = useState({\n    title: \"\",\n    content: \"\",\n    mood: 5,\n    emotions: [] as string[],\n    milestone: \"\",\n    week: \"\"\n  });\n\n  const { user } = useAuth();\n  const { pregnancy, weekInfo } = usePregnancy();\n  const [, setLocation] = useLocation();\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const { data: entriesData, isLoading } = useQuery<DiaryData>({\n    queryKey: [\"/api/diary-entries\", pregnancy?.id],\n    enabled: !!pregnancy,\n    queryFn: () => {\n      // Mock data for demonstration\n      const today = new Date();\n      const mockData: DiaryData = {\n        entries: [\n          {\n            id: '1',\n            pregnancyId: pregnancy?.id || '',\n            title: 'Descobrindo a gravidez',\n            content: 'Que mistura de emoções! Estou tão feliz, mas também um pouco nervosa. Mal posso acreditar que vou ser mãe. É um sonho se realizando.',\n            mood: 8,\n            emotions: ['amor', 'ansiedade', 'empolgacao'],\n            milestone: 'Primeiro teste positivo',\n            week: 6,\n            date: new Date(2024, 0, 10).toISOString(),\n            prompts: ['Como você se sente sabendo que está grávida?']\n          },\n          {\n            id: '2',\n            pregnancyId: pregnancy?.id || '',\n            title: 'Primeira consulta',\n            content: 'Ouvi o coraçãozinho batendo hoje! Foi o momento mais emocionante da minha vida. O médico disse que está tudo bem e isso me deu muito alívio.',\n            mood: 9,\n            emotions: ['gratidao', 'amor', 'paz'],\n            milestone: 'Primeiro ultrassom',\n            week: 8,\n            date: new Date(2024, 0, 25).toISOString()\n          },\n          {\n            id: '3',\n            pregnancyId: pregnancy?.id || '',\n            title: 'Enjoos matinais',\n            content: 'Que fase difícil... Os enjoos estão terríveis, mas sei que é sinal de que meu bebê está crescendo. Tentando manter o foco no positivo.',\n            mood: 4,\n            emotions: ['cansaco', 'esperanca'],\n            week: 10,\n            date: new Date(2024, 1, 5).toISOString()\n          },\n          {\n            id: '4',\n            pregnancyId: pregnancy?.id || '',\n            title: 'Comprando as primeiras roupinhas',\n            content: 'Que alegria escolher as primeiras roupinhas! Cada pecinha pequenina me emociona. Mal posso esperar para vestir meu bebê.',\n            mood: 9,\n            emotions: ['amor', 'empolgacao', 'gratidao'],\n            week: 16,\n            date: new Date(2024, 2, 12).toISOString()\n          },\n          {\n            id: '5',\n            pregnancyId: pregnancy?.id || '',\n            title: 'Primeiros movimentos',\n            content: 'Senti o primeiro chutinho hoje! Foi uma sensação indescritível. Agora sei que meu bebê está ali, se movimentando. Estou completamente apaixonada.',\n            mood: 10,\n            emotions: ['amor', 'empolgacao', 'gratidao'],\n            milestone: 'Primeiros movimentos',\n            week: 20,\n            date: new Date(2024, 3, 8).toISOString()\n          }\n        ]\n      };\n      return Promise.resolve(mockData);\n    },\n  });\n\n  // Calculations and filtering\n  const entries = entriesData?.entries || [];\n  \n  const filteredEntries = useMemo(() => {\n    return entries.filter(entry => {\n      const moodMatch = filterMood === 'all' || entry.mood.toString() === filterMood;\n      const emotionMatch = filterEmotion === 'all' || entry.emotions.includes(filterEmotion);\n      return moodMatch && emotionMatch;\n    });\n  }, [entries, filterMood, filterEmotion]);\n\n  // Mood analytics\n  const moodAnalytics = useMemo(() => {\n    const last30Days = entries\n      .filter(entry => {\n        const entryDate = new Date(entry.date);\n        const thirtyDaysAgo = subDays(new Date(), 30);\n        return entryDate >= thirtyDaysAgo;\n      })\n      .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());\n\n    const moodTrendData = last30Days.map(entry => ({\n      date: format(new Date(entry.date), 'dd/MM'),\n      mood: entry.mood,\n      title: entry.title || 'Entrada'\n    }));\n\n    const averageMood = entries.length > 0 \n      ? entries.reduce((sum, entry) => sum + entry.mood, 0) / entries.length \n      : 0;\n\n    const moodDistribution = moods.map(mood => ({\n      mood: mood.label,\n      count: entries.filter(entry => entry.mood === mood.value).length,\n      color: mood.color\n    })).filter(item => item.count > 0);\n\n    const emotionFrequency = emotionTags.map(emotion => ({\n      emotion: emotion.label,\n      count: entries.reduce((sum, entry) => \n        sum + (entry.emotions.includes(emotion.value) ? 1 : 0), 0\n      ),\n      color: emotion.color\n    })).filter(item => item.count > 0)\n      .sort((a, b) => b.count - a.count)\n      .slice(0, 6);\n\n    return {\n      moodTrendData,\n      averageMood,\n      moodDistribution,\n      emotionFrequency,\n      totalEntries: entries.length,\n      entriesThisWeek: entries.filter(entry => {\n        const entryDate = new Date(entry.date);\n        const weekAgo = subDays(new Date(), 7);\n        return entryDate >= weekAgo;\n      }).length\n    };\n  }, [entries]);\n\n  // Calendar data\n  const calendarData = useMemo(() => {\n    const monthStart = startOfMonth(selectedDate);\n    const monthEnd = endOfMonth(selectedDate);\n    const daysInMonth = eachDayOfInterval({ start: monthStart, end: monthEnd });\n\n    return daysInMonth.map(day => {\n      const dayEntries = entries.filter(entry => \n        isSameDay(new Date(entry.date), day)\n      );\n      const averageMood = dayEntries.length > 0\n        ? dayEntries.reduce((sum, entry) => sum + entry.mood, 0) / dayEntries.length\n        : null;\n\n      return {\n        date: day,\n        entries: dayEntries,\n        averageMood,\n        hasEntries: dayEntries.length > 0\n      };\n    });\n  }, [entries, selectedDate]);\n\n  // Mutations\n  const addEntryMutation = useMutation({\n    mutationFn: async (entry: any) => {\n      const response = await apiRequest(\"POST\", \"/api/diary-entries\", entry);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/diary-entries\", pregnancy?.id] });\n      handleCloseForm();\n      toast({\n        title: \"📝 Entrada salva!\",\n        description: \"Sua entrada do diário foi salva com sucesso.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"❌ Erro\",\n        description: \"Erro ao salvar entrada. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateEntryMutation = useMutation({\n    mutationFn: async ({ id, entry }: { id: string; entry: any }) => {\n      const response = await apiRequest(\"PUT\", `/api/diary-entries/${id}`, entry);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/diary-entries\", pregnancy?.id] });\n      handleCloseForm();\n      toast({\n        title: \"✏️ Entrada atualizada!\",\n        description: \"Sua entrada foi atualizada com sucesso.\",\n      });\n    },\n  });\n\n  const deleteEntryMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/diary-entries/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/diary-entries\", pregnancy?.id] });\n      toast({\n        title: \"🗑️ Entrada removida\",\n        description: \"Entrada foi removida do diário.\",\n      });\n    },\n  });\n\n  const handleCloseForm = () => {\n    setShowAddForm(false);\n    setEditingEntry(null);\n    setFormData({ \n      title: \"\", \n      content: \"\", \n      mood: 5, \n      emotions: [], \n      milestone: \"\", \n      week: \"\" \n    });\n    setSelectedPrompt('');\n  };\n\n  const handleEdit = (entry: DiaryEntry) => {\n    setEditingEntry(entry);\n    setFormData({\n      title: entry.title || \"\",\n      content: entry.content || \"\",\n      mood: entry.mood || 5,\n      emotions: entry.emotions || [],\n      milestone: entry.milestone || \"\",\n      week: entry.week?.toString() || \"\",\n    });\n    setShowAddForm(true);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.content.trim()) {\n      toast({\n        title: \"Erro\",\n        description: \"O conteúdo da entrada é obrigatório\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const week = formData.week ? parseInt(formData.week) : weekInfo?.week;\n    const milestone = week && milestones[week as keyof typeof milestones] \n      ? milestones[week as keyof typeof milestones] \n      : formData.milestone;\n\n    const entryData = {\n      pregnancyId: pregnancy!.id,\n      title: formData.title.trim() || null,\n      content: formData.content.trim(),\n      mood: formData.mood,\n      emotions: formData.emotions,\n      milestone: milestone || null,\n      week,\n      date: new Date().toISOString(),\n      prompts: selectedPrompt ? [selectedPrompt] : []\n    };\n\n    if (editingEntry) {\n      updateEntryMutation.mutate({ id: editingEntry.id, entry: entryData });\n    } else {\n      addEntryMutation.mutate(entryData);\n    }\n  };\n\n  const toggleEmotion = (emotion: string) => {\n    const currentEmotions = formData.emotions;\n    const newEmotions = currentEmotions.includes(emotion)\n      ? currentEmotions.filter(e => e !== emotion)\n      : [...currentEmotions, emotion];\n    \n    setFormData(prev => ({ ...prev, emotions: newEmotions }));\n  };\n\n  const getMoodColor = (moodValue: number) => {\n    const mood = moods.find(m => m.value === moodValue);\n    return mood?.color || '#6B7280';\n  };\n\n  const getMoodEmoji = (moodValue: number) => {\n    const mood = moods.find(m => m.value === moodValue);\n    return mood?.emoji || '😐';\n  };\n\n  if (!user || !pregnancy) {\n    setLocation(\"/login\");\n    return null;\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <LoadingSpinner size=\"lg\" />\n      </div>\n    );\n  }\n\n  const currentPrompts = getWritingPrompts(weekInfo?.week);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-50 via-pink-50 to-blue-50 pb-20\">\n      <div className=\"p-4 pt-8\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <Button \n            variant=\"ghost\" \n            size=\"icon\"\n            className=\"rounded-full bg-white shadow-lg\"\n            onClick={() => setLocation(\"/\")}\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"h-5 w-5 text-gray-700\" />\n          </Button>\n          <h1 className=\"text-2xl font-bold text-gray-800\">Diário da Gestação</h1>\n          <Button \n            variant=\"ghost\" \n            size=\"icon\"\n            className=\"rounded-full bg-gradient-to-r from-purple-500 to-pink-500 shadow-lg\"\n            onClick={() => setShowAddForm(true)}\n            data-testid=\"button-add-entry\"\n          >\n            <Plus className=\"h-5 w-5 text-white\" />\n          </Button>\n        </div>\n\n        <Tabs defaultValue=\"entries\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-4 mb-6\">\n            <TabsTrigger value=\"entries\" className=\"flex items-center text-xs\">\n              <Book className=\"w-3 h-3 mr-1\" />\n              Entradas\n            </TabsTrigger>\n            <TabsTrigger value=\"mood\" className=\"flex items-center text-xs\">\n              <Activity className=\"w-3 h-3 mr-1\" />\n              Humor\n            </TabsTrigger>\n            <TabsTrigger value=\"milestones\" className=\"flex items-center text-xs\">\n              <Star className=\"w-3 h-3 mr-1\" />\n              Marcos\n            </TabsTrigger>\n            <TabsTrigger value=\"insights\" className=\"flex items-center text-xs\">\n              <TrendingUp className=\"w-3 h-3 mr-1\" />\n              Análises\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Entries Tab */}\n          <TabsContent value=\"entries\" className=\"space-y-6\">\n            {/* Quick Stats */}\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <Card className=\"text-center\">\n                <CardContent className=\"p-4\">\n                  <Book className=\"h-8 w-8 text-purple-500 mx-auto mb-2\" />\n                  <div className=\"text-2xl font-bold text-purple-600\">{entries.length}</div>\n                  <div className=\"text-xs text-gray-600\">Total de entradas</div>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"text-center\">\n                <CardContent className=\"p-4\">\n                  <Activity className=\"h-8 w-8 text-pink-500 mx-auto mb-2\" />\n                  <div className=\"text-2xl font-bold text-pink-600\">\n                    {moodAnalytics.averageMood.toFixed(1)}\n                  </div>\n                  <div className=\"text-xs text-gray-600\">Humor médio</div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"text-center\">\n                <CardContent className=\"p-4\">\n                  <Zap className=\"h-8 w-8 text-blue-500 mx-auto mb-2\" />\n                  <div className=\"text-2xl font-bold text-blue-600\">\n                    {moodAnalytics.entriesThisWeek}\n                  </div>\n                  <div className=\"text-xs text-gray-600\">Esta semana</div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"text-center\">\n                <CardContent className=\"p-4\">\n                  <Heart className=\"h-8 w-8 text-red-500 mx-auto mb-2\" />\n                  <div className=\"text-2xl font-bold text-red-600\">\n                    {entries.filter(e => e.mood >= 8).length}\n                  </div>\n                  <div className=\"text-xs text-gray-600\">Dias felizes</div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Filters */}\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-base flex items-center\">\n                  <Filter className=\"w-4 h-4 mr-2\" />\n                  Filtros\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label className=\"text-sm text-gray-700 mb-2 block\">Humor</Label>\n                    <Select value={filterMood} onValueChange={setFilterMood}>\n                      <SelectTrigger className=\"h-9\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">Todos os humores</SelectItem>\n                        {moods.map((mood) => (\n                          <SelectItem key={mood.value} value={mood.value.toString()}>\n                            <div className=\"flex items-center\">\n                              <span className=\"mr-2\">{mood.emoji}</span>\n                              {mood.label}\n                            </div>\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label className=\"text-sm text-gray-700 mb-2 block\">Emoção</Label>\n                    <Select value={filterEmotion} onValueChange={setFilterEmotion}>\n                      <SelectTrigger className=\"h-9\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">Todas as emoções</SelectItem>\n                        {emotionTags.map((emotion) => (\n                          <SelectItem key={emotion.value} value={emotion.value}>\n                            <div className=\"flex items-center\">\n                              <div \n                                className=\"w-3 h-3 rounded-full mr-2\"\n                                style={{ backgroundColor: emotion.color }}\n                              />\n                              {emotion.label}\n                            </div>\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Writing Prompts */}\n            {currentPrompts.length > 0 && (\n              <Card className=\"bg-gradient-to-r from-amber-50 to-orange-50 border-amber-200\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center text-amber-700\">\n                    <Lightbulb className=\"mr-2 h-5 w-5\" />\n                    Inspiração para Escrever\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-sm text-amber-600 mb-3\">\n                    Baseado na sua semana atual ({weekInfo?.week}ª), aqui estão algumas perguntas para inspirar sua escrita:\n                  </p>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n                    {currentPrompts.map((prompt, index) => (\n                      <Button\n                        key={index}\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => {\n                          setSelectedPrompt(prompt);\n                          setShowAddForm(true);\n                        }}\n                        className=\"text-left justify-start h-auto p-3 bg-white hover:bg-amber-50\"\n                      >\n                        <MessageCircle className=\"w-4 h-4 mr-2 flex-shrink-0 text-amber-500\" />\n                        <span className=\"text-sm text-amber-800\">{prompt}</span>\n                      </Button>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Entries List */}\n            {filteredEntries.length === 0 ? (\n              <Card>\n                <CardContent className=\"text-center py-12\">\n                  <Book className=\"h-16 w-16 mx-auto mb-4 text-gray-400\" />\n                  <h3 className=\"text-lg font-semibold text-gray-800 mb-2\">\n                    {entries.length === 0 ? 'Seu diário está esperando' : 'Nenhuma entrada encontrada'}\n                  </h3>\n                  <p className=\"text-gray-600 mb-4\">\n                    {entries.length === 0 \n                      ? 'Comece a documentar seus sentimentos e experiências' \n                      : 'Ajuste os filtros ou adicione novas entradas'\n                    }\n                  </p>\n                  <Button\n                    onClick={() => setShowAddForm(true)}\n                    className=\"bg-gradient-to-r from-purple-500 to-pink-500 hover:opacity-90\"\n                  >\n                    <Book className=\"mr-2 h-4 w-4\" />\n                    {entries.length === 0 ? 'Primeira entrada' : 'Nova entrada'}\n                  </Button>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"space-y-4\">\n                {filteredEntries\n                  .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())\n                  .map((entry) => (\n                    <Card key={entry.id} className=\"shadow-lg hover:shadow-xl transition-shadow\">\n                      <CardHeader className=\"pb-3\">\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center space-x-2 mb-2\">\n                              <span className=\"text-2xl\">{getMoodEmoji(entry.mood)}</span>\n                              <CardTitle className=\"text-lg text-gray-800\">\n                                {entry.title || \"Entrada do diário\"}\n                              </CardTitle>\n                            </div>\n                            <div className=\"flex items-center space-x-3 text-sm text-gray-600 mb-2\">\n                              <div className=\"flex items-center\">\n                                <CalendarIcon className=\"h-3 w-3 mr-1\" />\n                                {format(new Date(entry.date), \"dd 'de' MMMM 'de' yyyy\", { locale: ptBR })}\n                              </div>\n                              {entry.week && (\n                                <Badge className=\"bg-blue-100 text-blue-700 text-xs\">\n                                  {entry.week}ª semana\n                                </Badge>\n                              )}\n                              <div \n                                className=\"px-2 py-1 rounded text-xs text-white font-medium\"\n                                style={{ backgroundColor: getMoodColor(entry.mood) }}\n                              >\n                                {moods.find(m => m.value === entry.mood)?.label}\n                              </div>\n                            </div>\n                            {entry.milestone && (\n                              <Badge className=\"bg-purple-100 text-purple-700 text-xs mb-2\">\n                                <Sparkles className=\"w-3 h-3 mr-1\" />\n                                {entry.milestone}\n                              </Badge>\n                            )}\n                            {entry.emotions && entry.emotions.length > 0 && (\n                              <div className=\"flex flex-wrap gap-1 mb-2\">\n                                {entry.emotions.map(emotion => {\n                                  const emotionData = emotionTags.find(e => e.value === emotion);\n                                  return emotionData ? (\n                                    <Badge \n                                      key={emotion} \n                                      className=\"text-xs\"\n                                      style={{ \n                                        backgroundColor: emotionData.color + '20',\n                                        color: emotionData.color,\n                                        borderColor: emotionData.color + '40'\n                                      }}\n                                    >\n                                      <Tag className=\"w-3 h-3 mr-1\" />\n                                      {emotionData.label}\n                                    </Badge>\n                                  ) : null;\n                                })}\n                              </div>\n                            )}\n                          </div>\n                          <div className=\"flex space-x-1\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleEdit(entry)}\n                              className=\"text-purple-500 hover:text-purple-700 h-8 w-8\"\n                            >\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => deleteEntryMutation.mutate(entry.id)}\n                              className=\"text-red-500 hover:text-red-700 h-8 w-8\"\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                      </CardHeader>\n                      <CardContent className=\"pt-0\">\n                        <p className=\"text-gray-700 whitespace-pre-wrap leading-relaxed\">\n                          {entry.content}\n                        </p>\n                        {entry.prompts && entry.prompts.length > 0 && (\n                          <div className=\"mt-3 p-2 bg-amber-50 rounded border-l-4 border-amber-300\">\n                            <p className=\"text-xs text-amber-600 italic\">\n                              Inspirado por: \"{entry.prompts[0]}\"\n                            </p>\n                          </div>\n                        )}\n                      </CardContent>\n                    </Card>\n                  ))}\n              </div>\n            )}\n          </TabsContent>\n\n          {/* Mood Analysis Tab */}\n          <TabsContent value=\"mood\" className=\"space-y-6\">\n            {/* Mood Trend Chart */}\n            {moodAnalytics.moodTrendData.length > 0 && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <TrendingUp className=\"mr-2 h-5 w-5 text-blue-500\" />\n                    Evolução do Humor (Últimos 30 dias)\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-64\">\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\n                      <LineChart data={moodAnalytics.moodTrendData}>\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"date\" />\n                        <YAxis domain={[1, 10]} />\n                        <Tooltip \n                          formatter={(value: number, name: string) => [\n                            `${value} - ${moods.find(m => m.value === value)?.label}`, \n                            'Humor'\n                          ]}\n                          labelFormatter={(label) => `Data: ${label}`}\n                        />\n                        <Line \n                          type=\"monotone\" \n                          dataKey=\"mood\" \n                          stroke=\"#8B5CF6\" \n                          strokeWidth={3}\n                          dot={{ fill: '#8B5CF6', strokeWidth: 2, r: 4 }}\n                        />\n                      </LineChart>\n                    </ResponsiveContainer>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Mood Distribution */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <BarChart3 className=\"mr-2 h-5 w-5 text-green-500\" />\n                    Distribuição de Humor\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    {moodAnalytics.moodDistribution.map((item, index) => {\n                      const maxCount = Math.max(...moodAnalytics.moodDistribution.map(d => d.count));\n                      const percentage = (item.count / maxCount) * 100;\n                      \n                      return (\n                        <div key={index} className=\"space-y-2\">\n                          <div className=\"flex justify-between text-sm\">\n                            <span className=\"flex items-center\">\n                              <span className=\"mr-2\">\n                                {moods.find(m => m.label === item.mood)?.emoji}\n                              </span>\n                              {item.mood}\n                            </span>\n                            <span className=\"font-semibold\">{item.count}</span>\n                          </div>\n                          <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                            <div \n                              className=\"h-2 rounded-full transition-all\"\n                              style={{ \n                                width: `${percentage}%`, \n                                backgroundColor: item.color \n                              }}\n                            />\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Tag className=\"mr-2 h-5 w-5 text-purple-500\" />\n                    Emoções Frequentes\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    {moodAnalytics.emotionFrequency.map((emotion, index) => {\n                      const maxCount = Math.max(...moodAnalytics.emotionFrequency.map(e => e.count));\n                      const percentage = (emotion.count / maxCount) * 100;\n                      \n                      return (\n                        <div key={index} className=\"space-y-2\">\n                          <div className=\"flex justify-between text-sm\">\n                            <span className=\"flex items-center\">\n                              <div \n                                className=\"w-3 h-3 rounded-full mr-2\"\n                                style={{ backgroundColor: emotion.color }}\n                              />\n                              {emotion.emotion}\n                            </span>\n                            <span className=\"font-semibold\">{emotion.count}</span>\n                          </div>\n                          <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                            <div \n                              className=\"h-2 rounded-full transition-all\"\n                              style={{ \n                                width: `${percentage}%`, \n                                backgroundColor: emotion.color \n                              }}\n                            />\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Calendar View */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <CalendarIcon className=\"mr-2 h-5 w-5 text-pink-500\" />\n                  Calendário de Humor\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-7 gap-2 mb-4\">\n                  <div className=\"text-center text-sm font-medium text-gray-500\">Dom</div>\n                  <div className=\"text-center text-sm font-medium text-gray-500\">Seg</div>\n                  <div className=\"text-center text-sm font-medium text-gray-500\">Ter</div>\n                  <div className=\"text-center text-sm font-medium text-gray-500\">Qua</div>\n                  <div className=\"text-center text-sm font-medium text-gray-500\">Qui</div>\n                  <div className=\"text-center text-sm font-medium text-gray-500\">Sex</div>\n                  <div className=\"text-center text-sm font-medium text-gray-500\">Sáb</div>\n                </div>\n                \n                <div className=\"grid grid-cols-7 gap-2\">\n                  {calendarData.map((day, index) => (\n                    <div \n                      key={index}\n                      className=\"aspect-square flex items-center justify-center text-xs relative rounded cursor-pointer hover:bg-gray-100\"\n                      style={{\n                        backgroundColor: day.hasEntries && day.averageMood \n                          ? getMoodColor(Math.round(day.averageMood)) + '20' \n                          : 'transparent'\n                      }}\n                    >\n                      <span className=\"text-gray-700\">\n                        {format(day.date, 'd')}\n                      </span>\n                      {day.hasEntries && (\n                        <div \n                          className=\"absolute top-1 right-1 w-2 h-2 rounded-full\"\n                          style={{ \n                            backgroundColor: day.averageMood \n                              ? getMoodColor(Math.round(day.averageMood))\n                              : '#6B7280'\n                          }}\n                        />\n                      )}\n                    </div>\n                  ))}\n                </div>\n                \n                <div className=\"flex items-center justify-center mt-4 space-x-4 text-xs\">\n                  <div className=\"flex items-center space-x-1\">\n                    <div className=\"w-2 h-2 rounded-full bg-red-500\" />\n                    <span>Humor baixo</span>\n                  </div>\n                  <div className=\"flex items-center space-x-1\">\n                    <div className=\"w-2 h-2 rounded-full bg-yellow-500\" />\n                    <span>Humor neutro</span>\n                  </div>\n                  <div className=\"flex items-center space-x-1\">\n                    <div className=\"w-2 h-2 rounded-full bg-green-500\" />\n                    <span>Humor alto</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Milestones Tab */}\n          <TabsContent value=\"milestones\" className=\"space-y-6\">\n            <Card className=\"bg-gradient-to-r from-purple-50 to-pink-50 border-purple-200\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center text-purple-700\">\n                  <Star className=\"mr-2 h-5 w-5\" />\n                  Marcos da Sua Gestação\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-sm text-purple-600\">\n                  Acompanhe e documente os momentos mais importantes da sua jornada.\n                </p>\n              </CardContent>\n            </Card>\n\n            <div className=\"space-y-4\">\n              {Object.entries(milestones).map(([week, milestone]) => {\n                const weekNum = parseInt(week);\n                const hasEntry = entries.some(entry => \n                  entry.week === weekNum || \n                  entry.milestone?.toLowerCase().includes(milestone.toLowerCase())\n                );\n                const entryForMilestone = entries.find(entry => \n                  entry.week === weekNum || \n                  entry.milestone?.toLowerCase().includes(milestone.toLowerCase())\n                );\n                const currentWeek = weekInfo?.week || 0;\n                const isPast = weekNum < currentWeek;\n                const isCurrent = weekNum === currentWeek;\n                const isFuture = weekNum > currentWeek;\n\n                return (\n                  <Card \n                    key={week} \n                    className={`${\n                      hasEntry ? 'bg-green-50 border-green-200' : \n                      isCurrent ? 'bg-blue-50 border-blue-200' :\n                      isPast ? 'bg-gray-50 border-gray-200' :\n                      'bg-white border-gray-200'\n                    }`}\n                  >\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-semibold ${\n                            hasEntry ? 'bg-green-500 text-white' :\n                            isCurrent ? 'bg-blue-500 text-white' :\n                            isPast ? 'bg-gray-400 text-white' :\n                            'bg-gray-200 text-gray-600'\n                          }`}>\n                            {hasEntry ? '✓' : week}\n                          </div>\n                          <div>\n                            <h4 className=\"font-semibold text-gray-800\">{milestone}</h4>\n                            <p className=\"text-sm text-gray-600\">{week}ª semana</p>\n                            {isCurrent && (\n                              <Badge className=\"bg-blue-100 text-blue-700 text-xs mt-1\">\n                                Semana atual\n                              </Badge>\n                            )}\n                            {hasEntry && entryForMilestone && (\n                              <p className=\"text-sm text-green-700 mt-1 italic\">\n                                Documentado em {format(new Date(entryForMilestone.date), 'dd/MM/yyyy')}\n                              </p>\n                            )}\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-2\">\n                          {hasEntry ? (\n                            <>\n                              <Badge className=\"bg-green-100 text-green-700\">\n                                Documentado\n                              </Badge>\n                              {entryForMilestone && (\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"ghost\"\n                                  onClick={() => handleEdit(entryForMilestone)}\n                                  className=\"text-green-600 hover:text-green-800 h-8\"\n                                >\n                                  <Eye className=\"h-4 w-4\" />\n                                </Button>\n                              )}\n                            </>\n                          ) : (\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => {\n                                setFormData(prev => ({ \n                                  ...prev, \n                                  week: week.toString(),\n                                  milestone: milestone\n                                }));\n                                setShowAddForm(true);\n                              }}\n                              className=\"text-xs h-8\"\n                              disabled={isFuture}\n                            >\n                              {isFuture ? 'Em breve' : 'Documentar'}\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n\n            {/* Custom Milestones */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Sparkles className=\"mr-2 h-5 w-5 text-purple-500\" />\n                  Marcos Personalizados\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {entries\n                    .filter(entry => entry.milestone && \n                      !Object.values(milestones).some(m => \n                        m.toLowerCase().includes(entry.milestone!.toLowerCase())\n                      )\n                    )\n                    .map(entry => (\n                      <div key={entry.id} className=\"flex items-center justify-between p-3 bg-purple-50 rounded-lg border border-purple-200\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"w-6 h-6 bg-purple-500 text-white rounded-full flex items-center justify-center text-xs\">\n                            ★\n                          </div>\n                          <div>\n                            <h4 className=\"font-medium text-purple-800\">{entry.milestone}</h4>\n                            <p className=\"text-sm text-purple-600\">\n                              {entry.week && `${entry.week}ª semana • `}\n                              {format(new Date(entry.date), 'dd/MM/yyyy')}\n                            </p>\n                          </div>\n                        </div>\n                        <Button\n                          size=\"sm\"\n                          variant=\"ghost\"\n                          onClick={() => handleEdit(entry)}\n                          className=\"text-purple-600 hover:text-purple-800 h-8\"\n                        >\n                          <Eye className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    ))}\n                    \n                  {entries.filter(entry => entry.milestone && \n                    !Object.values(milestones).some(m => \n                      m.toLowerCase().includes(entry.milestone!.toLowerCase())\n                    )\n                  ).length === 0 && (\n                    <div className=\"text-center py-8 text-gray-500\">\n                      <Sparkles className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n                      <p className=\"text-sm\">Nenhum marco personalizado ainda</p>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        className=\"mt-2\"\n                        onClick={() => setShowAddForm(true)}\n                      >\n                        Criar marco\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Insights Tab */}\n          <TabsContent value=\"insights\" className=\"space-y-6\">\n            {/* Summary Stats */}\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <Card className=\"text-center bg-gradient-to-br from-green-50 to-emerald-50 border-green-200\">\n                <CardContent className=\"p-4\">\n                  <div className=\"text-2xl mb-2\">{getMoodEmoji(Math.round(moodAnalytics.averageMood))}</div>\n                  <div className=\"text-lg font-bold text-green-700\">\n                    {moodAnalytics.averageMood.toFixed(1)}\n                  </div>\n                  <div className=\"text-xs text-green-600\">Humor médio geral</div>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"text-center bg-gradient-to-br from-blue-50 to-cyan-50 border-blue-200\">\n                <CardContent className=\"p-4\">\n                  <Clock className=\"h-6 w-6 text-blue-500 mx-auto mb-2\" />\n                  <div className=\"text-lg font-bold text-blue-700\">\n                    {entries.length > 0 \n                      ? Math.round((entries.length / Math.max(weekInfo?.week || 1, 1)) * 10) / 10 \n                      : 0}\n                  </div>\n                  <div className=\"text-xs text-blue-600\">Entradas por semana</div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"text-center bg-gradient-to-br from-purple-50 to-violet-50 border-purple-200\">\n                <CardContent className=\"p-4\">\n                  <Target className=\"h-6 w-6 text-purple-500 mx-auto mb-2\" />\n                  <div className=\"text-lg font-bold text-purple-700\">\n                    {Object.keys(milestones).filter(week => \n                      entries.some(entry => entry.week === parseInt(week))\n                    ).length}\n                  </div>\n                  <div className=\"text-xs text-purple-600\">Marcos documentados</div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"text-center bg-gradient-to-br from-pink-50 to-rose-50 border-pink-200\">\n                <CardContent className=\"p-4\">\n                  <Heart className=\"h-6 w-6 text-pink-500 mx-auto mb-2\" />\n                  <div className=\"text-lg font-bold text-pink-700\">\n                    {entries.filter(entry => entry.mood >= 8).length}\n                  </div>\n                  <div className=\"text-xs text-pink-600\">Dias muito felizes</div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Insights Cards */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center text-amber-700\">\n                    <Sun className=\"mr-2 h-5 w-5\" />\n                    Padrões Positivos\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    {moodAnalytics.averageMood >= 7 && (\n                      <div className=\"flex items-start space-x-2\">\n                        <div className=\"w-2 h-2 bg-green-500 rounded-full mt-2 flex-shrink-0\" />\n                        <p className=\"text-sm text-green-700\">\n                          Seu humor médio está muito bom ({moodAnalytics.averageMood.toFixed(1)})! \n                          Continue cultivando essa energia positiva.\n                        </p>\n                      </div>\n                    )}\n                    \n                    {entries.filter(e => e.emotions.includes('gratidao')).length > 2 && (\n                      <div className=\"flex items-start space-x-2\">\n                        <div className=\"w-2 h-2 bg-purple-500 rounded-full mt-2 flex-shrink-0\" />\n                        <p className=\"text-sm text-purple-700\">\n                          Você expressa gratidão com frequência! Isso é ótimo para o bem-estar emocional.\n                        </p>\n                      </div>\n                    )}\n                    \n                    {moodAnalytics.entriesThisWeek >= 2 && (\n                      <div className=\"flex items-start space-x-2\">\n                        <div className=\"w-2 h-2 bg-blue-500 rounded-full mt-2 flex-shrink-0\" />\n                        <p className=\"text-sm text-blue-700\">\n                          Você tem sido consistente com o diário! Isso ajuda muito no autoconhecimento.\n                        </p>\n                      </div>\n                    )}\n\n                    {entries.filter(e => e.milestone).length > 3 && (\n                      <div className=\"flex items-start space-x-2\">\n                        <div className=\"w-2 h-2 bg-indigo-500 rounded-full mt-2 flex-shrink-0\" />\n                        <p className=\"text-sm text-indigo-700\">\n                          Você está documentando bem os marcos importantes. Que memórias preciosas!\n                        </p>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center text-blue-700\">\n                    <CloudRain className=\"mr-2 h-5 w-5\" />\n                    Áreas de Atenção\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    {moodAnalytics.averageMood < 5 && (\n                      <div className=\"flex items-start space-x-2\">\n                        <div className=\"w-2 h-2 bg-red-500 rounded-full mt-2 flex-shrink-0\" />\n                        <p className=\"text-sm text-red-700\">\n                          Seu humor tem estado baixo. Considere conversar com seu médico ou um profissional de saúde mental.\n                        </p>\n                      </div>\n                    )}\n                    \n                    {entries.filter(e => e.emotions.includes('ansiedade')).length > entries.length * 0.6 && (\n                      <div className=\"flex items-start space-x-2\">\n                        <div className=\"w-2 h-2 bg-orange-500 rounded-full mt-2 flex-shrink-0\" />\n                        <p className=\"text-sm text-orange-700\">\n                          A ansiedade aparece frequentemente. Técnicas de respiração e conversar com profissionais pode ajudar.\n                        </p>\n                      </div>\n                    )}\n                    \n                    {moodAnalytics.entriesThisWeek === 0 && entries.length > 0 && (\n                      <div className=\"flex items-start space-x-2\">\n                        <div className=\"w-2 h-2 bg-yellow-500 rounded-full mt-2 flex-shrink-0\" />\n                        <p className=\"text-sm text-yellow-700\">\n                          Você não escreveu esta semana. Que tal dedicar alguns minutos para registrar seus sentimentos?\n                        </p>\n                      </div>\n                    )}\n\n                    {entries.length > 0 && entries.filter(e => e.emotions.includes('medo')).length > entries.length * 0.4 && (\n                      <div className=\"flex items-start space-x-2\">\n                        <div className=\"w-2 h-2 bg-purple-500 rounded-full mt-2 flex-shrink-0\" />\n                        <p className=\"text-sm text-purple-700\">\n                          É normal sentir medo durante a gestação. Compartilhe seus sentimentos com pessoas de confiança.\n                        </p>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Recommendations */}\n            <Card className=\"bg-gradient-to-r from-indigo-50 to-purple-50 border-indigo-200\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center text-indigo-700\">\n                  <Lightbulb className=\"mr-2 h-5 w-5\" />\n                  Recomendações Personalizadas\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <h4 className=\"font-medium text-indigo-800 mb-2\">Para melhorar o bem-estar:</h4>\n                    <ul className=\"space-y-1 text-sm text-indigo-700\">\n                      <li className=\"flex items-start space-x-2\">\n                        <span className=\"text-indigo-400 mt-1\">•</span>\n                        <span>Escreva pelo menos 3x por semana</span>\n                      </li>\n                      <li className=\"flex items-start space-x-2\">\n                        <span className=\"text-indigo-400 mt-1\">•</span>\n                        <span>Use os prompts de escrita quando não souber o que escrever</span>\n                      </li>\n                      <li className=\"flex items-start space-x-2\">\n                        <span className=\"text-indigo-400 mt-1\">•</span>\n                        <span>Documente os marcos importantes</span>\n                      </li>\n                      <li className=\"flex items-start space-x-2\">\n                        <span className=\"text-indigo-400 mt-1\">•</span>\n                        <span>Pratique gratidão - anote 3 coisas pelas quais é grata</span>\n                      </li>\n                    </ul>\n                  </div>\n                  \n                  <div>\n                    <h4 className=\"font-medium text-indigo-800 mb-2\">Temas para explorar:</h4>\n                    <ul className=\"space-y-1 text-sm text-indigo-700\">\n                      <li className=\"flex items-start space-x-2\">\n                        <span className=\"text-indigo-400 mt-1\">•</span>\n                        <span>Suas esperanças para o futuro com o bebê</span>\n                      </li>\n                      <li className=\"flex items-start space-x-2\">\n                        <span className=\"text-indigo-400 mt-1\">•</span>\n                        <span>Mudanças que você tem percebido em si</span>\n                      </li>\n                      <li className=\"flex items-start space-x-2\">\n                        <span className=\"text-indigo-400 mt-1\">•</span>\n                        <span>Memórias que quer compartilhar com seu bebê</span>\n                      </li>\n                      <li className=\"flex items-start space-x-2\">\n                        <span className=\"text-indigo-400 mt-1\">•</span>\n                        <span>Preparativos e planos para a chegada do bebê</span>\n                      </li>\n                    </ul>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      {/* Add/Edit Entry Modal */}\n      {showAddForm && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50\">\n          <Card className=\"w-full max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <CardHeader>\n              <CardTitle className=\"text-gray-800\">\n                {editingEntry ? \"Editar Entrada\" : \"Nova Entrada\"}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                {selectedPrompt && (\n                  <div className=\"p-3 bg-amber-50 border border-amber-200 rounded-lg\">\n                    <p className=\"text-sm text-amber-700 font-medium mb-1\">Inspiração:</p>\n                    <p className=\"text-sm text-amber-600 italic\">\"{selectedPrompt}\"</p>\n                  </div>\n                )}\n                \n                <div>\n                  <Label htmlFor=\"title\" className=\"text-gray-700 font-medium\">\n                    Título (opcional)\n                  </Label>\n                  <Input\n                    id=\"title\"\n                    placeholder=\"Ex: Um dia especial\"\n                    value={formData.title}\n                    onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"content\" className=\"text-gray-700 font-medium\">\n                    Conteúdo *\n                  </Label>\n                  <Textarea\n                    id=\"content\"\n                    placeholder=\"Descreva seus sentimentos, experiências ou reflexões...\"\n                    value={formData.content}\n                    onChange={(e) => setFormData(prev => ({ ...prev, content: e.target.value }))}\n                    className=\"h-32 resize-none\"\n                    required\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label className=\"text-gray-700 font-medium mb-2 block\">\n                      Como você se sente? (1-10)\n                    </Label>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center justify-center space-x-2\">\n                        <span className=\"text-3xl\">{getMoodEmoji(formData.mood)}</span>\n                        <div className=\"text-center\">\n                          <div className=\"text-lg font-bold\" style={{ color: getMoodColor(formData.mood) }}>\n                            {formData.mood}\n                          </div>\n                          <div className=\"text-xs text-gray-600\">\n                            {moods.find(m => m.value === formData.mood)?.label}\n                          </div>\n                        </div>\n                      </div>\n                      <input\n                        type=\"range\"\n                        min=\"1\"\n                        max=\"10\"\n                        value={formData.mood}\n                        onChange={(e) => setFormData(prev => ({ ...prev, mood: parseInt(e.target.value) }))}\n                        className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer\"\n                        style={{\n                          background: `linear-gradient(to right, #DC2626 0%, #F59E0B 20%, #10B981 50%, #3B82F6 70%, #8B5CF6 100%)`\n                        }}\n                      />\n                      <div className=\"flex justify-between text-xs text-gray-500\">\n                        <span>😭</span>\n                        <span>😐</span>\n                        <span>🤩</span>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label className=\"text-gray-700 font-medium\">\n                      Semana da gestação\n                    </Label>\n                    <Select \n                      value={formData.week} \n                      onValueChange={(value) => setFormData(prev => ({ ...prev, week: value }))}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder={weekInfo ? `${weekInfo.week}ª semana (atual)` : \"Selecione a semana\"} />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {Array.from({ length: 40 }, (_, i) => i + 1).map(week => (\n                          <SelectItem key={week} value={week.toString()}>\n                            {week}ª semana\n                            {milestones[week as keyof typeof milestones] && (\n                              <span className=\"ml-2 text-purple-600\">\n                                • {milestones[week as keyof typeof milestones]}\n                              </span>\n                            )}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div>\n                  <Label className=\"text-gray-700 font-medium mb-2 block\">\n                    Emoções (selecione as que se aplicam)\n                  </Label>\n                  <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2\">\n                    {emotionTags.map(emotion => (\n                      <Button\n                        key={emotion.value}\n                        type=\"button\"\n                        variant={formData.emotions.includes(emotion.value) ? \"default\" : \"outline\"}\n                        size=\"sm\"\n                        onClick={() => toggleEmotion(emotion.value)}\n                        className={`justify-start h-8 ${\n                          formData.emotions.includes(emotion.value) \n                            ? 'text-white' \n                            : ''\n                        }`}\n                        style={formData.emotions.includes(emotion.value) ? {\n                          backgroundColor: emotion.color,\n                          borderColor: emotion.color\n                        } : {}}\n                      >\n                        <Tag className=\"w-3 h-3 mr-1\" />\n                        {emotion.label}\n                      </Button>\n                    ))}\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"milestone\" className=\"text-gray-700 font-medium\">\n                    Marco especial (opcional)\n                  </Label>\n                  <Input\n                    id=\"milestone\"\n                    placeholder=\"Ex: Primeira consulta, ultrassom 3D...\"\n                    value={formData.milestone}\n                    onChange={(e) => setFormData(prev => ({ ...prev, milestone: e.target.value }))}\n                  />\n                </div>\n                \n                <div className=\"flex space-x-3 pt-4\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\"\n                    onClick={handleCloseForm}\n                    className=\"flex-1\"\n                  >\n                    Cancelar\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    className=\"flex-1 bg-gradient-to-r from-purple-500 to-pink-500 hover:opacity-90\"\n                    disabled={addEntryMutation.isPending || updateEntryMutation.isPending}\n                  >\n                    {(addEntryMutation.isPending || updateEntryMutation.isPending) ? (\n                      <LoadingSpinner size=\"sm\" className=\"mr-2\" />\n                    ) : (\n                      <Book className=\"mr-2 h-4 w-4\" />\n                    )}\n                    {editingEntry ? \"Atualizar\" : \"Salvar\"}\n                  </Button>\n                </div>\n              </form>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      <BottomNavigation />\n    </div>\n  );\n}","size_bytes":65514},"client/src/pages/exercises.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport BottomNavigation from \"@/components/layout/bottom-navigation\";\nimport { ArrowLeft, Play, Clock, Target, AlertTriangle, Heart } from \"lucide-react\";\n\nconst exercises = [\n  {\n    id: 1,\n    title: \"Caminhada Leve\",\n    duration: \"20-30 min\",\n    trimester: \"Todos\",\n    difficulty: \"Fácil\",\n    benefits: [\"Melhora circulação\", \"Fortalece coração\", \"Reduz inchaço\"],\n    instructions: [\n      \"Use calçados confortáveis\",\n      \"Mantenha ritmo moderado\",\n      \"Hidrate-se bem\",\n      \"Pare se sentir desconforto\"\n    ],\n    precautions: \"Evite terrenos irregulares e clima muito quente\"\n  },\n  {\n    id: 2,\n    title: \"Exercícios de Respiração\",\n    duration: \"10-15 min\",\n    trimester: \"Todos\",\n    difficulty: \"Fácil\",\n    benefits: [\"Reduz ansiedade\", \"Melhora oxigenação\", \"Prepara para o parto\"],\n    instructions: [\n      \"Sente-se confortavelmente\",\n      \"Inspire pelo nariz (4 segundos)\",\n      \"Expire pela boca (6 segundos)\",\n      \"Repita 10 vezes\"\n    ],\n    precautions: \"Pare se sentir tontura\"\n  },\n  {\n    id: 3,\n    title: \"Alongamento Suave\",\n    duration: \"15-20 min\",\n    trimester: \"Todos\",\n    difficulty: \"Fácil\",\n    benefits: [\"Alivia tensões\", \"Melhora flexibilidade\", \"Reduz dores nas costas\"],\n    instructions: [\n      \"Movimentos lentos e controlados\",\n      \"Segure cada posição por 30 segundos\",\n      \"Respire profundamente\",\n      \"Não force os movimentos\"\n    ],\n    precautions: \"Evite alongamentos excessivos\"\n  },\n  {\n    id: 4,\n    title: \"Exercícios de Kegel\",\n    duration: \"5-10 min\",\n    trimester: \"Todos\",\n    difficulty: \"Fácil\",\n    benefits: [\"Fortalece assoalho pélvico\", \"Previne incontinência\", \"Facilita parto\"],\n    instructions: [\n      \"Contraia músculos do assoalho pélvico\",\n      \"Mantenha por 5 segundos\",\n      \"Relaxe por 5 segundos\",\n      \"Repita 10-15 vezes\"\n    ],\n    precautions: \"Não contraia abdômen ou glúteos\"\n  },\n  {\n    id: 5,\n    title: \"Yoga Pré-natal\",\n    duration: \"30-45 min\",\n    trimester: \"2º e 3º\",\n    difficulty: \"Moderado\",\n    benefits: [\"Reduz estresse\", \"Melhora postura\", \"Aumenta flexibilidade\"],\n    instructions: [\n      \"Use acessórios de apoio\",\n      \"Evite posições invertidas\",\n      \"Mantenha respiração constante\",\n      \"Ouça seu corpo\"\n    ],\n    precautions: \"Procure instrutor especializado em gestantes\"\n  },\n  {\n    id: 6,\n    title: \"Natação\",\n    duration: \"20-30 min\",\n    trimester: \"Todos\",\n    difficulty: \"Moderado\",\n    benefits: [\"Exercício completo\", \"Reduz peso corporal\", \"Alivia dores articulares\"],\n    instructions: [\n      \"Mantenha ritmo confortável\",\n      \"Evite mergulhos\",\n      \"Use piscina aquecida\",\n      \"Hidrate-se mesmo na água\"\n    ],\n    precautions: \"Evite piscinas com muita gente e cloro excessivo\"\n  }\n];\n\nconst generalTips = [\n  \"Sempre consulte seu médico antes de iniciar exercícios\",\n  \"Pare imediatamente se sentir dor, tontura ou falta de ar\",\n  \"Mantenha-se hidratada durante os exercícios\",\n  \"Use roupas confortáveis e calçados adequados\",\n  \"Evite exercícios em posição supina após o 1º trimestre\",\n  \"Ouça sempre os sinais do seu corpo\"\n];\n\nexport default function Exercises() {\n  const [, setLocation] = useLocation();\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case \"Fácil\": return \"text-green-600 bg-green-100\";\n      case \"Moderado\": return \"text-yellow-600 bg-yellow-100\";\n      case \"Difícil\": return \"text-red-600 bg-red-100\";\n      default: return \"text-gray-600 bg-gray-100\";\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-baby-pink via-cream to-baby-blue pb-20\">\n      <div className=\"p-4 pt-12\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <Button \n            variant=\"ghost\" \n            size=\"icon\"\n            className=\"rounded-full bg-white shadow-lg\"\n            onClick={() => setLocation(\"/\")}\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"h-5 w-5 text-charcoal\" />\n          </Button>\n          <h2 className=\"text-xl font-bold text-charcoal\" data-testid=\"text-page-title\">\n            Exercícios\n          </h2>\n          <div className=\"w-10\" />\n        </div>\n\n        {/* Safety Tips */}\n        <Card className=\"shadow-lg mb-6 border-l-4 border-red-500\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center text-charcoal\">\n              <AlertTriangle className=\"mr-2 h-5 w-5 text-red-500\" />\n              Dicas Importantes\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              {generalTips.map((tip, index) => (\n                <div key={index} className=\"flex items-start space-x-2\" data-testid={`tip-${index}`}>\n                  <div className=\"w-2 h-2 bg-red-500 rounded-full mt-2 flex-shrink-0\" />\n                  <span className=\"text-sm text-gray-700\">{tip}</span>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Exercises */}\n        <div className=\"space-y-4\">\n          {exercises.map((exercise) => (\n            <Card key={exercise.id} className=\"shadow-lg\" data-testid={`exercise-${exercise.id}`}>\n              <CardHeader>\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <CardTitle className=\"text-lg text-charcoal mb-2\">\n                      {exercise.title}\n                    </CardTitle>\n                    <div className=\"flex items-center space-x-3 text-sm\">\n                      <div className=\"flex items-center text-gray-600\">\n                        <Clock className=\"h-3 w-3 mr-1\" />\n                        {exercise.duration}\n                      </div>\n                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${getDifficultyColor(exercise.difficulty)}`}>\n                        {exercise.difficulty}\n                      </span>\n                      <span className=\"text-baby-pink-dark font-medium\">\n                        {exercise.trimester} trimestre(s)\n                      </span>\n                    </div>\n                  </div>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"text-baby-pink-dark hover:text-baby-pink-dark\"\n                    data-testid={`button-start-${exercise.id}`}\n                  >\n                    <Play className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {/* Benefits */}\n                <div>\n                  <h4 className=\"font-semibold text-charcoal mb-2 flex items-center\">\n                    <Heart className=\"h-4 w-4 mr-1 text-baby-pink-dark\" />\n                    Benefícios\n                  </h4>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {exercise.benefits.map((benefit, index) => (\n                      <span \n                        key={index}\n                        className=\"px-2 py-1 bg-baby-pink/20 text-baby-pink-dark text-xs rounded-full\"\n                        data-testid={`benefit-${exercise.id}-${index}`}\n                      >\n                        {benefit}\n                      </span>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Instructions */}\n                <div>\n                  <h4 className=\"font-semibold text-charcoal mb-2 flex items-center\">\n                    <Target className=\"h-4 w-4 mr-1 text-baby-blue-dark\" />\n                    Como fazer\n                  </h4>\n                  <div className=\"space-y-1\">\n                    {exercise.instructions.map((instruction, index) => (\n                      <div \n                        key={index} \n                        className=\"flex items-start space-x-2\"\n                        data-testid={`instruction-${exercise.id}-${index}`}\n                      >\n                        <span className=\"text-baby-blue-dark font-bold text-sm mt-0.5\">\n                          {index + 1}.\n                        </span>\n                        <span className=\"text-sm text-gray-700\">{instruction}</span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Precautions */}\n                <div className=\"bg-yellow-50 p-3 rounded-lg border border-yellow-200\">\n                  <h4 className=\"font-semibold text-yellow-800 mb-1 flex items-center\">\n                    <AlertTriangle className=\"h-3 w-3 mr-1\" />\n                    Precauções\n                  </h4>\n                  <p className=\"text-sm text-yellow-700\" data-testid={`precaution-${exercise.id}`}>\n                    {exercise.precautions}\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n\n      <BottomNavigation />\n    </div>\n  );\n}\n","size_bytes":9260},"client/src/pages/kick-counter.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { usePregnancy } from \"@/hooks/use-pregnancy\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { LoadingSpinner } from \"@/components/ui/loading-spinner\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  ArrowLeft, \n  HandMetal, \n  Activity, \n  Clock, \n  TrendingUp, \n  BarChart3, \n  Zap,\n  Heart,\n  Target,\n  Timer,\n  Calendar,\n  Award,\n  Baby\n} from \"lucide-react\";\nimport { \n  LineChart, \n  Line, \n  XAxis, \n  YAxis, \n  CartesianGrid, \n  Tooltip, \n  ResponsiveContainer,\n  AreaChart,\n  Area\n} from 'recharts';\n\ninterface KickRecord {\n  id: string;\n  time: string;\n  type: 'kick' | 'punch' | 'roll' | 'hiccup';\n  intensity: 'light' | 'medium' | 'strong';\n  date: string;\n}\n\ninterface KickData {\n  count: number;\n  records: KickRecord[];\n}\n\nexport default function KickCounter() {\n  const [kicks, setKicks] = useState<KickRecord[]>([]);\n  const [isAnimating, setIsAnimating] = useState(false);\n  const [lastKickTime, setLastKickTime] = useState<Date | null>(null);\n  const [timeSinceLastKick, setTimeSinceLastKick] = useState<string>('');\n  const [sessionStarted, setSessionStarted] = useState(false);\n  const [sessionKicks, setSessionKicks] = useState(0);\n  const [selectedType, setSelectedType] = useState<'kick' | 'punch' | 'roll' | 'hiccup'>('kick');\n  const [selectedIntensity, setSelectedIntensity] = useState<'light' | 'medium' | 'strong'>('medium');\n  \n  const { user } = useAuth();\n  const { pregnancy } = usePregnancy();\n  const [, setLocation] = useLocation();\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const { data: kickData, isLoading } = useQuery<KickData>({\n    queryKey: [\"/api/kick-counts\", pregnancy?.id],\n    enabled: !!pregnancy,\n    queryFn: () => {\n      // Mock data for now - replace with actual API call\n      const mockData: KickData = {\n        count: Math.floor(Math.random() * 20) + 5,\n        records: Array.from({ length: 10 }, (_, i) => ({\n          id: `kick-${i}`,\n          time: new Date(Date.now() - i * 60000 * Math.random() * 60).toISOString(),\n          type: ['kick', 'punch', 'roll', 'hiccup'][Math.floor(Math.random() * 4)] as any,\n          intensity: ['light', 'medium', 'strong'][Math.floor(Math.random() * 3)] as any,\n          date: new Date().toISOString().split('T')[0]\n        }))\n      };\n      return Promise.resolve(mockData);\n    },\n  });\n\n  // Timer effect for tracking time since last kick\n  useEffect(() => {\n    let interval: NodeJS.Timeout;\n    \n    if (lastKickTime) {\n      interval = setInterval(() => {\n        const now = new Date();\n        const diffMs = now.getTime() - lastKickTime.getTime();\n        const diffMinutes = Math.floor(diffMs / (1000 * 60));\n        \n        if (diffMinutes < 60) {\n          setTimeSinceLastKick(`${diffMinutes} min atrás`);\n        } else {\n          const diffHours = Math.floor(diffMinutes / 60);\n          const remainingMinutes = diffMinutes % 60;\n          setTimeSinceLastKick(`${diffHours}h ${remainingMinutes}m atrás`);\n        }\n      }, 1000);\n    }\n\n    return () => {\n      if (interval) clearInterval(interval);\n    };\n  }, [lastKickTime]);\n\n  const recordKickMutation = useMutation({\n    mutationFn: async () => {\n      const now = new Date();\n      const response = await apiRequest(\"POST\", \"/api/kick-counts\", {\n        pregnancyId: pregnancy!.id,\n        date: now.toISOString(),\n        type: selectedType,\n        intensity: selectedIntensity,\n        count: 1,\n        times: [now.toTimeString().slice(0, 5)],\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      const now = new Date();\n      const newKick: KickRecord = {\n        id: `local-${Date.now()}`,\n        time: now.toTimeString().slice(0, 5),\n        type: selectedType,\n        intensity: selectedIntensity,\n        date: now.toISOString().split('T')[0]\n      };\n      \n      setKicks(prev => [newKick, ...prev.slice(0, 9)]);\n      setLastKickTime(now);\n      setSessionKicks(prev => prev + 1);\n      \n      if (!sessionStarted) {\n        setSessionStarted(true);\n      }\n\n      // Trigger animation\n      setIsAnimating(true);\n      setTimeout(() => setIsAnimating(false), 600);\n\n      queryClient.invalidateQueries({ queryKey: [\"/api/kick-counts\", pregnancy?.id] });\n      \n      const typeEmoji = {\n        kick: '👶',\n        punch: '👊', \n        roll: '🔄',\n        hiccup: '🤭'\n      };\n      \n      toast({\n        title: `${typeEmoji[selectedType]} Movimento registrado!`,\n        description: `${selectedType.charAt(0).toUpperCase() + selectedType.slice(1)} ${selectedIntensity} às ${now.toTimeString().slice(0, 5)}`,\n      });\n    },\n  });\n\n  if (!user || !pregnancy) {\n    setLocation(\"/login\");\n    return null;\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <LoadingSpinner size=\"lg\" />\n      </div>\n    );\n  }\n\n  const todayCount = (kickData?.count || 0) + kicks.length;\n  const recentKicks = kicks.slice(0, 5);\n  \n  // Generate mock weekly data for chart\n  const weeklyData = Array.from({ length: 7 }, (_, i) => ({\n    day: ['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sáb'][i],\n    kicks: Math.floor(Math.random() * 25) + 5,\n    date: new Date(Date.now() - (6 - i) * 24 * 60 * 60 * 1000).toLocaleDateString('pt-BR', { \n      month: 'short', \n      day: 'numeric' \n    })\n  }));\n\n  // Movement type data\n  const movementTypes = [\n    { type: 'kick', label: 'Chutes', icon: '🦶', color: '#EC4899' },\n    { type: 'punch', label: 'Socos', icon: '👊', color: '#3B82F6' },\n    { type: 'roll', label: 'Viradas', icon: '🔄', color: '#8B5CF6' },\n    { type: 'hiccup', label: 'Soluços', icon: '🤭', color: '#10B981' },\n  ];\n\n  const intensityOptions = [\n    { level: 'light', label: 'Leve', color: '#FEF3C7' },\n    { level: 'medium', label: 'Médio', color: '#FCD34D' },\n    { level: 'strong', label: 'Forte', color: '#F59E0B' },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-pink-50 via-white to-blue-50 pb-20\">\n      <div className=\"p-4 pt-8\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <Button \n            variant=\"ghost\" \n            size=\"icon\"\n            className=\"rounded-full bg-white shadow-lg\"\n            onClick={() => setLocation(\"/\")}\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"h-5 w-5 text-gray-700\" />\n          </Button>\n          <h1 className=\"text-2xl font-bold text-gray-800\">Contador de Movimentos</h1>\n          <div className=\"w-10\" />\n        </div>\n\n        <Tabs defaultValue=\"counter\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3 mb-6\">\n            <TabsTrigger value=\"counter\" className=\"flex items-center\">\n              <Baby className=\"w-4 h-4 mr-2\" />\n              Contador\n            </TabsTrigger>\n            <TabsTrigger value=\"stats\" className=\"flex items-center\">\n              <BarChart3 className=\"w-4 h-4 mr-2\" />\n              Estatísticas\n            </TabsTrigger>\n            <TabsTrigger value=\"history\" className=\"flex items-center\">\n              <Clock className=\"w-4 h-4 mr-2\" />\n              Histórico\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Counter Tab */}\n          <TabsContent value=\"counter\" className=\"space-y-6\">\n            {/* Main Counter Circle */}\n            <div className=\"text-center\">\n              <div className={`\n                w-48 h-48 mx-auto bg-gradient-to-br from-white to-pink-50 \n                rounded-full shadow-2xl flex items-center justify-center mb-6\n                transition-all duration-500 border-4\n                ${isAnimating ? 'scale-110 border-pink-300 shadow-pink-200/50' : 'scale-100 border-gray-200/50'}\n              `}>\n                <div className=\"text-center\">\n                  <div className={`\n                    text-5xl font-bold transition-all duration-300\n                    ${todayCount > 10 ? 'text-green-500' : todayCount > 5 ? 'text-blue-500' : 'text-pink-500'}\n                  `} data-testid=\"text-kick-count\">\n                    {todayCount}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">movimentos hoje</div>\n                  {lastKickTime && (\n                    <div className=\"text-xs text-gray-500 mt-1 flex items-center justify-center\">\n                      <Timer className=\"w-3 h-3 mr-1\" />\n                      {timeSinceLastKick}\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* Session Info */}\n              {sessionStarted && (\n                <Card className=\"mb-4 bg-blue-50 border-blue-200\">\n                  <CardContent className=\"p-4 text-center\">\n                    <div className=\"flex items-center justify-center space-x-4 text-sm\">\n                      <div className=\"flex items-center\">\n                        <Zap className=\"w-4 h-4 mr-1 text-blue-500\" />\n                        <span className=\"font-medium\">Sessão ativa</span>\n                      </div>\n                      <div className=\"flex items-center\">\n                        <Target className=\"w-4 h-4 mr-1 text-green-500\" />\n                        <span>{sessionKicks} movimentos</span>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n\n            {/* Movement Type Selection */}\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-base flex items-center\">\n                  <Activity className=\"w-4 h-4 mr-2\" />\n                  Tipo de Movimento\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-2 gap-3 mb-4\">\n                  {movementTypes.map((movement) => (\n                    <Button\n                      key={movement.type}\n                      variant={selectedType === movement.type ? \"default\" : \"outline\"}\n                      className={`\n                        p-4 h-auto flex flex-col items-center space-y-2 transition-all\n                        ${selectedType === movement.type ? 'bg-gradient-to-r from-pink-500 to-blue-500 text-white' : ''}\n                      `}\n                      onClick={() => setSelectedType(movement.type as any)}\n                    >\n                      <span className=\"text-2xl\">{movement.icon}</span>\n                      <span className=\"text-sm font-medium\">{movement.label}</span>\n                    </Button>\n                  ))}\n                </div>\n\n                {/* Intensity Selection */}\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium text-gray-700\">Intensidade</label>\n                  <div className=\"flex space-x-2\">\n                    {intensityOptions.map((intensity) => (\n                      <Button\n                        key={intensity.level}\n                        variant={selectedIntensity === intensity.level ? \"default\" : \"outline\"}\n                        size=\"sm\"\n                        className={`\n                          flex-1 transition-all\n                          ${selectedIntensity === intensity.level ? 'bg-orange-500 text-white' : ''}\n                        `}\n                        onClick={() => setSelectedIntensity(intensity.level as any)}\n                      >\n                        {intensity.label}\n                      </Button>\n                    ))}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Record Button */}\n            <div className=\"px-2\">\n              <Button \n                className={`\n                  w-full py-6 text-lg font-bold rounded-2xl shadow-xl \n                  transform transition-all duration-200 text-white\n                  bg-gradient-to-r from-pink-500 via-purple-500 to-blue-500\n                  hover:scale-105 active:scale-95 disabled:opacity-50\n                  ${isAnimating ? 'animate-pulse scale-105' : ''}\n                `}\n                onClick={() => recordKickMutation.mutate()}\n                disabled={recordKickMutation.isPending}\n                data-testid=\"button-record-kick\"\n              >\n                {recordKickMutation.isPending ? (\n                  <LoadingSpinner size=\"sm\" className=\"mr-2\" />\n                ) : (\n                  <div className=\"flex items-center justify-center\">\n                    <span className=\"text-2xl mr-2\">\n                      {movementTypes.find(m => m.type === selectedType)?.icon}\n                    </span>\n                    Registrar {movementTypes.find(m => m.type === selectedType)?.label}\n                  </div>\n                )}\n              </Button>\n            </div>\n\n            {/* Recent Kicks */}\n            {recentKicks.length > 0 && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-base flex items-center\">\n                    <Clock className=\"w-4 h-4 mr-2\" />\n                    Últimos Movimentos\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    {recentKicks.map((kick, index) => (\n                      <div key={kick.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                        <div className=\"flex items-center space-x-3\">\n                          <span className=\"text-xl\">\n                            {movementTypes.find(m => m.type === kick.type)?.icon}\n                          </span>\n                          <div>\n                            <div className=\"text-sm font-medium\">{kick.time}</div>\n                            <div className=\"text-xs text-gray-500\">\n                              {movementTypes.find(m => m.type === kick.type)?.label} • {\n                                intensityOptions.find(i => i.level === kick.intensity)?.label\n                              }\n                            </div>\n                          </div>\n                        </div>\n                        <Badge \n                          variant=\"secondary\"\n                          className={`\n                            ${kick.intensity === 'strong' ? 'bg-orange-100 text-orange-700' :\n                              kick.intensity === 'medium' ? 'bg-yellow-100 text-yellow-700' :\n                              'bg-green-100 text-green-700'}\n                          `}\n                        >\n                          {intensityOptions.find(i => i.level === kick.intensity)?.label}\n                        </Badge>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </TabsContent>\n\n          {/* Statistics Tab */}\n          <TabsContent value=\"stats\" className=\"space-y-6\">\n            {/* Today's Stats */}\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <Card className=\"text-center\">\n                <CardContent className=\"p-4\">\n                  <div className=\"text-2xl font-bold text-blue-600\">{todayCount}</div>\n                  <div className=\"text-xs text-gray-600\">Hoje</div>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"text-center\">\n                <CardContent className=\"p-4\">\n                  <div className=\"text-2xl font-bold text-green-600\">\n                    {Math.floor(Math.random() * 50) + 100}\n                  </div>\n                  <div className=\"text-xs text-gray-600\">Esta Semana</div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"text-center\">\n                <CardContent className=\"p-4\">\n                  <div className=\"text-2xl font-bold text-purple-600\">\n                    {sessionKicks}\n                  </div>\n                  <div className=\"text-xs text-gray-600\">Sessão Atual</div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"text-center\">\n                <CardContent className=\"p-4\">\n                  <div className=\"text-2xl font-bold text-orange-600\">\n                    {Math.floor(todayCount / 24 * 10) / 10}\n                  </div>\n                  <div className=\"text-xs text-gray-600\">Média/Hora</div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Weekly Chart */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <TrendingUp className=\"w-4 h-4 mr-2\" />\n                  Atividade Semanal\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-64\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <AreaChart data={weeklyData}>\n                      <defs>\n                        <linearGradient id=\"kickGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                          <stop offset=\"5%\" stopColor=\"#EC4899\" stopOpacity={0.8}/>\n                          <stop offset=\"95%\" stopColor=\"#EC4899\" stopOpacity={0.1}/>\n                        </linearGradient>\n                      </defs>\n                      <XAxis dataKey=\"day\" />\n                      <YAxis />\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <Tooltip \n                        formatter={(value: number) => [`${value} movimentos`, 'Total']}\n                        labelFormatter={(day) => `${day}`}\n                      />\n                      <Area \n                        type=\"monotone\" \n                        dataKey=\"kicks\" \n                        stroke=\"#EC4899\" \n                        fillOpacity={1} \n                        fill=\"url(#kickGradient)\" \n                      />\n                    </AreaChart>\n                  </ResponsiveContainer>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* History Tab */}\n          <TabsContent value=\"history\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Calendar className=\"w-4 h-4 mr-2\" />\n                  Histórico Completo\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {kicks.concat(kickData?.records || []).slice(0, 20).map((kick, index) => (\n                    <div key={`${kick.id}-${index}`} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div className=\"flex items-center space-x-4\">\n                        <span className=\"text-2xl\">\n                          {movementTypes.find(m => m.type === kick.type)?.icon}\n                        </span>\n                        <div>\n                          <div className=\"font-medium\">\n                            {movementTypes.find(m => m.type === kick.type)?.label}\n                          </div>\n                          <div className=\"text-sm text-gray-600\">\n                            {new Date(kick.time).toLocaleString('pt-BR')} • {\n                              intensityOptions.find(i => i.level === kick.intensity)?.label\n                            }\n                          </div>\n                        </div>\n                      </div>\n                      <Badge variant=\"outline\">#{index + 1}</Badge>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":20280},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { LoadingSpinner } from \"@/components/ui/loading-spinner\";\nimport { ErrorIllustration } from \"@/components/ErrorIllustration\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useLocation } from \"wouter\";\nimport logoImage from \"@assets/4_1755308511005.png\";\nimport { Heart, Mail, Lock, User, Eye, EyeOff, AlertCircle } from \"lucide-react\";\n\n// Componente de animação de fundo\nfunction AnimatedBackground() {\n  return (\n    <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n      {/* Corações flutuantes */}\n      {[...Array(8)].map((_, i) => (\n        <Heart\n          key={`heart-${i}`}\n          className={`absolute text-pink-300/30 animate-float-${i % 4 + 1}`}\n          size={20 + (i % 3) * 10}\n          style={{\n            left: `${10 + (i * 12) % 80}%`,\n            top: `${15 + (i * 15) % 70}%`,\n            animationDelay: `${i * 0.7}s`,\n            animationDuration: `${3 + (i % 3)}s`\n          }}\n        />\n      ))}\n      \n      {/* Bolinhas flutuantes */}\n      {[...Array(12)].map((_, i) => (\n        <div\n          key={`bubble-${i}`}\n          className={`absolute rounded-full bg-gradient-to-r from-pink-200/20 to-blue-200/20 animate-bounce`}\n          style={{\n            width: `${8 + (i % 4) * 6}px`,\n            height: `${8 + (i % 4) * 6}px`,\n            left: `${5 + (i * 8) % 90}%`,\n            top: `${10 + (i * 8) % 80}%`,\n            animationDelay: `${i * 0.5}s`,\n            animationDuration: `${4 + (i % 3)}s`\n          }}\n        />\n      ))}\n      \n      {/* Estrelas piscantes */}\n      {[...Array(6)].map((_, i) => (\n        <div\n          key={`star-${i}`}\n          className={`absolute w-2 h-2 bg-yellow-300/40 animate-pulse`}\n          style={{\n            left: `${20 + (i * 15) % 60}%`,\n            top: `${20 + (i * 12) % 60}%`,\n            animationDelay: `${i * 1.2}s`,\n            clipPath: 'polygon(50% 0%, 61% 35%, 98% 35%, 68% 57%, 79% 91%, 50% 70%, 21% 91%, 32% 57%, 2% 35%, 39% 35%)'\n          }}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default function Login() {\n  const [isLoginMode, setIsLoginMode] = useState(true);\n  const [showForgotPassword, setShowForgotPassword] = useState(false);\n  const [forgotPasswordEmail, setForgotPasswordEmail] = useState(\"\");\n  const [forgotPasswordMessage, setForgotPasswordMessage] = useState(\"\");\n  const [forgotPasswordLoading, setForgotPasswordLoading] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const [rememberMe, setRememberMe] = useState(localStorage.getItem(\"rememberMe\") === \"true\");\n  const [errors, setErrors] = useState<{email?: string; password?: string; name?: string; birthDate?: string; general?: string}>({});\n  const [formData, setFormData] = useState({\n    email: localStorage.getItem(\"rememberedEmail\") || \"\",\n    password: \"\",\n    name: \"\",\n    birthDate: \"\",\n  });\n  const { login, register, isLoading } = useAuth();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n\n  const validateForm = () => {\n    const newErrors: {email?: string; password?: string; name?: string; birthDate?: string; general?: string} = {};\n\n    if (!formData.email) {\n      newErrors.email = \"Email é obrigatório\";\n    } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(formData.email)) {\n      newErrors.email = \"Email inválido\";\n    }\n\n    if (!formData.password) {\n      newErrors.password = \"Senha é obrigatória\";\n    } else if (!isLoginMode && formData.password.length < 6) {\n      newErrors.password = \"Senha deve ter pelo menos 6 caracteres\";\n    }\n\n    if (!isLoginMode && !formData.name.trim()) {\n      newErrors.name = \"Nome é obrigatório\";\n    }\n\n    if (!isLoginMode && !formData.birthDate) {\n      newErrors.birthDate = \"Data de nascimento é obrigatória\";\n    } else if (!isLoginMode && formData.birthDate) {\n      const birthYear = new Date(formData.birthDate).getFullYear();\n      const currentYear = new Date().getFullYear();\n      \n      if (birthYear < 1900 || birthYear > currentYear) {\n        newErrors.birthDate = \"Digite um ano válido\";\n      }\n      \n      if (birthYear > currentYear - 13) {\n        newErrors.birthDate = \"Idade mínima: 13 anos\";\n      }\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setErrors({});\n    \n    if (!validateForm()) {\n      return;\n    }\n    \n    try {\n      if (isLoginMode) {\n        // Salvar preferências de \"lembrar de mim\" antes do login\n        if (rememberMe) {\n          localStorage.setItem(\"rememberMe\", \"true\");\n          localStorage.setItem(\"rememberedEmail\", formData.email);\n        } else {\n          localStorage.removeItem(\"rememberMe\");\n          localStorage.removeItem(\"rememberedEmail\");\n        }\n        await login(formData.email, formData.password);\n        // O AuthManager já cuida do redirecionamento\n      } else {\n        if (!formData.name.trim()) {\n          setErrors({ general: \"Nome é obrigatório\" });\n          return;\n        }\n        await register(formData.email, formData.password, formData.name);\n      }\n    } catch (error: any) {\n      console.log(\"Login/Register error:\", error);\n      const errorMessage = error.message || \"\";\n      \n      // Verificar se temos erros de campo específicos do backend\n      if (error.response && error.response.fieldErrors) {\n        setErrors(error.response.fieldErrors);\n        return;\n      }\n      \n      if (errorMessage.includes(\"não encontrado\")) {\n        setErrors({ email: \"Usuário não cadastrado\" });\n      } else if (errorMessage.includes(\"Senha incorreta\")) {\n        setErrors({ password: \"Senha incorreta\" });\n      } else if (errorMessage.includes(\"credentials\") || errorMessage.includes(\"Invalid\")) {\n        setErrors({ general: \"Email ou senha incorretos\" });\n      } else if (errorMessage.includes(\"already exists\") || errorMessage.includes(\"User already exists\") || errorMessage.includes(\"já está cadastrado\")) {\n        setErrors({ email: \"Este email já possui cadastro\" });\n      } else if (errorMessage.includes(\"Data de nascimento inválida\")) {\n        setErrors({ birthDate: \"Data inválida\" });\n      } else if (error.response?.status === 401) {\n        // Para erros 401, vamos mostrar mensagens mais específicas\n        setErrors({ general: \"Dados de login incorretos. Verifique email e senha.\" });\n      } else {\n        // Mostrar mensagens mais específicas e amigáveis\n        if (isLoginMode) {\n          setErrors({ general: \"Verifique seus dados e tente novamente\" });\n        } else {\n          setErrors({ general: \"Não foi possível criar a conta\" });\n        }\n      }\n    }\n  };\n\n  const handleForgotPassword = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setForgotPasswordLoading(true);\n    setForgotPasswordMessage(\"\");\n\n    try {\n      const response = await apiRequest(\"POST\", \"/api/auth/forgot-password\", {\n        email: forgotPasswordEmail,\n      });\n      const data = await response.json();\n      setForgotPasswordMessage(data.message);\n    } catch (error: any) {\n      setForgotPasswordMessage(error.message || \"Erro ao enviar email de recuperação\");\n    } finally {\n      setForgotPasswordLoading(false);\n    }\n  };\n\n  if (showForgotPassword) {\n    return (\n      <div className=\"min-h-screen relative flex flex-col items-center justify-center p-6 gradient-bg\">\n        <AnimatedBackground />\n        <Card className=\"w-full max-w-sm glass-effect shadow-xl z-10\">\n          <CardContent className=\"p-6\">\n            <div className=\"text-center mb-6\">\n              <h2 className=\"text-2xl font-bold text-charcoal mb-2\">Esqueci minha senha</h2>\n              <p className=\"text-gray-600 text-sm\">Digite seu email para recuperar a senha</p>\n            </div>\n            \n            {forgotPasswordMessage && (\n              <div className=\"mb-4 p-3 rounded-lg bg-blue-50 border border-blue-200\">\n                <p className=\"text-blue-800 text-sm\">{forgotPasswordMessage}</p>\n              </div>\n            )}\n\n            <form onSubmit={handleForgotPassword} className=\"space-y-4\">\n              <div>\n                <Label className=\"text-charcoal font-medium\">Email</Label>\n                <div className=\"relative mt-1\">\n                  <Mail className=\"absolute left-3 top-3 h-5 w-5 text-gray-400\" />\n                  <Input \n                    type=\"email\" \n                    placeholder=\"seu@email.com\"\n                    value={forgotPasswordEmail}\n                    onChange={(e) => setForgotPasswordEmail(e.target.value)}\n                    className=\"pl-10 focus:ring-2 focus:ring-baby-pink focus:border-baby-pink-dark\"\n                    data-testid=\"input-forgot-email\"\n                    required\n                  />\n                </div>\n              </div>\n              \n              <Button \n                type=\"submit\" \n                className=\"w-full bg-gradient-to-r from-baby-pink-dark to-baby-blue-dark hover:opacity-90\"\n                data-testid=\"button-send-recovery\"\n                disabled={forgotPasswordLoading}\n              >\n                {forgotPasswordLoading ? \"Enviando...\" : \"Enviar link de recuperação\"}\n              </Button>\n              \n              <Button \n                type=\"button\"\n                variant=\"ghost\"\n                onClick={() => setShowForgotPassword(false)}\n                className=\"w-full text-charcoal hover:bg-gray-100\"\n                data-testid=\"button-back-to-login\"\n              >\n                Voltar ao login\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen relative flex flex-col items-center justify-center p-6 gradient-bg\">\n      {/* Fundo animado */}\n      <AnimatedBackground />\n      \n      {/* Logo and title */}\n      <div className=\"text-center mb-10 z-10\">\n        <div className=\"mx-auto w-40 h-40 rounded-full bg-gradient-to-br from-baby-pink to-baby-blue flex items-center justify-center mb-6 shadow-2xl overflow-hidden transform hover:scale-105 transition-transform duration-300\">\n          <img \n            src={logoImage} \n            alt=\"Maternidade Logo\" \n            className=\"w-full h-full object-cover\"\n            data-testid=\"img-logo\"\n          />\n        </div>\n        <h1 className=\"text-4xl font-bold text-charcoal mb-3\">Bem-vinda!</h1>\n        <p className=\"text-gray-600 text-lg\">Acompanhe sua jornada maternal</p>\n      </div>\n\n      <Card className=\"w-full max-w-md glass-effect shadow-2xl z-10\">\n        <CardContent className=\"p-8\">\n          <div className=\"flex justify-center mb-6\">\n            <div className=\"flex bg-gray-100 rounded-full p-1\">\n              <button\n                onClick={() => {\n                  setIsLoginMode(true);\n                  setErrors({});\n                }}\n                className={`px-6 py-2 rounded-full text-sm font-medium transition-colors ${\n                  isLoginMode \n                    ? 'bg-white text-charcoal shadow-sm' \n                    : 'text-gray-600 hover:text-charcoal'\n                }`}\n                data-testid=\"button-login-tab\"\n              >\n                Entrar\n              </button>\n              <button\n                onClick={() => {\n                  setIsLoginMode(false);\n                  setErrors({});\n                }}\n                className={`px-6 py-2 rounded-full text-sm font-medium transition-colors ${\n                  !isLoginMode \n                    ? 'bg-white text-charcoal shadow-sm' \n                    : 'text-gray-600 hover:text-charcoal'\n                }`}\n                data-testid=\"button-register-tab\"\n              >\n                Criar conta\n              </button>\n            </div>\n          </div>\n\n          {/* Mensagem de erro geral com ilustração amigável */}\n          {errors.general && (\n            <div className=\"mb-6\">\n              <ErrorIllustration\n                type={errors.general.includes(\"incorretos\") || errors.general.includes(\"credentials\") ? \"login\" : \"register\"}\n                title={errors.general.includes(\"não encontrado\")\n                  ? \"Usuário não cadastrado\"\n                  : errors.general.includes(\"Senha incorreta\")\n                    ? \"Senha incorreta\"\n                    : errors.general.includes(\"incorretos\") || errors.general.includes(\"credentials\") \n                      ? \"Oops! Dados incorretos\" \n                      : errors.general.includes(\"já está em uso\") \n                        ? \"Email já cadastrado\" \n                        : \"Algo deu errado\"}\n                message={\n                  errors.general.includes(\"não encontrado\")\n                    ? \"Email não cadastrado\"\n                    : errors.general.includes(\"Senha incorreta\")\n                      ? \"Senha incorreta\"\n                      : errors.general.includes(\"incorretos\") || errors.general.includes(\"credentials\")\n                        ? \"Email ou senha incorretos\"\n                        : errors.general.includes(\"já está cadastrado\")\n                          ? \"Email já possui conta\"\n                          : \"Erro interno\"\n                }\n              />\n            </div>\n          )}\n\n          <form onSubmit={handleSubmit} className=\"space-y-5\">\n            {!isLoginMode && (\n              <div>\n                <Label className=\"text-charcoal font-medium\">Nome completo</Label>\n                <div className=\"relative mt-1\">\n                  <User className=\"absolute left-3 top-3 h-5 w-5 text-gray-400\" />\n                  <Input\n                    type=\"text\"\n                    placeholder=\"Seu nome completo\"\n                    value={formData.name}\n                    onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                    className={`pl-10 focus:ring-2 focus:ring-baby-pink focus:border-baby-pink-dark ${\n                      errors.name ? 'border-red-300 focus:border-red-500 focus:ring-red-200' : ''\n                    }`}\n                    data-testid=\"input-name\"\n                  />\n                </div>\n                {errors.name && (\n                  <div className=\"mt-2 p-2 bg-red-50/40 border border-red-200/30 rounded-lg\">\n                    <p className=\"text-sm text-red-400/90 flex items-center\">\n                      <AlertCircle className=\"h-4 w-4 mr-1 text-red-300/80\" />\n                      {errors.name}\n                    </p>\n                  </div>\n                )}\n              </div>\n            )}\n\n            {!isLoginMode && (\n              <div>\n                <Label className=\"text-charcoal font-medium\">Data de nascimento</Label>\n                <div className=\"relative mt-1\">\n                  <User className=\"absolute left-3 top-3 h-5 w-5 text-gray-400\" />\n                  <Input\n                    type=\"date\"\n                    placeholder=\"Data de nascimento\"\n                    value={formData.birthDate}\n                    onChange={(e) => setFormData(prev => ({ ...prev, birthDate: e.target.value }))}\n                    className={`pl-10 focus:ring-2 focus:ring-baby-pink focus:border-baby-pink-dark ${\n                      errors.birthDate ? 'border-red-300 focus:border-red-500 focus:ring-red-200' : ''\n                    }`}\n                    max=\"2024-12-31\"\n                    min=\"1900-01-01\"\n                    data-testid=\"input-birth-date\"\n                    required\n                  />\n                </div>\n                {errors.birthDate && (\n                  <div className=\"mt-1 p-2 bg-red-50/40 border border-red-200/30 rounded-md\">\n                    <p className=\"text-xs text-red-400/90 flex items-center\">\n                      <AlertCircle className=\"h-3 w-3 mr-1 text-red-300/80\" />\n                      {errors.birthDate}\n                    </p>\n                  </div>\n                )}\n              </div>\n            )}\n\n            <div>\n              <Label className=\"text-charcoal font-medium\">Email</Label>\n              <div className=\"relative mt-1\">\n                <Mail className=\"absolute left-3 top-3 h-5 w-5 text-gray-400\" />\n                <Input\n                  type=\"email\"\n                  placeholder=\"seu@email.com\"\n                  value={formData.email}\n                  onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}\n                  className={`pl-10 focus:ring-2 focus:ring-baby-pink focus:border-baby-pink-dark ${\n                    errors.email ? 'border-red-300 focus:border-red-500 focus:ring-red-200' : ''\n                  }`}\n                  data-testid=\"input-email\"\n                />\n              </div>\n              {errors.email && (\n                <div className=\"mt-1 p-2 bg-red-50/40 border border-red-200/30 rounded-md\">\n                  <p className=\"text-xs text-red-400/90 flex items-center\">\n                    <AlertCircle className=\"h-3 w-3 mr-1 text-red-300/80\" />\n                    {errors.email}\n                  </p>\n                </div>\n              )}\n            </div>\n\n            <div>\n              <Label className=\"text-charcoal font-medium\">Senha</Label>\n              <div className=\"relative mt-1\">\n                <Lock className=\"absolute left-3 top-3 h-5 w-5 text-gray-400\" />\n                <Input\n                  type={showPassword ? \"text\" : \"password\"}\n                  placeholder=\"Sua senha\"\n                  value={formData.password}\n                  onChange={(e) => setFormData(prev => ({ ...prev, password: e.target.value }))}\n                  className={`pl-10 pr-12 focus:ring-2 focus:ring-baby-pink focus:border-baby-pink-dark ${\n                    errors.password ? 'border-red-300 focus:border-red-500 focus:ring-red-200' : ''\n                  }`}\n                  data-testid=\"input-password\"\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  className=\"absolute right-3 top-3 h-5 w-5 text-gray-400 hover:text-gray-600\"\n                  data-testid=\"button-toggle-password\"\n                >\n                  {showPassword ? <EyeOff size={20} /> : <Eye size={20} />}\n                </button>\n              </div>\n              {errors.password && (\n                <div className=\"mt-1 p-2 bg-red-50/40 border border-red-200/30 rounded-md\">\n                  <p className=\"text-xs text-red-400/90 flex items-center\">\n                    <AlertCircle className=\"h-3 w-3 mr-1 text-red-300/80\" />\n                    {errors.password}\n                  </p>\n                </div>\n              )}\n            </div>\n\n            {isLoginMode && (\n              <div className=\"flex justify-between items-center\">\n                <label className=\"flex items-center text-sm cursor-pointer\">\n                  <input \n                    type=\"checkbox\" \n                    className=\"mr-2 rounded border-gray-300 text-baby-pink focus:ring-baby-pink\" \n                    checked={rememberMe}\n                    onChange={(e) => setRememberMe(e.target.checked)}\n                    data-testid=\"checkbox-remember-me\"\n                  />\n                  <span className=\"text-gray-600\">Lembrar-me</span>\n                </label>\n                <button\n                  type=\"button\"\n                  onClick={() => setLocation(`/reset-password?email=${encodeURIComponent(formData.email)}`)}\n                  className=\"text-sm text-baby-pink-dark hover:underline\"\n                  data-testid=\"button-forgot-password\"\n                >\n                  Esqueci minha senha\n                </button>\n              </div>\n            )}\n\n            <Button\n              type=\"submit\"\n              disabled={isLoading}\n              className=\"w-full bg-gradient-to-r from-baby-pink-dark to-baby-blue-dark hover:opacity-90 text-white font-medium py-3\"\n              data-testid=\"button-submit\"\n            >\n              {isLoading ? (\n                <>\n                  <LoadingSpinner />\n                  <span className=\"ml-2\">{isLoginMode ? 'Entrando...' : 'Criando conta...'}</span>\n                </>\n              ) : (\n                <span>{isLoginMode ? 'Entrar' : 'Criar conta'}</span>\n              )}\n            </Button>\n          </form>\n\n          <div className=\"text-center mt-6 text-sm text-gray-600\">\n            <Heart className=\"inline-block w-4 h-4 text-pink-400 mx-1\" />\n            Cuidando de você e seu bebê\n            <Heart className=\"inline-block w-4 h-4 text-pink-400 mx-1\" />\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":21116},"client/src/pages/medications.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { usePregnancy } from \"@/hooks/use-pregnancy\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { LoadingSpinner } from \"@/components/ui/loading-spinner\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport BottomNavigation from \"@/components/layout/bottom-navigation\";\nimport { ArrowLeft, Plus, Pill, Calendar, User, AlertTriangle, Trash2, Clock } from \"lucide-react\";\n\nexport default function Medications() {\n  const [showAddForm, setShowAddForm] = useState(false);\n  const [formData, setFormData] = useState({\n    name: \"\",\n    dosage: \"\",\n    frequency: \"\",\n    prescribedBy: \"\",\n    startDate: \"\",\n    endDate: \"\",\n    notes: \"\",\n    isActive: true,\n  });\n\n  const { user } = useAuth();\n  const { pregnancy } = usePregnancy();\n  const [, setLocation] = useLocation();\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const { data: medicationsData, isLoading } = useQuery({\n    queryKey: [\"/api/medications\", pregnancy?.id],\n    enabled: !!pregnancy,\n  });\n\n  const addMedicationMutation = useMutation({\n    mutationFn: async (medication: any) => {\n      const response = await apiRequest(\"POST\", \"/api/medications\", medication);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/medications\", pregnancy?.id] });\n      setShowAddForm(false);\n      setFormData({\n        name: \"\",\n        dosage: \"\",\n        frequency: \"\",\n        prescribedBy: \"\",\n        startDate: \"\",\n        endDate: \"\",\n        notes: \"\",\n        isActive: true,\n      });\n      toast({\n        title: \"Medicação adicionada!\",\n        description: \"Medicação foi registrada com sucesso.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao registrar medicação. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMedicationMutation = useMutation({\n    mutationFn: async ({ id, updates }: { id: string; updates: any }) => {\n      const response = await apiRequest(\"PUT\", `/api/medications/${id}`, updates);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/medications\", pregnancy?.id] });\n    },\n  });\n\n  const deleteMedicationMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/medications/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/medications\", pregnancy?.id] });\n      toast({\n        title: \"Medicação removida\",\n        description: \"Medicação foi removida do registro.\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.name.trim()) {\n      toast({\n        title: \"Erro\",\n        description: \"Nome da medicação é obrigatório\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const medicationData = {\n      pregnancyId: pregnancy!.id,\n      name: formData.name.trim(),\n      dosage: formData.dosage.trim() || null,\n      frequency: formData.frequency.trim() || null,\n      prescribedBy: formData.prescribedBy.trim() || null,\n      startDate: formData.startDate ? new Date(formData.startDate).toISOString() : null,\n      endDate: formData.endDate ? new Date(formData.endDate).toISOString() : null,\n      notes: formData.notes.trim() || null,\n      isActive: formData.isActive,\n    };\n\n    addMedicationMutation.mutate(medicationData);\n  };\n\n  const toggleActive = (id: string, isActive: boolean) => {\n    updateMedicationMutation.mutate({ id, updates: { isActive } });\n  };\n\n  if (!user || !pregnancy) {\n    setLocation(\"/login\");\n    return null;\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <LoadingSpinner size=\"lg\" />\n      </div>\n    );\n  }\n\n  const medications = medicationsData?.medications || [];\n  const activeMedications = medications.filter((med: any) => med.isActive);\n  const inactiveMedications = medications.filter((med: any) => !med.isActive);\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('pt-BR');\n  };\n\n  return (\n    <div className=\"min-h-screen bg-cream pb-20\">\n      <div className=\"p-4 pt-12\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <Button \n            variant=\"ghost\" \n            size=\"icon\"\n            className=\"rounded-full bg-white shadow-lg\"\n            onClick={() => setLocation(\"/\")}\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"h-5 w-5 text-charcoal\" />\n          </Button>\n          <h2 className=\"text-xl font-bold text-charcoal\" data-testid=\"text-page-title\">\n            Medicações\n          </h2>\n          <Button \n            variant=\"ghost\" \n            size=\"icon\"\n            className=\"rounded-full bg-baby-pink-dark shadow-lg\"\n            onClick={() => setShowAddForm(true)}\n            data-testid=\"button-add-medication\"\n          >\n            <Plus className=\"h-5 w-5 text-white\" />\n          </Button>\n        </div>\n\n        {/* Safety Warning */}\n        <Card className=\"shadow-lg mb-6 border-l-4 border-red-500\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-start space-x-3\">\n              <AlertTriangle className=\"h-5 w-5 text-red-500 mt-0.5 flex-shrink-0\" />\n              <div>\n                <h4 className=\"font-semibold text-red-700 mb-1\">Importante</h4>\n                <p className=\"text-sm text-red-600\">\n                  Sempre consulte seu médico antes de iniciar, alterar ou interromper qualquer medicação durante a gravidez.\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Active Medications */}\n        {activeMedications.length > 0 && (\n          <Card className=\"shadow-lg mb-6\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center text-charcoal\">\n                <Pill className=\"mr-2 h-5 w-5 text-baby-pink-dark\" />\n                Medicações Ativas ({activeMedications.length})\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {activeMedications.map((medication: any) => (\n                  <div \n                    key={medication.id} \n                    className=\"p-4 bg-green-50 rounded-lg border border-green-200\"\n                    data-testid={`active-medication-${medication.id}`}\n                  >\n                    <div className=\"flex items-start justify-between mb-3\">\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-semibold text-charcoal mb-1\">{medication.name}</h4>\n                        <div className=\"space-y-1 text-sm text-gray-600\">\n                          {medication.dosage && (\n                            <div className=\"flex items-center\">\n                              <Pill className=\"h-3 w-3 mr-1\" />\n                              {medication.dosage}\n                            </div>\n                          )}\n                          {medication.frequency && (\n                            <div className=\"flex items-center\">\n                              <Clock className=\"h-3 w-3 mr-1\" />\n                              {medication.frequency}\n                            </div>\n                          )}\n                          {medication.prescribedBy && (\n                            <div className=\"flex items-center\">\n                              <User className=\"h-3 w-3 mr-1\" />\n                              Prescrito por: {medication.prescribedBy}\n                            </div>\n                          )}\n                          {medication.startDate && (\n                            <div className=\"flex items-center\">\n                              <Calendar className=\"h-3 w-3 mr-1\" />\n                              Início: {formatDate(medication.startDate)}\n                              {medication.endDate && ` - Fim: ${formatDate(medication.endDate)}`}\n                            </div>\n                          )}\n                        </div>\n                        {medication.notes && (\n                          <p className=\"text-sm text-gray-700 mt-2 italic\">\n                            {medication.notes}\n                          </p>\n                        )}\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Switch\n                          checked={medication.isActive}\n                          onCheckedChange={(checked) => toggleActive(medication.id, checked)}\n                          data-testid={`switch-active-${medication.id}`}\n                        />\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => deleteMedicationMutation.mutate(medication.id)}\n                          className=\"text-red-500 hover:text-red-700\"\n                          data-testid={`button-delete-${medication.id}`}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Inactive Medications */}\n        {inactiveMedications.length > 0 && (\n          <Card className=\"shadow-lg mb-6\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center text-charcoal\">\n                <Pill className=\"mr-2 h-5 w-5 text-gray-500\" />\n                Medicações Inativas ({inactiveMedications.length})\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {inactiveMedications.map((medication: any) => (\n                  <div \n                    key={medication.id} \n                    className=\"p-4 bg-gray-50 rounded-lg border border-gray-200\"\n                    data-testid={`inactive-medication-${medication.id}`}\n                  >\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-semibold text-gray-600 mb-1\">{medication.name}</h4>\n                        <div className=\"space-y-1 text-sm text-gray-500\">\n                          {medication.dosage && (\n                            <div className=\"flex items-center\">\n                              <Pill className=\"h-3 w-3 mr-1\" />\n                              {medication.dosage}\n                            </div>\n                          )}\n                          {medication.startDate && (\n                            <div className=\"flex items-center\">\n                              <Calendar className=\"h-3 w-3 mr-1\" />\n                              {formatDate(medication.startDate)}\n                              {medication.endDate && ` - ${formatDate(medication.endDate)}`}\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Switch\n                          checked={medication.isActive}\n                          onCheckedChange={(checked) => toggleActive(medication.id, checked)}\n                          data-testid={`switch-inactive-${medication.id}`}\n                        />\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => deleteMedicationMutation.mutate(medication.id)}\n                          className=\"text-red-500 hover:text-red-700\"\n                          data-testid={`button-delete-inactive-${medication.id}`}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {medications.length === 0 && (\n          <Card className=\"shadow-lg\">\n            <CardContent className=\"text-center py-12\">\n              <Pill className=\"h-16 w-16 mx-auto mb-4 text-gray-400\" />\n              <h3 className=\"text-lg font-semibold text-charcoal mb-2\">Nenhuma medicação registrada</h3>\n              <p className=\"text-gray-600 mb-4\">Mantenha um registro das suas medicações</p>\n              <Button\n                onClick={() => setShowAddForm(true)}\n                className=\"bg-gradient-to-r from-baby-pink-dark to-baby-blue-dark hover:opacity-90\"\n                data-testid=\"button-add-first-medication\"\n              >\n                <Plus className=\"mr-2 h-4 w-4\" />\n                Adicionar primeira medicação\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {/* Add medication modal */}\n      {showAddForm && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50\">\n          <Card className=\"w-full max-w-md max-h-[90vh] overflow-y-auto\">\n            <CardHeader>\n              <CardTitle className=\"text-charcoal\">Nova Medicação</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSubmit} className=\"space-y-4\" data-testid=\"form-add-medication\">\n                <div>\n                  <Label htmlFor=\"name\" className=\"text-charcoal font-medium\">\n                    Nome da medicação *\n                  </Label>\n                  <Input\n                    id=\"name\"\n                    placeholder=\"Ex: Ácido fólico\"\n                    value={formData.name}\n                    onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                    className=\"focus:ring-2 focus:ring-baby-pink focus:border-baby-pink-dark\"\n                    data-testid=\"input-name\"\n                    required\n                  />\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-3\">\n                  <div>\n                    <Label htmlFor=\"dosage\" className=\"text-charcoal font-medium\">\n                      Dosagem\n                    </Label>\n                    <Input\n                      id=\"dosage\"\n                      placeholder=\"Ex: 5mg\"\n                      value={formData.dosage}\n                      onChange={(e) => setFormData({ ...formData, dosage: e.target.value })}\n                      className=\"focus:ring-2 focus:ring-baby-pink focus:border-baby-pink-dark\"\n                      data-testid=\"input-dosage\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"frequency\" className=\"text-charcoal font-medium\">\n                      Frequência\n                    </Label>\n                    <Input\n                      id=\"frequency\"\n                      placeholder=\"Ex: 1x ao dia\"\n                      value={formData.frequency}\n                      onChange={(e) => setFormData({ ...formData, frequency: e.target.value })}\n                      className=\"focus:ring-2 focus:ring-baby-pink focus:border-baby-pink-dark\"\n                      data-testid=\"input-frequency\"\n                    />\n                  </div>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"prescribedBy\" className=\"text-charcoal font-medium\">\n                    Prescrito por\n                  </Label>\n                  <Input\n                    id=\"prescribedBy\"\n                    placeholder=\"Ex: Dr. João Silva\"\n                    value={formData.prescribedBy}\n                    onChange={(e) => setFormData({ ...formData, prescribedBy: e.target.value })}\n                    className=\"focus:ring-2 focus:ring-baby-pink focus:border-baby-pink-dark\"\n                    data-testid=\"input-prescribed-by\"\n                  />\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-3\">\n                  <div>\n                    <Label htmlFor=\"startDate\" className=\"text-charcoal font-medium\">\n                      Data de início\n                    </Label>\n                    <Input\n                      id=\"startDate\"\n                      type=\"date\"\n                      value={formData.startDate}\n                      onChange={(e) => setFormData({ ...formData, startDate: e.target.value })}\n                      className=\"focus:ring-2 focus:ring-baby-pink focus:border-baby-pink-dark\"\n                      data-testid=\"input-start-date\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"endDate\" className=\"text-charcoal font-medium\">\n                      Data de fim\n                    </Label>\n                    <Input\n                      id=\"endDate\"\n                      type=\"date\"\n                      value={formData.endDate}\n                      onChange={(e) => setFormData({ ...formData, endDate: e.target.value })}\n                      className=\"focus:ring-2 focus:ring-baby-pink focus:border-baby-pink-dark\"\n                      data-testid=\"input-end-date\"\n                    />\n                  </div>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"notes\" className=\"text-charcoal font-medium\">\n                    Observações\n                  </Label>\n                  <Textarea\n                    id=\"notes\"\n                    placeholder=\"Ex: Tomar com o estômago vazio\"\n                    value={formData.notes}\n                    onChange={(e) => setFormData({ ...formData, notes: e.target.value })}\n                    className=\"focus:ring-2 focus:ring-baby-pink focus:border-baby-pink-dark\"\n                    data-testid=\"textarea-notes\"\n                  />\n                </div>\n                \n                <div className=\"flex items-center space-x-2\">\n                  <Switch\n                    id=\"isActive\"\n                    checked={formData.isActive}\n                    onCheckedChange={(checked) => setFormData({ ...formData, isActive: checked })}\n                    data-testid=\"switch-is-active\"\n                  />\n                  <Label htmlFor=\"isActive\" className=\"text-charcoal font-medium\">\n                    Medicação ativa\n                  </Label>\n                </div>\n                \n                <div className=\"flex space-x-3\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\"\n                    onClick={() => setShowAddForm(false)}\n                    className=\"flex-1\"\n                    data-testid=\"button-cancel\"\n                  >\n                    Cancelar\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    className=\"flex-1 bg-gradient-to-r from-baby-pink-dark to-baby-blue-dark hover:opacity-90\"\n                    disabled={addMedicationMutation.isPending}\n                    data-testid=\"button-save\"\n                  >\n                    {addMedicationMutation.isPending ? (\n                      <LoadingSpinner size=\"sm\" className=\"mr-2\" />\n                    ) : (\n                      <Pill className=\"mr-2 h-4 w-4\" />\n                    )}\n                    Adicionar\n                  </Button>\n                </div>\n              </form>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      <BottomNavigation />\n    </div>\n  );\n}\n","size_bytes":20426},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/photo-album.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { usePregnancy } from \"@/hooks/use-pregnancy\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { LoadingSpinner } from \"@/components/ui/loading-spinner\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { ObjectUploader } from \"@/components/ObjectUploader\";\nimport BottomNavigation from \"@/components/layout/bottom-navigation\";\nimport { \n  ArrowLeft, \n  Plus, \n  Camera, \n  Calendar, \n  Trash2, \n  Image, \n  Heart,\n  Star,\n  Grid3X3,\n  List,\n  Filter,\n  TrendingUp,\n  Baby,\n  Sparkles,\n  Eye,\n  Download,\n  Share2,\n  Clock,\n  BarChart3,\n  Zap,\n  Target,\n  Trophy\n} from \"lucide-react\";\nimport type { UploadResult } from \"@uppy/core\";\nimport { format, differenceInWeeks } from 'date-fns';\nimport { ptBR } from 'date-fns/locale';\n\ninterface Photo {\n  id: string;\n  objectPath: string;\n  caption?: string;\n  week?: number;\n  date: string;\n  favorite: boolean;\n  milestone?: string;\n  pregnancyId: string;\n}\n\ninterface PhotosData {\n  photos: Photo[];\n}\n\n// Important pregnancy milestones\nconst milestones = {\n  8: 'Primeiro ultrassom',\n  12: 'Fim do 1º trimestre',\n  16: 'Descoberta do sexo',\n  20: 'Ultrassom morfológico',\n  24: 'Viabilidade fetal',\n  28: 'Início do 3º trimestre',\n  32: 'Pré-natal intensivo',\n  36: 'Bebê a termo',\n  40: 'Data provável do parto'\n};\n\nexport default function PhotoAlbum() {\n  const [showAddForm, setShowAddForm] = useState(false);\n  const [showPhotoModal, setShowPhotoModal] = useState(false);\n  const [selectedPhoto, setSelectedPhoto] = useState<Photo | null>(null);\n  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');\n  const [selectedTrimester, setSelectedTrimester] = useState<string>('all');\n  const [selectedWeekFilter, setSelectedWeekFilter] = useState<string>('all');\n  const [showFavoritesOnly, setShowFavoritesOnly] = useState(false);\n  \n  // Form data\n  const [formData, setFormData] = useState({\n    caption: \"\",\n    week: \"\",\n    milestone: \"\",\n    favorite: false,\n    uploadedPhotoURL: \"\"\n  });\n\n  const { user } = useAuth();\n  const { pregnancy, weekInfo } = usePregnancy();\n  const [, setLocation] = useLocation();\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const { data: photosData, isLoading } = useQuery<PhotosData>({\n    queryKey: [\"/api/photos\", pregnancy?.id],\n    enabled: !!pregnancy,\n    queryFn: () => {\n      // Mock data for demonstration\n      const currentDate = new Date();\n      const pregnancyStart = pregnancy?.startDate ? new Date(pregnancy.startDate) : new Date();\n      \n      const mockData: PhotosData = {\n        photos: [\n          {\n            id: '1',\n            objectPath: 'https://images.unsplash.com/photo-1493217465235-252dd9c0d632?w=400&h=600&fit=crop',\n            caption: 'Primeira foto da barriguinha!',\n            week: 8,\n            date: new Date(2024, 0, 15).toISOString(),\n            favorite: true,\n            milestone: 'Primeiro ultrassom',\n            pregnancyId: pregnancy?.id || ''\n          },\n          {\n            id: '2',\n            objectPath: 'https://images.unsplash.com/photo-1584464491033-06628f3a6b7b?w=400&h=600&fit=crop',\n            caption: 'Crescendo a cada dia ❤️',\n            week: 16,\n            date: new Date(2024, 2, 10).toISOString(),\n            favorite: false,\n            milestone: 'Descoberta do sexo',\n            pregnancyId: pregnancy?.id || ''\n          },\n          {\n            id: '3',\n            objectPath: 'https://images.unsplash.com/photo-1606103909936-b26c5dfe0e41?w=400&h=600&fit=crop',\n            caption: 'Metade do caminho! 20 semanas ✨',\n            week: 20,\n            date: new Date(2024, 3, 20).toISOString(),\n            favorite: true,\n            milestone: 'Ultrassom morfológico',\n            pregnancyId: pregnancy?.id || ''\n          },\n          {\n            id: '4',\n            objectPath: 'https://images.unsplash.com/photo-1551884831-bbf3cdc6469e?w=400&h=600&fit=crop',\n            caption: 'Terceiro trimestre chegando!',\n            week: 28,\n            date: new Date(2024, 5, 15).toISOString(),\n            favorite: false,\n            milestone: 'Início do 3º trimestre',\n            pregnancyId: pregnancy?.id || ''\n          },\n          {\n            id: '5',\n            objectPath: 'https://images.unsplash.com/photo-1573496260576-466ec4b3a6e1?w=400&h=600&fit=crop',\n            caption: 'Reta final! Ansiosa para conhecê-la 👶',\n            week: 36,\n            date: new Date(2024, 7, 10).toISOString(),\n            favorite: true,\n            milestone: 'Bebê a termo',\n            pregnancyId: pregnancy?.id || ''\n          }\n        ]\n      };\n      return Promise.resolve(mockData);\n    },\n  });\n\n  // Calculations and filtering\n  const photos = photosData?.photos || [];\n  \n  const filteredPhotos = useMemo(() => {\n    return photos.filter(photo => {\n      const trimesterMatch = selectedTrimester === 'all' || \n        (selectedTrimester === '1' && photo.week && photo.week <= 12) ||\n        (selectedTrimester === '2' && photo.week && photo.week > 12 && photo.week <= 28) ||\n        (selectedTrimester === '3' && photo.week && photo.week > 28);\n      \n      const weekMatch = selectedWeekFilter === 'all' || photo.week?.toString() === selectedWeekFilter;\n      const favoriteMatch = !showFavoritesOnly || photo.favorite;\n      \n      return trimesterMatch && weekMatch && favoriteMatch;\n    });\n  }, [photos, selectedTrimester, selectedWeekFilter, showFavoritesOnly]);\n\n  // Statistics\n  const stats = useMemo(() => {\n    const totalPhotos = photos.length;\n    const favoritePhotos = photos.filter(p => p.favorite).length;\n    const photosByTrimester = {\n      1: photos.filter(p => p.week && p.week <= 12).length,\n      2: photos.filter(p => p.week && p.week > 12 && p.week <= 28).length,\n      3: photos.filter(p => p.week && p.week > 28).length\n    };\n    const milestoneCoverage = Object.keys(milestones).filter(week => \n      photos.some(p => p.week === parseInt(week))\n    ).length;\n    \n    const weeksWithPhotos = [...new Set(photos.map(p => p.week).filter(Boolean))].length;\n    const totalWeeks = weekInfo ? 40 : 40;\n    const coveragePercentage = (weeksWithPhotos / totalWeeks) * 100;\n    \n    return {\n      totalPhotos,\n      favoritePhotos,\n      photosByTrimester,\n      milestoneCoverage,\n      totalMilestones: Object.keys(milestones).length,\n      coveragePercentage,\n      weeksWithPhotos\n    };\n  }, [photos, weekInfo]);\n\n  // Group photos by trimester for timeline\n  const photosByTrimester = useMemo(() => {\n    return {\n      1: photos.filter(p => p.week && p.week <= 12).sort((a, b) => (a.week || 0) - (b.week || 0)),\n      2: photos.filter(p => p.week && p.week > 12 && p.week <= 28).sort((a, b) => (a.week || 0) - (b.week || 0)),\n      3: photos.filter(p => p.week && p.week > 28).sort((a, b) => (a.week || 0) - (b.week || 0))\n    };\n  }, [photos]);\n\n  // Mutations\n  const addPhotoMutation = useMutation({\n    mutationFn: async (photo: any) => {\n      const response = await apiRequest(\"POST\", \"/api/photos\", photo);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/photos\", pregnancy?.id] });\n      setShowAddForm(false);\n      setFormData({\n        caption: \"\",\n        week: \"\",\n        milestone: \"\",\n        favorite: false,\n        uploadedPhotoURL: \"\"\n      });\n      toast({\n        title: \"📸 Foto adicionada!\",\n        description: \"Sua foto foi salva no álbum com sucesso.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"❌ Erro\",\n        description: \"Erro ao salvar foto. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const toggleFavoriteMutation = useMutation({\n    mutationFn: async ({ id, favorite }: { id: string; favorite: boolean }) => {\n      const response = await apiRequest(\"PUT\", `/api/photos/${id}`, { favorite });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/photos\", pregnancy?.id] });\n    },\n  });\n\n  const deletePhotoMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/photos/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/photos\", pregnancy?.id] });\n      toast({\n        title: \"🗑️ Foto removida\",\n        description: \"Foto foi removida do álbum.\",\n      });\n    },\n  });\n\n  const handleGetUploadParameters = async () => {\n    const response = await apiRequest(\"POST\", \"/api/objects/upload\", {});\n    const data = await response.json();\n    return {\n      method: \"PUT\" as const,\n      url: data.uploadURL,\n    };\n  };\n\n  const handleUploadComplete = (result: UploadResult<Record<string, unknown>, Record<string, unknown>>) => {\n    if (result.successful && result.successful[0]) {\n      setFormData(prev => ({\n        ...prev,\n        uploadedPhotoURL: result.successful[0].uploadURL as string\n      }));\n      toast({\n        title: \"✅ Upload concluído!\",\n        description: \"Agora adicione informações para salvar a foto.\",\n      });\n    }\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.uploadedPhotoURL) {\n      toast({\n        title: \"Erro\",\n        description: \"Por favor, faça upload de uma foto primeiro\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const week = formData.week ? parseInt(formData.week) : null;\n    const milestone = week && milestones[week as keyof typeof milestones] ? milestones[week as keyof typeof milestones] : formData.milestone;\n\n    addPhotoMutation.mutate({\n      pregnancyId: pregnancy!.id,\n      photoURL: formData.uploadedPhotoURL,\n      caption: formData.caption.trim() || null,\n      week,\n      milestone: milestone || null,\n      favorite: formData.favorite,\n      date: new Date().toISOString(),\n    });\n  };\n\n  const openPhotoModal = (photo: Photo) => {\n    setSelectedPhoto(photo);\n    setShowPhotoModal(true);\n  };\n\n  const getTrimesterName = (num: number) => {\n    switch(num) {\n      case 1: return \"1º Trimestre\";\n      case 2: return \"2º Trimestre\"; \n      case 3: return \"3º Trimestre\";\n      default: return \"\";\n    }\n  };\n\n  if (!user || !pregnancy) {\n    setLocation(\"/login\");\n    return null;\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <LoadingSpinner size=\"lg\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-pink-50 via-white to-blue-50 pb-20\">\n      <div className=\"p-4 pt-8\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <Button \n            variant=\"ghost\" \n            size=\"icon\"\n            className=\"rounded-full bg-white shadow-lg\"\n            onClick={() => setLocation(\"/\")}\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"h-5 w-5 text-gray-700\" />\n          </Button>\n          <h1 className=\"text-2xl font-bold text-gray-800\">Álbum de Fotos</h1>\n          <Button \n            variant=\"ghost\" \n            size=\"icon\"\n            className=\"rounded-full bg-gradient-to-r from-pink-500 to-blue-500 shadow-lg\"\n            onClick={() => setShowAddForm(true)}\n            data-testid=\"button-add-photo\"\n          >\n            <Plus className=\"h-5 w-5 text-white\" />\n          </Button>\n        </div>\n\n        <Tabs defaultValue=\"gallery\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-4 mb-6\">\n            <TabsTrigger value=\"gallery\" className=\"flex items-center text-xs\">\n              <Grid3X3 className=\"w-3 h-3 mr-1\" />\n              Galeria\n            </TabsTrigger>\n            <TabsTrigger value=\"timeline\" className=\"flex items-center text-xs\">\n              <Clock className=\"w-3 h-3 mr-1\" />\n              Timeline\n            </TabsTrigger>\n            <TabsTrigger value=\"compare\" className=\"flex items-center text-xs\">\n              <TrendingUp className=\"w-3 h-3 mr-1\" />\n              Comparar\n            </TabsTrigger>\n            <TabsTrigger value=\"stats\" className=\"flex items-center text-xs\">\n              <BarChart3 className=\"w-3 h-3 mr-1\" />\n              Estatísticas\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Gallery Tab */}\n          <TabsContent value=\"gallery\" className=\"space-y-6\">\n            {/* Filters and View Options */}\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-base flex items-center justify-between\">\n                  <span className=\"flex items-center\">\n                    <Filter className=\"w-4 h-4 mr-2\" />\n                    Filtros e Visualização\n                  </span>\n                  <div className=\"flex items-center space-x-2\">\n                    <Button\n                      variant={viewMode === 'grid' ? 'default' : 'outline'}\n                      size=\"sm\"\n                      onClick={() => setViewMode('grid')}\n                    >\n                      <Grid3X3 className=\"w-4 h-4\" />\n                    </Button>\n                    <Button\n                      variant={viewMode === 'list' ? 'default' : 'outline'}\n                      size=\"sm\"\n                      onClick={() => setViewMode('list')}\n                    >\n                      <List className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div>\n                    <Label className=\"text-sm text-gray-700 mb-2 block\">Trimestre</Label>\n                    <Select value={selectedTrimester} onValueChange={setSelectedTrimester}>\n                      <SelectTrigger className=\"h-9\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">Todos</SelectItem>\n                        <SelectItem value=\"1\">1º Trimestre (1-12 sem)</SelectItem>\n                        <SelectItem value=\"2\">2º Trimestre (13-28 sem)</SelectItem>\n                        <SelectItem value=\"3\">3º Trimestre (29-40 sem)</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label className=\"text-sm text-gray-700 mb-2 block\">Semana</Label>\n                    <Select value={selectedWeekFilter} onValueChange={setSelectedWeekFilter}>\n                      <SelectTrigger className=\"h-9\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">Todas</SelectItem>\n                        {Array.from({ length: 40 }, (_, i) => i + 1).map(week => (\n                          <SelectItem key={week} value={week.toString()}>\n                            {week}ª semana\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"flex items-center space-x-2\">\n                    <input\n                      type=\"checkbox\"\n                      id=\"favorites\"\n                      checked={showFavoritesOnly}\n                      onChange={(e) => setShowFavoritesOnly(e.target.checked)}\n                      className=\"rounded border-gray-300\"\n                    />\n                    <Label htmlFor=\"favorites\" className=\"text-sm text-gray-700\">\n                      Apenas favoritas\n                    </Label>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Photo Grid/List */}\n            {filteredPhotos.length === 0 ? (\n              <Card>\n                <CardContent className=\"text-center py-12\">\n                  <Camera className=\"h-16 w-16 mx-auto mb-4 text-gray-400\" />\n                  <h3 className=\"text-lg font-semibold text-gray-800 mb-2\">\n                    {photos.length === 0 ? 'Álbum vazio' : 'Nenhuma foto encontrada'}\n                  </h3>\n                  <p className=\"text-gray-600 mb-4\">\n                    {photos.length === 0 ? 'Comece a documentar sua jornada' : 'Ajuste os filtros ou adicione mais fotos'}\n                  </p>\n                  <Button\n                    onClick={() => setShowAddForm(true)}\n                    className=\"bg-gradient-to-r from-pink-500 to-blue-500 hover:opacity-90\"\n                  >\n                    <Camera className=\"mr-2 h-4 w-4\" />\n                    {photos.length === 0 ? 'Adicionar primeira foto' : 'Adicionar foto'}\n                  </Button>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className={viewMode === 'grid' ? 'grid grid-cols-2 md:grid-cols-3 gap-4' : 'space-y-4'}>\n                {filteredPhotos.map((photo) => (\n                  <Card \n                    key={photo.id} \n                    className={`shadow-lg overflow-hidden hover:shadow-xl transition-all cursor-pointer ${\n                      viewMode === 'list' ? 'flex' : ''\n                    }`}\n                    onClick={() => openPhotoModal(photo)}\n                  >\n                    <div className={`relative ${viewMode === 'list' ? 'w-32 flex-shrink-0' : ''}`}>\n                      <img\n                        src={photo.objectPath}\n                        alt={photo.caption || \"Foto da gestação\"}\n                        className={`object-cover ${viewMode === 'list' ? 'w-full h-24' : 'w-full h-48'}`}\n                      />\n                      <div className=\"absolute top-2 left-2\">\n                        {photo.favorite && (\n                          <Heart className=\"h-4 w-4 text-red-500 fill-current\" />\n                        )}\n                      </div>\n                      <div className=\"absolute top-2 right-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"bg-black/50 text-white hover:bg-black/70 h-8 w-8\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            toggleFavoriteMutation.mutate({\n                              id: photo.id,\n                              favorite: !photo.favorite\n                            });\n                          }}\n                        >\n                          <Heart className={`h-3 w-3 ${photo.favorite ? 'fill-current text-red-400' : ''}`} />\n                        </Button>\n                      </div>\n                      {photo.week && (\n                        <div className=\"absolute bottom-2 left-2\">\n                          <Badge className=\"bg-pink-500 text-white text-xs\">\n                            {photo.week}ª sem\n                          </Badge>\n                        </div>\n                      )}\n                    </div>\n\n                    <CardContent className={`p-3 ${viewMode === 'list' ? 'flex-1' : ''}`}>\n                      {photo.caption && (\n                        <p className=\"text-sm text-gray-800 mb-2 line-clamp-2\">\n                          {photo.caption}\n                        </p>\n                      )}\n                      \n                      <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                        <div className=\"flex items-center space-x-2\">\n                          <span className=\"flex items-center\">\n                            <Calendar className=\"h-3 w-3 mr-1\" />\n                            {format(new Date(photo.date), \"dd/MM/yyyy\")}\n                          </span>\n                        </div>\n                        {photo.milestone && (\n                          <Badge className=\"bg-purple-100 text-purple-700 text-xs\">\n                            <Sparkles className=\"w-3 h-3 mr-1\" />\n                            Marco\n                          </Badge>\n                        )}\n                      </div>\n\n                      {viewMode === 'list' && photo.milestone && (\n                        <p className=\"text-xs text-purple-600 mt-1\">\n                          {photo.milestone}\n                        </p>\n                      )}\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </TabsContent>\n\n          {/* Timeline Tab */}\n          <TabsContent value=\"timeline\" className=\"space-y-6\">\n            <Card className=\"bg-gradient-to-r from-purple-50 to-pink-50 border-purple-200\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center text-purple-700\">\n                  <Clock className=\"mr-2 h-5 w-5\" />\n                  Sua Jornada Fotográfica\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-sm text-purple-600\">\n                  Acompanhe a evolução da sua gestação através das fotos organizadas por trimestre.\n                </p>\n              </CardContent>\n            </Card>\n\n            {[1, 2, 3].map(trimester => (\n              <Card key={trimester}>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center justify-between\">\n                    <span className=\"flex items-center\">\n                      <Baby className=\"mr-2 h-5 w-5 text-pink-500\" />\n                      {getTrimesterName(trimester)}\n                    </span>\n                    <Badge className=\"bg-pink-100 text-pink-700\">\n                      {photosByTrimester[trimester as keyof typeof photosByTrimester].length} fotos\n                    </Badge>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {photosByTrimester[trimester as keyof typeof photosByTrimester].length === 0 ? (\n                    <div className=\"text-center py-8 text-gray-500\">\n                      <Camera className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n                      <p className=\"text-sm\">Nenhuma foto neste trimestre ainda</p>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        className=\"mt-2\"\n                        onClick={() => setShowAddForm(true)}\n                      >\n                        Adicionar foto\n                      </Button>\n                    </div>\n                  ) : (\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                      {photosByTrimester[trimester as keyof typeof photosByTrimester].map((photo) => (\n                        <div \n                          key={photo.id} \n                          className=\"relative group cursor-pointer\"\n                          onClick={() => openPhotoModal(photo)}\n                        >\n                          <img\n                            src={photo.objectPath}\n                            alt={photo.caption || \"Foto da gestação\"}\n                            className=\"w-full h-32 object-cover rounded-lg\"\n                          />\n                          <div className=\"absolute inset-0 bg-black/50 opacity-0 group-hover:opacity-100 transition-opacity rounded-lg flex items-center justify-center\">\n                            <Eye className=\"h-6 w-6 text-white\" />\n                          </div>\n                          <div className=\"absolute top-2 left-2\">\n                            <Badge className=\"bg-white text-gray-800 text-xs\">\n                              {photo.week}ª sem\n                            </Badge>\n                          </div>\n                          {photo.favorite && (\n                            <div className=\"absolute top-2 right-2\">\n                              <Heart className=\"h-4 w-4 text-red-500 fill-current\" />\n                            </div>\n                          )}\n                          {photo.milestone && (\n                            <div className=\"absolute bottom-2 left-2 right-2\">\n                              <Badge className=\"bg-purple-500 text-white text-xs w-full justify-center\">\n                                <Sparkles className=\"w-3 h-3 mr-1\" />\n                                {photo.milestone}\n                              </Badge>\n                            </div>\n                          )}\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            ))}\n          </TabsContent>\n\n          {/* Compare Tab */}\n          <TabsContent value=\"compare\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <TrendingUp className=\"mr-2 h-5 w-5 text-green-500\" />\n                  Comparação de Evolução\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-sm text-gray-600 mb-6\">\n                  Veja como sua barriguinha cresceu ao longo das semanas!\n                </p>\n                \n                {photos.length >= 2 ? (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                    {photos\n                      .filter(photo => photo.week)\n                      .sort((a, b) => (a.week || 0) - (b.week || 0))\n                      .map((photo, index, sortedPhotos) => (\n                        <div key={photo.id} className=\"space-y-2\">\n                          <div className=\"relative group\">\n                            <img\n                              src={photo.objectPath}\n                              alt={`Semana ${photo.week}`}\n                              className=\"w-full h-48 object-cover rounded-lg\"\n                            />\n                            <div className=\"absolute inset-x-0 bottom-0 bg-gradient-to-t from-black/70 to-transparent p-4 rounded-b-lg\">\n                              <div className=\"text-white\">\n                                <div className=\"font-semibold\">{photo.week}ª semana</div>\n                                {photo.caption && (\n                                  <div className=\"text-sm opacity-90\">{photo.caption}</div>\n                                )}\n                              </div>\n                            </div>\n                            {photo.favorite && (\n                              <div className=\"absolute top-2 right-2\">\n                                <Heart className=\"h-4 w-4 text-red-500 fill-current\" />\n                              </div>\n                            )}\n                          </div>\n                          \n                          {index > 0 && (\n                            <div className=\"text-center\">\n                              <Badge className=\"bg-blue-100 text-blue-700 text-xs\">\n                                +{(photo.week || 0) - (sortedPhotos[index-1].week || 0)} semanas\n                              </Badge>\n                            </div>\n                          )}\n                        </div>\n                      ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12\">\n                    <TrendingUp className=\"h-16 w-16 mx-auto mb-4 text-gray-400\" />\n                    <h3 className=\"text-lg font-semibold text-gray-800 mb-2\">\n                      Adicione mais fotos\n                    </h3>\n                    <p className=\"text-gray-600 mb-4\">\n                      Você precisa de pelo menos 2 fotos para fazer comparações\n                    </p>\n                    <Button\n                      onClick={() => setShowAddForm(true)}\n                      className=\"bg-gradient-to-r from-green-500 to-blue-500 hover:opacity-90\"\n                    >\n                      <Camera className=\"mr-2 h-4 w-4\" />\n                      Adicionar fotos\n                    </Button>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Milestone Progress */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Trophy className=\"mr-2 h-5 w-5 text-yellow-500\" />\n                  Marcos Documentados\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {Object.entries(milestones).map(([week, milestone]) => {\n                    const hasPhoto = photos.some(p => p.week === parseInt(week));\n                    return (\n                      <div key={week} className={`flex items-center justify-between p-3 rounded-lg ${\n                        hasPhoto ? 'bg-green-50 border border-green-200' : 'bg-gray-50 border border-gray-200'\n                      }`}>\n                        <div className=\"flex items-center space-x-3\">\n                          <div className={`w-6 h-6 rounded-full flex items-center justify-center ${\n                            hasPhoto ? 'bg-green-500 text-white' : 'bg-gray-300 text-gray-600'\n                          }`}>\n                            {hasPhoto ? '✓' : week}\n                          </div>\n                          <div>\n                            <div className=\"font-medium text-sm\">{milestone}</div>\n                            <div className=\"text-xs text-gray-600\">{week}ª semana</div>\n                          </div>\n                        </div>\n                        {hasPhoto ? (\n                          <Badge className=\"bg-green-100 text-green-700\">\n                            Documentado\n                          </Badge>\n                        ) : (\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => setShowAddForm(true)}\n                            className=\"text-xs h-6\"\n                          >\n                            Adicionar\n                          </Button>\n                        )}\n                      </div>\n                    );\n                  })}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Statistics Tab */}\n          <TabsContent value=\"stats\" className=\"space-y-6\">\n            {/* Overview Stats */}\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <Card className=\"text-center\">\n                <CardContent className=\"p-4\">\n                  <Camera className=\"h-8 w-8 text-blue-500 mx-auto mb-2\" />\n                  <div className=\"text-2xl font-bold text-blue-600\">{stats.totalPhotos}</div>\n                  <div className=\"text-xs text-gray-600\">Total de fotos</div>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"text-center\">\n                <CardContent className=\"p-4\">\n                  <Heart className=\"h-8 w-8 text-red-500 mx-auto mb-2\" />\n                  <div className=\"text-2xl font-bold text-red-600\">{stats.favoritePhotos}</div>\n                  <div className=\"text-xs text-gray-600\">Favoritas</div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"text-center\">\n                <CardContent className=\"p-4\">\n                  <Target className=\"h-8 w-8 text-purple-500 mx-auto mb-2\" />\n                  <div className=\"text-2xl font-bold text-purple-600\">\n                    {stats.milestoneCoverage}/{stats.totalMilestones}\n                  </div>\n                  <div className=\"text-xs text-gray-600\">Marcos documentados</div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"text-center\">\n                <CardContent className=\"p-4\">\n                  <TrendingUp className=\"h-8 w-8 text-green-500 mx-auto mb-2\" />\n                  <div className=\"text-2xl font-bold text-green-600\">\n                    {stats.coveragePercentage.toFixed(0)}%\n                  </div>\n                  <div className=\"text-xs text-gray-600\">Cobertura</div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Progress by Trimester */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <BarChart3 className=\"mr-2 h-5 w-5 text-indigo-500\" />\n                  Fotos por Trimestre\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {[1, 2, 3].map(trimester => {\n                    const photoCount = stats.photosByTrimester[trimester as keyof typeof stats.photosByTrimester];\n                    const maxPhotos = Math.max(...Object.values(stats.photosByTrimester));\n                    const percentage = maxPhotos > 0 ? (photoCount / maxPhotos) * 100 : 0;\n                    \n                    return (\n                      <div key={trimester}>\n                        <div className=\"flex justify-between text-sm mb-1\">\n                          <span>{getTrimesterName(trimester)}</span>\n                          <span className=\"font-semibold\">{photoCount} fotos</span>\n                        </div>\n                        <div className=\"w-full bg-gray-200 rounded-full h-3\">\n                          <div \n                            className=\"bg-gradient-to-r from-pink-500 to-blue-500 h-3 rounded-full transition-all\"\n                            style={{ width: `${percentage}%` }}\n                          />\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Activity Summary */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Zap className=\"mr-2 h-5 w-5 text-yellow-500\" />\n                  Resumo de Atividade\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div>\n                    <h4 className=\"font-medium text-gray-700 mb-3\">Cobertura da gestação</h4>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span>Semanas documentadas</span>\n                        <span className=\"font-semibold\">{stats.weeksWithPhotos} de 40</span>\n                      </div>\n                      <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                        <div \n                          className=\"bg-green-500 h-2 rounded-full\"\n                          style={{ width: `${stats.coveragePercentage}%` }}\n                        />\n                      </div>\n                      <div className=\"text-xs text-gray-600 text-center\">\n                        {stats.coveragePercentage.toFixed(1)}% da gestação documentada\n                      </div>\n                    </div>\n                  </div>\n\n                  <div>\n                    <h4 className=\"font-medium text-gray-700 mb-3\">Marcos importantes</h4>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span>Marcos capturados</span>\n                        <span className=\"font-semibold\">\n                          {stats.milestoneCoverage} de {stats.totalMilestones}\n                        </span>\n                      </div>\n                      <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                        <div \n                          className=\"bg-purple-500 h-2 rounded-full\"\n                          style={{ width: `${(stats.milestoneCoverage / stats.totalMilestones) * 100}%` }}\n                        />\n                      </div>\n                      <div className=\"text-xs text-gray-600 text-center\">\n                        {((stats.milestoneCoverage / stats.totalMilestones) * 100).toFixed(0)}% dos marcos documentados\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Recommendations */}\n            <Card className=\"bg-gradient-to-r from-amber-50 to-orange-50 border-amber-200\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center text-amber-700\">\n                  <Lightbulb className=\"mr-2 h-5 w-5\" />\n                  Recomendações\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {stats.coveragePercentage < 50 && (\n                    <div className=\"flex items-start space-x-2\">\n                      <Camera className=\"w-4 h-4 text-amber-600 mt-0.5 flex-shrink-0\" />\n                      <p className=\"text-sm text-amber-700\">\n                        Que tal documentar mais sua jornada? Tente tirar pelo menos uma foto por semana.\n                      </p>\n                    </div>\n                  )}\n                  \n                  {stats.milestoneCoverage < stats.totalMilestones / 2 && (\n                    <div className=\"flex items-start space-x-2\">\n                      <Star className=\"w-4 h-4 text-amber-600 mt-0.5 flex-shrink-0\" />\n                      <p className=\"text-sm text-amber-700\">\n                        Não perca os marcos importantes! Verifique na aba Comparar quais marcos ainda não foram documentados.\n                      </p>\n                    </div>\n                  )}\n                  \n                  {stats.favoritePhotos === 0 && stats.totalPhotos > 0 && (\n                    <div className=\"flex items-start space-x-2\">\n                      <Heart className=\"w-4 h-4 text-amber-600 mt-0.5 flex-shrink-0\" />\n                      <p className=\"text-sm text-amber-700\">\n                        Marque suas fotos favoritas! Toque no coração para destacar os momentos mais especiais.\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      {/* Add Photo Modal */}\n      {showAddForm && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50\">\n          <Card className=\"w-full max-w-lg max-h-[90vh] overflow-y-auto\">\n            <CardHeader>\n              <CardTitle className=\"text-gray-800 flex items-center\">\n                <Camera className=\"mr-2 h-5 w-5\" />\n                Nova Foto\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div>\n                  <Label className=\"text-gray-700 font-medium mb-2 block\">\n                    Upload da foto *\n                  </Label>\n                  <ObjectUploader\n                    maxNumberOfFiles={1}\n                    maxFileSize={10485760}\n                    onGetUploadParameters={handleGetUploadParameters}\n                    onComplete={handleUploadComplete}\n                    buttonClassName=\"w-full bg-gradient-to-r from-pink-500 to-blue-500 text-white hover:opacity-90\"\n                  >\n                    <div className=\"flex items-center justify-center\">\n                      <Image className=\"mr-2 h-4 w-4\" />\n                      {formData.uploadedPhotoURL ? \"Foto carregada ✓\" : \"Selecionar foto\"}\n                    </div>\n                  </ObjectUploader>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"caption\" className=\"text-gray-700 font-medium\">\n                    Legenda\n                  </Label>\n                  <Input\n                    id=\"caption\"\n                    placeholder=\"Ex: Barriguinha de 20 semanas ❤️\"\n                    value={formData.caption}\n                    onChange={(e) => setFormData(prev => ({ ...prev, caption: e.target.value }))}\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"week\" className=\"text-gray-700 font-medium\">\n                    Semana da gestação\n                  </Label>\n                  <Select \n                    value={formData.week} \n                    onValueChange={(value) => setFormData(prev => ({ ...prev, week: value }))}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Selecione a semana\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {Array.from({ length: 40 }, (_, i) => i + 1).map(week => (\n                        <SelectItem key={week} value={week.toString()}>\n                          {week}ª semana\n                          {milestones[week as keyof typeof milestones] && (\n                            <span className=\"ml-2 text-purple-600\">\n                              • {milestones[week as keyof typeof milestones]}\n                            </span>\n                          )}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"milestone\" className=\"text-gray-700 font-medium\">\n                    Marco personalizado\n                  </Label>\n                  <Input\n                    id=\"milestone\"\n                    placeholder=\"Ex: Primeira consulta, chá de bebê...\"\n                    value={formData.milestone}\n                    onChange={(e) => setFormData(prev => ({ ...prev, milestone: e.target.value }))}\n                  />\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"favorite\"\n                    checked={formData.favorite}\n                    onChange={(e) => setFormData(prev => ({ ...prev, favorite: e.target.checked }))}\n                    className=\"rounded border-gray-300\"\n                  />\n                  <Label htmlFor=\"favorite\" className=\"text-sm text-gray-700\">\n                    Marcar como favorita\n                  </Label>\n                </div>\n                \n                <div className=\"flex space-x-3 pt-4\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\"\n                    onClick={() => {\n                      setShowAddForm(false);\n                      setFormData({\n                        caption: \"\",\n                        week: \"\",\n                        milestone: \"\",\n                        favorite: false,\n                        uploadedPhotoURL: \"\"\n                      });\n                    }}\n                    className=\"flex-1\"\n                  >\n                    Cancelar\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    className=\"flex-1 bg-gradient-to-r from-pink-500 to-blue-500 hover:opacity-90\"\n                    disabled={addPhotoMutation.isPending || !formData.uploadedPhotoURL}\n                  >\n                    {addPhotoMutation.isPending ? (\n                      <LoadingSpinner size=\"sm\" className=\"mr-2\" />\n                    ) : (\n                      <Camera className=\"mr-2 h-4 w-4\" />\n                    )}\n                    Salvar\n                  </Button>\n                </div>\n              </form>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Photo Detail Modal */}\n      {showPhotoModal && selectedPhoto && (\n        <div className=\"fixed inset-0 bg-black/90 flex items-center justify-center p-4 z-50\">\n          <div className=\"max-w-4xl w-full max-h-full flex flex-col\">\n            <div className=\"flex items-center justify-between p-4\">\n              <div className=\"flex items-center space-x-4\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setShowPhotoModal(false)}\n                  className=\"text-white hover:bg-white/20\"\n                >\n                  ← Voltar\n                </Button>\n                {selectedPhoto.week && (\n                  <Badge className=\"bg-white/20 text-white\">\n                    {selectedPhoto.week}ª semana\n                  </Badge>\n                )}\n                {selectedPhoto.milestone && (\n                  <Badge className=\"bg-purple-500 text-white\">\n                    <Sparkles className=\"w-3 h-3 mr-1\" />\n                    {selectedPhoto.milestone}\n                  </Badge>\n                )}\n              </div>\n              \n              <div className=\"flex items-center space-x-2\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => toggleFavoriteMutation.mutate({\n                    id: selectedPhoto.id,\n                    favorite: !selectedPhoto.favorite\n                  })}\n                  className=\"text-white hover:bg-white/20\"\n                >\n                  <Heart className={`h-4 w-4 ${selectedPhoto.favorite ? 'fill-current text-red-400' : ''}`} />\n                </Button>\n                \n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"text-white hover:bg-white/20\"\n                >\n                  <Share2 className=\"h-4 w-4\" />\n                </Button>\n                \n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => deletePhotoMutation.mutate(selectedPhoto.id)}\n                  className=\"text-white hover:bg-red-600/50\"\n                >\n                  <Trash2 className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n            \n            <div className=\"flex-1 flex items-center justify-center\">\n              <img\n                src={selectedPhoto.objectPath}\n                alt={selectedPhoto.caption || \"Foto da gestação\"}\n                className=\"max-w-full max-h-full object-contain\"\n              />\n            </div>\n            \n            {(selectedPhoto.caption || selectedPhoto.date) && (\n              <div className=\"p-4 bg-black/50\">\n                {selectedPhoto.caption && (\n                  <p className=\"text-white text-center text-lg mb-2\">\n                    {selectedPhoto.caption}\n                  </p>\n                )}\n                <p className=\"text-white/70 text-center text-sm\">\n                  {format(new Date(selectedPhoto.date), \"dd 'de' MMMM 'de' yyyy\", { locale: ptBR })}\n                </p>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n\n      <BottomNavigation />\n    </div>\n  );\n}","size_bytes":47992},"client/src/pages/pregnancy-setup.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { ArrowLeft, Calendar, Info, Baby, Heart, User, Upload } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { ObjectUploader } from \"@/components/ObjectUploader\";\n\nexport default function PregnancySetup() {\n  const [, setLocation] = useLocation();\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  const [formData, setFormData] = useState({\n    lastMenstrualPeriod: \"\",\n    dueDate: \"\",\n  });\n  const [calculationMethod, setCalculationMethod] = useState<\"lmp\" | \"due\">(\"lmp\");\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [profilePhoto, setProfilePhoto] = useState<string>(\"\");\n\n  const calculateDueDate = (lmp: string) => {\n    const lmpDate = new Date(lmp);\n    const dueDate = new Date(lmpDate);\n    dueDate.setDate(dueDate.getDate() + 280); // 40 semanas\n    return dueDate.toISOString().split('T')[0];\n  };\n\n  const calculateLMP = (due: string) => {\n    const dueDate = new Date(due);\n    const lmpDate = new Date(dueDate);\n    lmpDate.setDate(lmpDate.getDate() - 280); // 40 semanas atrás\n    return lmpDate.toISOString().split('T')[0];\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    setError(\"\");\n\n    try {\n      let finalDueDate = formData.dueDate;\n      let finalLMP = formData.lastMenstrualPeriod;\n\n      if (calculationMethod === \"lmp\" && formData.lastMenstrualPeriod) {\n        finalDueDate = calculateDueDate(formData.lastMenstrualPeriod);\n      } else if (calculationMethod === \"due\" && formData.dueDate) {\n        finalLMP = calculateLMP(formData.dueDate);\n      }\n\n      await apiRequest(\"POST\", \"/api/pregnancies\", {\n        dueDate: finalDueDate,\n        lastMenstrualPeriod: finalLMP,\n        isActive: true,\n      });\n\n      // Invalidar cache da query de gravidez ativa\n      queryClient.invalidateQueries({ queryKey: [\"/api/pregnancies/active\"] });\n      \n      // Redirecionar para o dashboard após salvar\n      setLocation(\"/\");\n    } catch (error: any) {\n      setError(error.message || \"Erro ao salvar dados da gravidez\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col items-center justify-center p-6 gradient-bg\">\n      <Card className=\"w-full max-w-md glass-effect shadow-2xl\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex items-center justify-between\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => setLocation(\"/login\")}\n              className=\"text-gray-600 hover:text-gray-800\"\n              data-testid=\"button-back\"\n            >\n              <ArrowLeft className=\"h-5 w-5\" />\n            </Button>\n            <div className=\"flex-1 flex flex-col items-center\">\n              <div className=\"mb-3\">\n                <div className=\"w-20 h-20 border-4 border-white shadow-lg rounded-full overflow-hidden bg-gradient-to-r from-baby-pink to-baby-blue flex items-center justify-center relative\">\n                  {profilePhoto || user?.profilePhotoUrl ? (\n                    <img \n                      src={profilePhoto || user.profilePhotoUrl} \n                      alt={user.name} \n                      className=\"w-full h-full object-cover\"\n                    />\n                  ) : (\n                    <User className=\"w-10 h-10 text-white\" />\n                  )}\n                  <div className=\"absolute -bottom-1 -right-1\">\n                    <ObjectUploader\n                      maxNumberOfFiles={1}\n                      maxFileSize={5242880}\n                      onGetUploadParameters={async () => {\n                        const response = await apiRequest(\"POST\", \"/api/uploads/profile-photo\");\n                        return {\n                          method: \"PUT\" as const,\n                          url: response.uploadURL,\n                        };\n                      }}\n                      onComplete={async (result) => {\n                        if (result.successful?.[0]) {\n                          const uploadURL = result.successful[0].uploadURL;\n                          console.log(\"Upload URL:\", uploadURL);\n                          setProfilePhoto(uploadURL);\n                          \n                          try {\n                            const response = await apiRequest(\"PATCH\", \"/api/auth/profile\", {\n                              profilePhotoUrl: uploadURL,\n                            });\n                            console.log(\"Profile updated:\", response);\n                          } catch (error) {\n                            console.error(\"Erro ao salvar foto:\", error);\n                            setError(\"Erro ao salvar foto de perfil\");\n                          }\n                        }\n                      }}\n                      buttonClassName=\"w-8 h-8 rounded-full bg-white shadow-md flex items-center justify-center p-0 min-w-0 h-8\"\n                    >\n                      <Upload className=\"w-4 h-4 text-baby-pink-dark\" />\n                    </ObjectUploader>\n                  </div>\n                </div>\n              </div>\n              <CardTitle className=\"text-2xl font-bold text-charcoal\">\n                Dados da Gravidez\n              </CardTitle>\n              <p className=\"text-gray-600 mt-2\">\n                Vamos calcular em que semana você está\n              </p>\n            </div>\n            <div className=\"w-10\" /> {/* Spacer para centralizar título */}\n          </div>\n        </CardHeader>\n\n        <CardContent className=\"p-6\">\n          {error && (\n            <Alert className=\"mb-4 border-red-200 bg-red-50\">\n              <Info className=\"h-4 w-4 text-red-600\" />\n              <AlertDescription className=\"text-red-700\">\n                {error}\n              </AlertDescription>\n            </Alert>\n          )}\n\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {/* Método de cálculo */}\n            <div className=\"space-y-3\">\n              <Label className=\"text-charcoal font-medium\">Como você prefere calcular?</Label>\n              <div className=\"flex gap-3\">\n                <Button\n                  type=\"button\"\n                  variant={calculationMethod === \"lmp\" ? \"default\" : \"outline\"}\n                  onClick={() => setCalculationMethod(\"lmp\")}\n                  className={`flex-1 ${\n                    calculationMethod === \"lmp\" \n                      ? \"bg-gradient-to-r from-baby-pink-dark to-baby-blue-dark text-white\" \n                      : \"border-gray-300\"\n                  }`}\n                  data-testid=\"button-lmp\"\n                >\n                  <Calendar className=\"h-4 w-4 mr-2\" />\n                  Última Menstruação\n                </Button>\n                <Button\n                  type=\"button\"\n                  variant={calculationMethod === \"due\" ? \"default\" : \"outline\"}\n                  onClick={() => setCalculationMethod(\"due\")}\n                  className={`flex-1 ${\n                    calculationMethod === \"due\" \n                      ? \"bg-gradient-to-r from-baby-pink-dark to-baby-blue-dark text-white\" \n                      : \"border-gray-300\"\n                  }`}\n                  data-testid=\"button-due\"\n                >\n                  <Calendar className=\"h-4 w-4 mr-2\" />\n                  Data Prevista\n                </Button>\n              </div>\n            </div>\n\n            {/* Data da última menstruação */}\n            {calculationMethod === \"lmp\" && (\n              <div>\n                <Label className=\"text-charcoal font-medium\">\n                  Data da última menstruação *\n                </Label>\n                <Input\n                  type=\"date\"\n                  value={formData.lastMenstrualPeriod}\n                  onChange={(e) => setFormData(prev => ({ ...prev, lastMenstrualPeriod: e.target.value }))}\n                  className=\"mt-1 focus:ring-2 focus:ring-baby-pink focus:border-baby-pink-dark\"\n                  data-testid=\"input-lmp\"\n                  required\n                />\n                <p className=\"text-sm text-gray-500 mt-1\">\n                  Calculamos automaticamente a data prevista do parto\n                </p>\n              </div>\n            )}\n\n            {/* Data prevista do parto */}\n            {calculationMethod === \"due\" && (\n              <div>\n                <Label className=\"text-charcoal font-medium\">\n                  Data prevista do parto *\n                </Label>\n                <Input\n                  type=\"date\"\n                  value={formData.dueDate}\n                  onChange={(e) => setFormData(prev => ({ ...prev, dueDate: e.target.value }))}\n                  className=\"mt-1 focus:ring-2 focus:ring-baby-pink focus:border-baby-pink-dark\"\n                  data-testid=\"input-due\"\n                  required\n                />\n                <p className=\"text-sm text-gray-500 mt-1\">\n                  Calculamos automaticamente a data da última menstruação\n                </p>\n              </div>\n            )}\n\n            <Button\n              type=\"submit\"\n              className=\"w-full bg-gradient-to-r from-baby-pink-dark to-baby-blue-dark hover:opacity-90 text-white font-medium py-3\"\n              disabled={loading || (!formData.lastMenstrualPeriod && !formData.dueDate)}\n              data-testid=\"button-continue\"\n            >\n              {loading ? \"Salvando...\" : \"Continuar\"}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":10065},"client/src/pages/profile.tsx":{"content":"import { useState } from \"react\";\nimport * as React from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { usePregnancy } from \"@/hooks/use-pregnancy\";\nimport { useLocation } from \"wouter\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { LoadingSpinner } from \"@/components/ui/loading-spinner\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport BottomNavigation from \"@/components/layout/bottom-navigation\";\nimport { \n  ArrowLeft, \n  Camera, \n  User, \n  Save, \n  Calendar,\n  Mail,\n  Edit2\n} from \"lucide-react\";\n\nexport default function Profile() {\n  const { user, isLoading: authLoading } = useAuth();\n  const { pregnancy, isLoading: pregnancyLoading } = usePregnancy();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const [isEditing, setIsEditing] = useState(false);\n  const [formData, setFormData] = useState({\n    name: user?.name || \"\",\n    email: user?.email || \"\",\n    birthDate: user?.birthDate ? new Date(user.birthDate).toISOString().split('T')[0] : \"\",\n    lastMenstrualPeriod: pregnancy?.lastMenstrualPeriod ? \n      new Date(pregnancy.lastMenstrualPeriod).toISOString().split('T')[0] : \"\"\n  });\n\n  // Atualizar formData quando user ou pregnancy mudarem\n  React.useEffect(() => {\n    if (user) {\n      setFormData(prev => ({\n        ...prev,\n        name: user.name || \"\",\n        email: user.email || \"\",\n        birthDate: user.birthDate ? new Date(user.birthDate).toISOString().split('T')[0] : \"\"\n      }));\n    }\n  }, [user]);\n\n  React.useEffect(() => {\n    if (pregnancy?.lastMenstrualPeriod) {\n      setFormData(prev => ({\n        ...prev,\n        lastMenstrualPeriod: new Date(pregnancy.lastMenstrualPeriod!).toISOString().split('T')[0]\n      }));\n    }\n  }, [pregnancy]);\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      // Atualizar dados do usuário\n      const userResponse = await apiRequest(\"PUT\", \"/api/auth/profile\", {\n        name: data.name,\n        birthDate: data.birthDate ? new Date(data.birthDate) : null\n      });\n      \n      // Se tem dados de gravidez e DUM foi alterada, atualizar a gravidez\n      if (pregnancy && data.lastMenstrualPeriod) {\n        await apiRequest(\"PUT\", `/api/pregnancies/${pregnancy.id}`, {\n          lastMenstrualPeriod: new Date(data.lastMenstrualPeriod)\n        });\n      }\n      \n      return userResponse.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Perfil atualizado!\",\n        description: \"Suas informações foram salvas com sucesso.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/pregnancies/active\"] });\n      setIsEditing(false);\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Não foi possível salvar as alterações.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const getInitials = (name: string) => {\n    return name\n      .split(\" \")\n      .map(word => word.charAt(0).toUpperCase())\n      .slice(0, 2)\n      .join(\"\");\n  };\n\n  if (authLoading || pregnancyLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-b from-pink-50 via-purple-50 to-blue-50\">\n        <LoadingSpinner size=\"lg\" />\n      </div>\n    );\n  }\n\n  if (!user) {\n    setLocation(\"/login\");\n    return null;\n  }\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    updateProfileMutation.mutate(formData);\n  };\n\n  const handleCancel = () => {\n    setIsEditing(false);\n    setFormData({\n      name: user?.name || \"\",\n      email: user?.email || \"\",\n      birthDate: user?.birthDate ? new Date(user.birthDate).toISOString().split('T')[0] : \"\",\n      lastMenstrualPeriod: pregnancy?.lastMenstrualPeriod ? \n        new Date(pregnancy.lastMenstrualPeriod).toISOString().split('T')[0] : \"\"\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-pink-50 via-purple-50 to-blue-50 pb-20\">\n      <div className=\"p-4 pt-12\">\n        {/* Header */}\n        <div className=\"flex items-center mb-8\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setLocation(\"/\")}\n            className=\"mr-4 hover:bg-white/10\"\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Button>\n          <h1 className=\"text-2xl font-bold text-gray-800\">Meu Perfil</h1>\n        </div>\n\n        {/* Profile Header */}\n        <Card className=\"glass-effect shadow-xl mb-6\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex flex-col items-center space-y-4\">\n              <div className=\"relative\">\n                <Avatar className=\"w-24 h-24 bg-pink-300\">\n                  <AvatarFallback className=\"text-white text-2xl font-bold\">\n                    {getInitials(user.name)}\n                  </AvatarFallback>\n                </Avatar>\n                <Button\n                  type=\"button\"\n                  size=\"sm\"\n                  className=\"absolute -bottom-2 -right-2 w-10 h-10 rounded-full bg-purple-500 hover:bg-purple-600 p-0\"\n                  data-testid=\"button-change-photo\"\n                >\n                  <Camera className=\"h-4 w-4\" />\n                </Button>\n              </div>\n              <div className=\"text-center\">\n                <h2 className=\"text-xl font-bold text-gray-800\" data-testid=\"text-user-name\">\n                  {user.name}\n                </h2>\n                <p className=\"text-gray-600\" data-testid=\"text-user-email\">\n                  {user.email}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {isEditing ? (\n          /* Edit Mode */\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {/* Personal Information */}\n            <Card className=\"glass-effect shadow-xl\">\n              <CardHeader>\n                <CardTitle className=\"text-lg text-gray-800 flex items-center\">\n                  <User className=\"h-5 w-5 mr-2 text-pink-500\" />\n                  Informações Pessoais\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"name\" className=\"text-gray-700\">Nome Completo</Label>\n                  <Input\n                    id=\"name\"\n                    value={formData.name}\n                    onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                    placeholder=\"Digite seu nome completo\"\n                    className=\"border-gray-200 focus:border-pink-400\"\n                    data-testid=\"input-name\"\n                    required\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\" className=\"text-gray-700\">Email</Label>\n                  <Input\n                    id=\"email\"\n                    value={formData.email}\n                    disabled\n                    className=\"border-gray-200 bg-gray-50 text-gray-500\"\n                    data-testid=\"input-email\"\n                  />\n                  <p className=\"text-xs text-gray-500\">O email não pode ser alterado</p>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"birthDate\" className=\"text-gray-700\">Data de Nascimento</Label>\n                  <Input\n                    id=\"birthDate\"\n                    type=\"date\"\n                    value={formData.birthDate}\n                    onChange={(e) => setFormData(prev => ({ ...prev, birthDate: e.target.value }))}\n                    className=\"border-gray-200 focus:border-pink-400\"\n                    data-testid=\"input-birth-date\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Pregnancy Information */}\n            <Card className=\"glass-effect shadow-xl\">\n              <CardHeader>\n                <CardTitle className=\"text-lg text-gray-800 flex items-center\">\n                  <Calendar className=\"h-5 w-5 mr-2 text-purple-500\" />\n                  Informações da Gravidez\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"lastMenstrualPeriod\" className=\"text-gray-700\">\n                    Data da Última Menstruação (DUM)\n                  </Label>\n                  <Input\n                    id=\"lastMenstrualPeriod\"\n                    type=\"date\"\n                    value={formData.lastMenstrualPeriod}\n                    onChange={(e) => setFormData(prev => ({ \n                      ...prev, \n                      lastMenstrualPeriod: e.target.value \n                    }))}\n                    className=\"border-gray-200 focus:border-purple-400\"\n                    data-testid=\"input-last-menstrual-period\"\n                  />\n                  <p className=\"text-xs text-gray-500\">\n                    Esta data é usada para calcular a idade gestacional\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Action Buttons */}\n            <div className=\"flex space-x-3\">\n              <Button\n                type=\"submit\"\n                disabled={updateProfileMutation.isPending}\n                className=\"flex-1 bg-gradient-to-r from-pink-400 to-purple-500 hover:from-pink-500 hover:to-purple-600 text-white font-semibold py-3 rounded-xl shadow-lg\"\n                data-testid=\"button-save-profile\"\n              >\n                {updateProfileMutation.isPending ? (\n                  <>\n                    <LoadingSpinner size=\"sm\" className=\"mr-2\" />\n                    Salvando...\n                  </>\n                ) : (\n                  <>\n                    <Save className=\"h-5 w-5 mr-2\" />\n                    Salvar\n                  </>\n                )}\n              </Button>\n              \n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={handleCancel}\n                className=\"flex-1 py-3 rounded-xl\"\n                data-testid=\"button-cancel-edit\"\n              >\n                Cancelar\n              </Button>\n            </div>\n          </form>\n        ) : (\n          /* View Mode */\n          <div className=\"space-y-6\">\n            {/* Information Display */}\n            <Card className=\"glass-effect shadow-xl\">\n              <CardHeader>\n                <CardTitle className=\"text-lg text-gray-800 flex items-center justify-between\">\n                  <div className=\"flex items-center\">\n                    <User className=\"h-5 w-5 mr-2 text-pink-500\" />\n                    Informações Pessoais\n                  </div>\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={() => setIsEditing(true)}\n                    className=\"p-2\"\n                    data-testid=\"button-edit-profile\"\n                  >\n                    <Edit2 className=\"h-4 w-4\" />\n                  </Button>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <User className=\"h-5 w-5 text-gray-400\" />\n                  <div>\n                    <Label className=\"text-sm text-gray-600\">Nome</Label>\n                    <p className=\"font-medium\" data-testid=\"display-name\">{user.name}</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center space-x-3\">\n                  <Mail className=\"h-5 w-5 text-gray-400\" />\n                  <div>\n                    <Label className=\"text-sm text-gray-600\">Email</Label>\n                    <p className=\"font-medium\" data-testid=\"display-email\">{user.email}</p>\n                  </div>\n                </div>\n                \n                {user.birthDate && (\n                  <div className=\"flex items-center space-x-3\">\n                    <Calendar className=\"h-5 w-5 text-gray-400\" />\n                    <div>\n                      <Label className=\"text-sm text-gray-600\">Data de Nascimento</Label>\n                      <p className=\"font-medium\" data-testid=\"display-birth-date\">\n                        {new Date(user.birthDate).toLocaleDateString('pt-BR')}\n                      </p>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Pregnancy Information */}\n            {pregnancy && (\n              <Card className=\"glass-effect shadow-xl\">\n                <CardHeader>\n                  <CardTitle className=\"text-lg text-gray-800 flex items-center\">\n                    <Calendar className=\"h-5 w-5 mr-2 text-purple-500\" />\n                    Informações da Gravidez\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div className=\"p-3 bg-purple-50 rounded-lg\">\n                      <Label className=\"text-sm text-gray-600\">Data Prevista do Parto</Label>\n                      <p className=\"font-medium text-purple-700\" data-testid=\"display-due-date\">\n                        {new Date(pregnancy.dueDate).toLocaleDateString('pt-BR')}\n                      </p>\n                    </div>\n                    \n                    {pregnancy.lastMenstrualPeriod && (\n                      <div className=\"p-3 bg-pink-50 rounded-lg\">\n                        <Label className=\"text-sm text-gray-600\">Última Menstruação (DUM)</Label>\n                        <p className=\"font-medium text-pink-700\" data-testid=\"display-last-menstrual-period\">\n                          {new Date(pregnancy.lastMenstrualPeriod).toLocaleDateString('pt-BR')}\n                        </p>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Edit Button */}\n            <Card className=\"glass-effect shadow-xl\">\n              <CardContent className=\"p-6\">\n                <Button\n                  onClick={() => setIsEditing(true)}\n                  className=\"w-full bg-gradient-to-r from-pink-400 to-purple-500 hover:from-pink-500 hover:to-purple-600 text-white font-semibold py-3 rounded-xl shadow-lg\"\n                  data-testid=\"button-start-edit\"\n                >\n                  <Edit2 className=\"h-5 w-5 mr-2\" />\n                  Editar Perfil\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n      </div>\n\n      <BottomNavigation />\n    </div>\n  );\n}","size_bytes":15353},"client/src/pages/recipes.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport BottomNavigation from \"@/components/layout/bottom-navigation\";\nimport { ArrowLeft, Clock, Users, ChefHat, Leaf, Apple, Coffee, Utensils } from \"lucide-react\";\n\nconst recipes = [\n  {\n    id: 1,\n    title: \"Smoothie de Frutas Vermelhas\",\n    category: \"Bebidas\",\n    prepTime: \"5 min\",\n    servings: 2,\n    trimester: \"Todos\",\n    nutrients: [\"Ácido Fólico\", \"Vitamina C\", \"Ferro\"],\n    ingredients: [\n      \"1 xícara de morangos\",\n      \"1/2 xícara de mirtilios\",\n      \"1 banana\",\n      \"1 xícara de leite\",\n      \"1 colher de mel\"\n    ],\n    instructions: [\n      \"Lave bem as frutas vermelhas\",\n      \"Descasque e corte a banana\",\n      \"Coloque todos os ingredientes no liquidificador\",\n      \"Bata até ficar homogêneo\",\n      \"Sirva imediatamente\"\n    ],\n    benefits: \"Rico em antioxidantes e ácido fólico, essencial para o desenvolvimento do bebê\"\n  },\n  {\n    id: 2,\n    title: \"Salmão Grelhado com Quinoa\",\n    category: \"Pratos Principais\",\n    prepTime: \"25 min\",\n    servings: 2,\n    trimester: \"2º e 3º\",\n    nutrients: [\"Ômega-3\", \"Proteínas\", \"DHA\"],\n    ingredients: [\n      \"2 filés de salmão\",\n      \"1 xícara de quinoa\",\n      \"Brócolis\",\n      \"Azeite de oliva\",\n      \"Limão\",\n      \"Ervas finas\"\n    ],\n    instructions: [\n      \"Cozinhe a quinoa conforme instruções da embalagem\",\n      \"Tempere o salmão com limão e ervas\",\n      \"Grelhe o salmão por 4-5 minutos de cada lado\",\n      \"Refogue o brócolis no vapor\",\n      \"Sirva tudo junto\"\n    ],\n    benefits: \"Excelente fonte de ômega-3 para desenvolvimento cerebral do bebê\"\n  },\n  {\n    id: 3,\n    title: \"Aveia com Frutas e Nozes\",\n    category: \"Café da Manhã\",\n    prepTime: \"10 min\",\n    servings: 1,\n    trimester: \"Todos\",\n    nutrients: [\"Fibras\", \"Proteínas\", \"Vitaminas\"],\n    ingredients: [\n      \"1/2 xícara de aveia\",\n      \"1 xícara de leite\",\n      \"1 banana fatiada\",\n      \"2 colheres de nozes\",\n      \"1 colher de mel\",\n      \"Canela\"\n    ],\n    instructions: [\n      \"Cozinhe a aveia com o leite em fogo baixo\",\n      \"Adicione a canela\",\n      \"Sirva com banana e nozes por cima\",\n      \"Regue com mel\"\n    ],\n    benefits: \"Rica em fibras, ajuda no funcionamento intestinal durante a gravidez\"\n  },\n  {\n    id: 4,\n    title: \"Salada de Espinafre com Morango\",\n    category: \"Saladas\",\n    prepTime: \"15 min\",\n    servings: 2,\n    trimester: \"Todos\",\n    nutrients: [\"Ferro\", \"Ácido Fólico\", \"Vitamina K\"],\n    ingredients: [\n      \"2 xícaras de espinafre baby\",\n      \"1 xícara de morangos\",\n      \"1/4 de xícara de queijo de cabra\",\n      \"Nozes picadas\",\n      \"Vinagrete balsâmico\"\n    ],\n    instructions: [\n      \"Lave bem o espinafre e os morangos\",\n      \"Corte os morangos em fatias\",\n      \"Monte a salada intercalando ingredientes\",\n      \"Finalize com vinagrete\"\n    ],\n    benefits: \"Alto teor de ferro e ácido fólico, prevenindo anemia gestacional\"\n  },\n  {\n    id: 5,\n    title: \"Chá de Gengibre com Limão\",\n    category: \"Bebidas\",\n    prepTime: \"8 min\",\n    servings: 1,\n    trimester: \"1º\",\n    nutrients: [\"Vitamina C\", \"Antioxidantes\"],\n    ingredients: [\n      \"1 pedaço pequeno de gengibre\",\n      \"Suco de 1/2 limão\",\n      \"1 xícara de água quente\",\n      \"Mel a gosto\"\n    ],\n    instructions: [\n      \"Descasque e fatie o gengibre\",\n      \"Ferva a água com o gengibre por 5 minutos\",\n      \"Adicione o suco de limão\",\n      \"Adoce com mel se desejar\"\n    ],\n    benefits: \"Ajuda a combater náuseas matinais no primeiro trimestre\"\n  },\n  {\n    id: 6,\n    title: \"Wrap de Frango com Abacate\",\n    category: \"Lanches\",\n    prepTime: \"15 min\",\n    servings: 2,\n    trimester: \"Todos\",\n    nutrients: [\"Proteínas\", \"Gorduras Boas\", \"Fibras\"],\n    ingredients: [\n      \"2 tortilhas integrais\",\n      \"200g de peito de frango grelhado\",\n      \"1 abacate maduro\",\n      \"Folhas de alface\",\n      \"Tomate cereja\",\n      \"Cream cheese light\"\n    ],\n    instructions: [\n      \"Amasse o abacate com um garfo\",\n      \"Espalhe cream cheese na tortilha\",\n      \"Adicione frango, abacate e vegetais\",\n      \"Enrole bem apertado\",\n      \"Corte ao meio para servir\"\n    ],\n    benefits: \"Lanche nutritivo e prático, rico em proteínas e gorduras saudáveis\"\n  }\n];\n\nconst categories = [\n  { name: \"Todos\", icon: Utensils, color: \"text-charcoal\" },\n  { name: \"Café da Manhã\", icon: Coffee, color: \"text-baby-pink-dark\" },\n  { name: \"Pratos Principais\", icon: ChefHat, color: \"text-baby-blue-dark\" },\n  { name: \"Lanches\", icon: Apple, color: \"text-coral\" },\n  { name: \"Bebidas\", icon: Leaf, color: \"text-green-600\" },\n  { name: \"Saladas\", icon: Leaf, color: \"text-green-500\" },\n];\n\nexport default function Recipes() {\n  const [, setLocation] = useLocation();\n  const [selectedCategory, setSelectedCategory] = React.useState(\"Todos\");\n\n  const filteredRecipes = selectedCategory === \"Todos\" \n    ? recipes \n    : recipes.filter(recipe => recipe.category === selectedCategory);\n\n  const getCategoryColor = (category: string) => {\n    switch (category) {\n      case \"Café da Manhã\": return \"bg-baby-pink text-baby-pink-dark\";\n      case \"Pratos Principais\": return \"bg-baby-blue text-baby-blue-dark\";\n      case \"Lanches\": return \"bg-coral/20 text-coral\";\n      case \"Bebidas\": return \"bg-green-100 text-green-600\";\n      case \"Saladas\": return \"bg-green-50 text-green-500\";\n      default: return \"bg-gray-100 text-gray-600\";\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-baby-pink via-cream to-baby-blue pb-20\">\n      <div className=\"p-4 pt-12\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <Button \n            variant=\"ghost\" \n            size=\"icon\"\n            className=\"rounded-full bg-white shadow-lg\"\n            onClick={() => setLocation(\"/\")}\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"h-5 w-5 text-charcoal\" />\n          </Button>\n          <h2 className=\"text-xl font-bold text-charcoal\" data-testid=\"text-page-title\">\n            Receitas Saudáveis\n          </h2>\n          <div className=\"w-10\" />\n        </div>\n\n        {/* Category Filter */}\n        <div className=\"mb-6\">\n          <div className=\"flex space-x-2 overflow-x-auto pb-2\">\n            {categories.map((category) => {\n              const Icon = category.icon;\n              return (\n                <Button\n                  key={category.name}\n                  variant={selectedCategory === category.name ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  className={`flex-shrink-0 ${\n                    selectedCategory === category.name\n                      ? \"bg-baby-pink-dark text-white\"\n                      : \"text-charcoal\"\n                  }`}\n                  onClick={() => setSelectedCategory(category.name)}\n                  data-testid={`button-category-${category.name.toLowerCase().replace(' ', '-')}`}\n                >\n                  <Icon className=\"h-4 w-4 mr-1\" />\n                  {category.name}\n                </Button>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* Recipes */}\n        <div className=\"space-y-4\">\n          {filteredRecipes.map((recipe) => (\n            <Card key={recipe.id} className=\"shadow-lg\" data-testid={`recipe-${recipe.id}`}>\n              <CardHeader>\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <CardTitle className=\"text-lg text-charcoal mb-2\">\n                      {recipe.title}\n                    </CardTitle>\n                    <div className=\"flex items-center space-x-3 text-sm mb-3\">\n                      <Badge className={getCategoryColor(recipe.category)}>\n                        {recipe.category}\n                      </Badge>\n                      <div className=\"flex items-center text-gray-600\">\n                        <Clock className=\"h-3 w-3 mr-1\" />\n                        {recipe.prepTime}\n                      </div>\n                      <div className=\"flex items-center text-gray-600\">\n                        <Users className=\"h-3 w-3 mr-1\" />\n                        {recipe.servings} porções\n                      </div>\n                      <span className=\"text-baby-pink-dark font-medium\">\n                        {recipe.trimester} trimestre(s)\n                      </span>\n                    </div>\n                    \n                    {/* Nutrients */}\n                    <div className=\"flex flex-wrap gap-1 mb-3\">\n                      {recipe.nutrients.map((nutrient, index) => (\n                        <span \n                          key={index}\n                          className=\"px-2 py-1 bg-green-100 text-green-700 text-xs rounded-full\"\n                          data-testid={`nutrient-${recipe.id}-${index}`}\n                        >\n                          {nutrient}\n                        </span>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </CardHeader>\n              \n              <CardContent className=\"space-y-4\">\n                {/* Benefits */}\n                <div className=\"bg-baby-pink/10 p-3 rounded-lg\">\n                  <h4 className=\"font-semibold text-baby-pink-dark mb-1 text-sm\">\n                    Benefícios na Gravidez\n                  </h4>\n                  <p className=\"text-sm text-gray-700\" data-testid={`benefits-${recipe.id}`}>\n                    {recipe.benefits}\n                  </p>\n                </div>\n\n                {/* Ingredients */}\n                <div>\n                  <h4 className=\"font-semibold text-charcoal mb-2 text-sm\">Ingredientes</h4>\n                  <div className=\"space-y-1\">\n                    {recipe.ingredients.map((ingredient, index) => (\n                      <div \n                        key={index} \n                        className=\"flex items-start space-x-2\"\n                        data-testid={`ingredient-${recipe.id}-${index}`}\n                      >\n                        <div className=\"w-1.5 h-1.5 bg-baby-pink-dark rounded-full mt-2 flex-shrink-0\" />\n                        <span className=\"text-sm text-gray-700\">{ingredient}</span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Instructions */}\n                <div>\n                  <h4 className=\"font-semibold text-charcoal mb-2 text-sm\">Modo de Preparo</h4>\n                  <div className=\"space-y-2\">\n                    {recipe.instructions.map((instruction, index) => (\n                      <div \n                        key={index} \n                        className=\"flex items-start space-x-2\"\n                        data-testid={`instruction-${recipe.id}-${index}`}\n                      >\n                        <span className=\"text-baby-blue-dark font-bold text-sm mt-0.5 flex-shrink-0\">\n                          {index + 1}.\n                        </span>\n                        <span className=\"text-sm text-gray-700\">{instruction}</span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {filteredRecipes.length === 0 && (\n          <Card className=\"shadow-lg\">\n            <CardContent className=\"text-center py-12\">\n              <ChefHat className=\"h-16 w-16 mx-auto mb-4 text-gray-400\" />\n              <h3 className=\"text-lg font-semibold text-charcoal mb-2\">\n                Nenhuma receita encontrada\n              </h3>\n              <p className=\"text-gray-600\">\n                Não há receitas disponíveis para esta categoria\n              </p>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      <BottomNavigation />\n    </div>\n  );\n}\n","size_bytes":12070},"client/src/pages/reset-password.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useLocation } from \"wouter\";\nimport { Eye, EyeOff, Lock, CheckCircle, AlertCircle, Mail, ArrowLeft, Heart } from \"lucide-react\";\nimport logoImage from \"@assets/4_1755308511005.png\";\nimport { TokenReset } from \"./token-reset\";\n\n// Componente de animação de fundo igual ao login\nfunction AnimatedBackground() {\n  return (\n    <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n      {/* Corações flutuantes */}\n      {[...Array(8)].map((_, i) => (\n        <Heart\n          key={`heart-${i}`}\n          className={`absolute text-pink-300/30 animate-float-${i % 4 + 1}`}\n          size={20 + (i % 3) * 10}\n          style={{\n            left: `${10 + (i * 12) % 80}%`,\n            top: `${15 + (i * 15) % 70}%`,\n            animationDelay: `${i * 0.7}s`,\n            animationDuration: `${3 + (i % 3)}s`\n          }}\n        />\n      ))}\n      \n      {/* Bolinhas flutuantes */}\n      {[...Array(12)].map((_, i) => (\n        <div\n          key={`bubble-${i}`}\n          className={`absolute rounded-full bg-gradient-to-r from-pink-200/20 to-blue-200/20 animate-bounce`}\n          style={{\n            width: `${8 + (i % 4) * 6}px`,\n            height: `${8 + (i % 4) * 6}px`,\n            left: `${5 + (i * 8) % 90}%`,\n            top: `${10 + (i * 8) % 80}%`,\n            animationDelay: `${i * 0.5}s`,\n            animationDuration: `${4 + (i % 3)}s`\n          }}\n        />\n      ))}\n      \n      {/* Estrelas piscantes */}\n      {[...Array(6)].map((_, i) => (\n        <div\n          key={`star-${i}`}\n          className={`absolute w-2 h-2 bg-yellow-300/40 animate-pulse`}\n          style={{\n            left: `${20 + (i * 15) % 60}%`,\n            top: `${20 + (i * 12) % 60}%`,\n            animationDelay: `${i * 1.2}s`,\n            clipPath: 'polygon(50% 0%, 61% 35%, 98% 35%, 68% 57%, 79% 91%, 50% 70%, 21% 91%, 32% 57%, 2% 35%, 39% 35%)'\n          }}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default function ResetPassword() {\n  const [, setLocation] = useLocation();\n  const [token, setToken] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [emailLoading, setEmailLoading] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [emailMessage, setEmailMessage] = useState(\"\");\n  const [success, setSuccess] = useState(false);\n  const [errors, setErrors] = useState<{email?: string; password?: string; confirmPassword?: string; general?: string}>({});\n  const [isResetMode, setIsResetMode] = useState(false);\n  const [showTokenReset, setShowTokenReset] = useState(false);\n  const [sentEmail, setSentEmail] = useState(\"\");\n\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const tokenFromUrl = urlParams.get('token');\n    const emailFromUrl = urlParams.get('email');\n    \n    if (tokenFromUrl) {\n      setToken(tokenFromUrl);\n      setIsResetMode(true);\n    } else if (emailFromUrl) {\n      setEmail(decodeURIComponent(emailFromUrl));\n      setIsResetMode(false);\n    } else {\n      setIsResetMode(false);\n    }\n  }, []);\n\n  const validateEmailForm = () => {\n    const newErrors: typeof errors = {};\n\n    if (!email) {\n      newErrors.email = \"Email é obrigatório\";\n    } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)) {\n      newErrors.email = \"Email inválido\";\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const validatePasswordForm = () => {\n    const newErrors: typeof errors = {};\n\n    if (!password) {\n      newErrors.password = \"Senha é obrigatória\";\n    } else if (password.length < 6) {\n      newErrors.password = \"Senha deve ter pelo menos 6 caracteres\";\n    }\n\n    if (!confirmPassword) {\n      newErrors.confirmPassword = \"Confirmação de senha é obrigatória\";\n    } else if (password !== confirmPassword) {\n      newErrors.confirmPassword = \"Senhas não coincidem\";\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleEmailSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setEmailMessage(\"\");\n    setErrors({});\n    \n    if (!validateEmailForm()) {\n      return;\n    }\n    \n    setEmailLoading(true);\n\n    try {\n      const response = await apiRequest(\"POST\", \"/api/auth/forgot-password\", {\n        email,\n      });\n      const data = await response.json();\n      setEmailMessage(data.message);\n      setSentEmail(email);\n      setShowTokenReset(true);\n    } catch (error: any) {\n      console.error(\"Forgot password error:\", error);\n      if (error.message.includes(\"não cadastrado\")) {\n        setErrors({ email: \"Email não cadastrado. Verifique o endereço ou crie uma conta.\" });\n      } else {\n        setErrors({ general: error.message || \"Erro ao solicitar recuperação\" });\n      }\n    } finally {\n      setEmailLoading(false);\n    }\n  };\n\n  const handlePasswordSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setMessage(\"\");\n    setErrors({});\n    \n    if (!validatePasswordForm()) {\n      return;\n    }\n    \n    setLoading(true);\n\n    try {\n      const response = await apiRequest(\"POST\", \"/api/auth/reset-password\", {\n        token,\n        newPassword: password,\n      });\n      const data = await response.json();\n      setMessage(data.message);\n      setSuccess(true);\n      \n      // Redirecionar para login após 3 segundos\n      setTimeout(() => {\n        setLocation(\"/login\");\n      }, 3000);\n    } catch (error: any) {\n      console.error(\"Reset password error:\", error);\n      setErrors({ general: error.message || \"Erro ao redefinir senha\" });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (isResetMode) {\n    // Modo redefinir senha com token\n    return (\n      <div className=\"min-h-screen relative flex flex-col items-center justify-center p-6 gradient-bg\">\n        <AnimatedBackground />\n        \n        <div className=\"text-center mb-8 z-10\">\n          <div className=\"mx-auto w-32 h-32 rounded-full bg-gradient-to-br from-baby-pink to-baby-blue flex items-center justify-center mb-6 shadow-2xl overflow-hidden transform hover:scale-105 transition-transform duration-300\">\n            <img \n              src={logoImage} \n              alt=\"Mama Care Logo\" \n              className=\"w-full h-full object-cover\"\n            />\n          </div>\n          <h1 className=\"text-3xl font-bold text-charcoal mb-2\">Nova Senha</h1>\n          <p className=\"text-gray-600\">Digite sua nova senha abaixo</p>\n        </div>\n\n        <Card className=\"w-full max-w-sm glass-effect shadow-xl z-10\">\n          <CardContent className=\"p-6\">\n            {message && (\n              <div className={`mb-4 p-3 rounded-lg border flex items-center gap-2 ${\n                success \n                  ? \"bg-green-50 border-green-200 text-green-800\" \n                  : \"bg-red-50 border-red-200 text-red-800\"\n              }`}>\n                {success ? (\n                  <CheckCircle className=\"w-4 h-4\" />\n                ) : (\n                  <AlertCircle className=\"w-4 h-4\" />\n                )}\n                <span className=\"text-sm\">{message}</span>\n              </div>\n            )}\n\n            {success ? (\n              <div className=\"text-center\">\n                <p className=\"text-sm text-gray-600 mb-4\">\n                  Redirecionando para o login...\n                </p>\n              </div>\n            ) : (\n              <form onSubmit={handlePasswordSubmit} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"password\" className=\"text-charcoal font-medium\">\n                    Nova senha\n                  </Label>\n                  <div className=\"relative\">\n                    <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                    <Input\n                      id=\"password\"\n                      type={showPassword ? \"text\" : \"password\"}\n                      value={password}\n                      onChange={(e) => setPassword(e.target.value)}\n                      className=\"pl-10 pr-10\"\n                      placeholder=\"Digite sua nova senha\"\n                      data-testid=\"input-password\"\n                    />\n                    <button\n                      type=\"button\"\n                      onClick={() => setShowPassword(!showPassword)}\n                      className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                      data-testid=\"button-toggle-password\"\n                    >\n                      {showPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                    </button>\n                  </div>\n                  {errors.password && (\n                    <p className=\"mt-1 text-sm text-red-600 flex items-center\">\n                      <AlertCircle className=\"h-4 w-4 mr-1\" />\n                      {errors.password}\n                    </p>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"confirmPassword\" className=\"text-charcoal font-medium\">\n                    Confirmar nova senha\n                  </Label>\n                  <div className=\"relative\">\n                    <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                    <Input\n                      id=\"confirmPassword\"\n                      type={showConfirmPassword ? \"text\" : \"password\"}\n                      value={confirmPassword}\n                      onChange={(e) => setConfirmPassword(e.target.value)}\n                      className=\"pl-10 pr-10\"\n                      placeholder=\"Confirme sua nova senha\"\n                      data-testid=\"input-confirm-password\"\n                    />\n                    <button\n                      type=\"button\"\n                      onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                      className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                      data-testid=\"button-toggle-confirm-password\"\n                    >\n                      {showConfirmPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                    </button>\n                  </div>\n                  {errors.confirmPassword && (\n                    <p className=\"mt-1 text-sm text-red-600 flex items-center\">\n                      <AlertCircle className=\"h-4 w-4 mr-1\" />\n                      {errors.confirmPassword}\n                    </p>\n                  )}\n                </div>\n\n                {errors.general && (\n                  <div className=\"p-3 bg-red-50 border border-red-200 rounded-lg\">\n                    <p className=\"text-sm text-red-600 flex items-center\">\n                      <AlertCircle className=\"h-4 w-4 mr-1\" />\n                      {errors.general}\n                    </p>\n                  </div>\n                )}\n\n                <Button\n                  type=\"submit\"\n                  disabled={loading}\n                  className=\"w-full bg-gradient-to-r from-baby-pink-dark to-baby-blue-dark hover:opacity-90 text-white font-medium py-3\"\n                  data-testid=\"button-reset-password\"\n                >\n                  {loading ? \"Redefinindo...\" : \"Redefinir Senha\"}\n                </Button>\n\n                <div className=\"text-center\">\n                  <button\n                    type=\"button\"\n                    onClick={() => setLocation(\"/login\")}\n                    className=\"text-sm text-baby-pink-dark hover:underline flex items-center justify-center gap-1\"\n                    data-testid=\"button-back-to-login\"\n                  >\n                    <ArrowLeft className=\"w-4 h-4\" />\n                    Voltar ao Login\n                  </button>\n                </div>\n              </form>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  // Se deve mostrar a tela de token\n  if (showTokenReset) {\n    return (\n      <TokenReset \n        email={sentEmail}\n        onBack={() => {\n          setShowTokenReset(false);\n          setSentEmail(\"\");\n          setEmailMessage(\"\");\n        }}\n      />\n    );\n  }\n\n  // Modo solicitar email de recuperação\n  return (\n    <div className=\"min-h-screen relative flex flex-col items-center justify-center p-6 gradient-bg\">\n      <AnimatedBackground />\n      \n      <div className=\"text-center mb-8 z-10\">\n        <div className=\"mx-auto w-32 h-32 rounded-full bg-gradient-to-br from-baby-pink to-baby-blue flex items-center justify-center mb-6 shadow-2xl overflow-hidden transform hover:scale-105 transition-transform duration-300\">\n          <img \n            src={logoImage} \n            alt=\"Mama Care Logo\" \n            className=\"w-full h-full object-cover\"\n          />\n        </div>\n        <h1 className=\"text-3xl font-bold text-charcoal mb-2\">Recuperar Senha</h1>\n        <p className=\"text-gray-600\">Digite seu email para receber as instruções</p>\n      </div>\n\n      <Card className=\"w-full max-w-sm glass-effect shadow-xl z-10\">\n        <CardContent className=\"p-6\">\n          {emailMessage && (\n            <div className=\"mb-4 p-3 rounded-lg border bg-green-50 border-green-200 text-green-800 flex items-center gap-2\">\n              <CheckCircle className=\"w-4 h-4\" />\n              <span className=\"text-sm\">{emailMessage}</span>\n            </div>\n          )}\n\n          <form onSubmit={handleEmailSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\" className=\"text-charcoal font-medium\">\n                Email\n              </Label>\n              <div className=\"relative\">\n                <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  className=\"pl-10\"\n                  placeholder=\"Digite seu email\"\n                  data-testid=\"input-email\"\n                />\n              </div>\n              {errors.email && (\n                <p className=\"mt-1 text-sm text-red-600 flex items-center\">\n                  <AlertCircle className=\"h-4 w-4 mr-1\" />\n                  {errors.email}\n                </p>\n              )}\n            </div>\n\n            {errors.general && (\n              <div className=\"p-3 bg-red-50 border border-red-200 rounded-lg\">\n                <p className=\"text-sm text-red-600 flex items-center\">\n                  <AlertCircle className=\"h-4 w-4 mr-1\" />\n                  {errors.general}\n                </p>\n              </div>\n            )}\n\n            <Button\n              type=\"submit\"\n              disabled={emailLoading}\n              className=\"w-full bg-gradient-to-r from-baby-pink-dark to-baby-blue-dark hover:opacity-90 text-white font-medium py-3\"\n              data-testid=\"button-send-email\"\n            >\n              {emailLoading ? \"Enviando...\" : \"Enviar Email de Recuperação\"}\n            </Button>\n\n            <div className=\"text-center\">\n              <button\n                type=\"button\"\n                onClick={() => setLocation(\"/login\")}\n                className=\"text-sm text-baby-pink-dark hover:underline flex items-center justify-center gap-1\"\n                data-testid=\"button-back-to-login\"\n              >\n                <ArrowLeft className=\"w-4 h-4\" />\n                Voltar ao Login\n              </button>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":16238},"client/src/pages/shopping-list.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { usePregnancy } from \"@/hooks/use-pregnancy\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { LoadingSpinner } from \"@/components/ui/loading-spinner\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport BottomNavigation from \"@/components/layout/bottom-navigation\";\nimport { \n  ArrowLeft, \n  Plus, \n  ShoppingCart, \n  Trash2, \n  DollarSign, \n  Package, \n  CheckCircle,\n  TrendingUp,\n  Filter,\n  Lightbulb,\n  Target,\n  PieChart,\n  Star,\n  Heart,\n  Baby,\n  Home,\n  Shirt,\n  Bath,\n  Utensils,\n  Pill,\n  Sparkles,\n  Calculator,\n  AlertCircle,\n  ChevronRight\n} from \"lucide-react\";\nimport { PieChart as RechartsPieChart, Cell, ResponsiveContainer, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts';\n\ninterface ShoppingItem {\n  id: string;\n  name: string;\n  price: number | null;\n  purchased: boolean;\n  category: string;\n  priority: 'high' | 'medium' | 'low';\n  essential: boolean;\n  purchaseDate?: string;\n}\n\ninterface ShoppingData {\n  items: ShoppingItem[];\n}\n\n// Comprehensive categories for pregnancy and baby\nconst categories = [\n  { \n    id: 'baby-clothes', \n    name: 'Roupas do Bebê', \n    icon: '👶', \n    color: '#EC4899',\n    essentials: ['Body manga longa (6 unidades)', 'Macacão (4 unidades)', 'Meias (6 pares)', 'Touca (2 unidades)', 'Luvas (2 pares)'],\n    optionals: ['Roupas festivas', 'Sapatos decorativos', 'Babadores temáticos']\n  },\n  { \n    id: 'nursery', \n    name: 'Quarto do Bebê', \n    icon: '🏠', \n    color: '#3B82F6',\n    essentials: ['Berço', 'Colchão do berço', 'Cômoda', 'Cadeira de amamentação', 'Trocador'],\n    optionals: ['Móbile musical', 'Luminária', 'Tapete', 'Quadros decorativos']\n  },\n  { \n    id: 'hygiene', \n    name: 'Higiene', \n    icon: '🧼', \n    color: '#10B981',\n    essentials: ['Fraldas RN', 'Lenços umedecidos', 'Sabonete neutro', 'Shampoo bebê', 'Pomada para assaduras'],\n    optionals: ['Óleos de massagem', 'Talco', 'Cortador de unhas especial']\n  },\n  { \n    id: 'feeding', \n    name: 'Alimentação', \n    icon: '🍼', \n    color: '#F59E0B',\n    essentials: ['Mamadeiras', 'Bicos extras', 'Esterilizador', 'Escova para mamadeira', 'Babadores'],\n    optionals: ['Aquecedor de mamadeira', 'Dosador de leite', 'Kit de papinha']\n  },\n  { \n    id: 'mom-care', \n    name: 'Cuidados Maternos', \n    icon: '💖', \n    color: '#EC4899',\n    essentials: ['Sutiãs de amamentação', 'Absorventes para seios', 'Pomada para mamilos', 'Camisolas abertas'],\n    optionals: ['Almofada de amamentação', 'Bombinha tira-leite', 'Cinta pós-parto']\n  },\n  { \n    id: 'safety', \n    name: 'Segurança', \n    icon: '🛡️', \n    color: '#EF4444',\n    essentials: ['Bebê conforto', 'Protetor de tomada', 'Trava de porta', 'Monitor de bebê'],\n    optionals: ['Protetor de quinas', 'Trava de gaveta', 'Cerca de segurança']\n  }\n];\n\nconst priorityColors = {\n  high: 'bg-red-100 text-red-700 border-red-200',\n  medium: 'bg-yellow-100 text-yellow-700 border-yellow-200',\n  low: 'bg-green-100 text-green-700 border-green-200',\n};\n\nexport default function ShoppingList() {\n  const [showAddForm, setShowAddForm] = useState(false);\n  const [selectedCategory, setSelectedCategory] = useState<string>('all');\n  const [selectedPriority, setSelectedPriority] = useState<string>('all');\n  const [budget, setBudget] = useState<number>(2000);\n  const [showEssentialsOnly, setShowEssentialsOnly] = useState(false);\n  const [formData, setFormData] = useState({\n    name: \"\",\n    price: \"\",\n    category: \"\",\n    priority: \"medium\" as 'high' | 'medium' | 'low',\n    essential: false\n  });\n\n  const { user } = useAuth();\n  const { pregnancy, weekInfo } = usePregnancy();\n  const [, setLocation] = useLocation();\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const { data: shoppingData, isLoading } = useQuery<ShoppingData>({\n    queryKey: [\"/api/shopping-items\", pregnancy?.id],\n    enabled: !!pregnancy,\n    queryFn: () => {\n      // Mock data for demonstration\n      const mockData: ShoppingData = {\n        items: [\n          {\n            id: '1',\n            name: 'Body manga longa RN',\n            price: 25.90,\n            purchased: false,\n            category: 'baby-clothes',\n            priority: 'high',\n            essential: true\n          },\n          {\n            id: '2', \n            name: 'Berço de madeira',\n            price: 450.00,\n            purchased: false,\n            category: 'nursery',\n            priority: 'high',\n            essential: true\n          },\n          {\n            id: '3',\n            name: 'Fraldas RN (pacote)',\n            price: 35.90,\n            purchased: true,\n            category: 'hygiene',\n            priority: 'high',\n            essential: true,\n            purchaseDate: new Date().toISOString()\n          },\n          {\n            id: '4',\n            name: 'Mamadeira 250ml',\n            price: 18.50,\n            purchased: false,\n            category: 'feeding',\n            priority: 'medium',\n            essential: true\n          },\n          {\n            id: '5',\n            name: 'Sutiã de amamentação',\n            price: 45.00,\n            purchased: true,\n            category: 'mom-care',\n            priority: 'high',\n            essential: true,\n            purchaseDate: new Date().toISOString()\n          }\n        ]\n      };\n      return Promise.resolve(mockData);\n    },\n  });\n\n  // Calculations\n  const items = shoppingData?.items || [];\n  const filteredItems = useMemo(() => {\n    return items.filter(item => {\n      const categoryMatch = selectedCategory === 'all' || item.category === selectedCategory;\n      const priorityMatch = selectedPriority === 'all' || item.priority === selectedPriority;\n      const essentialMatch = !showEssentialsOnly || item.essential;\n      return categoryMatch && priorityMatch && essentialMatch;\n    });\n  }, [items, selectedCategory, selectedPriority, showEssentialsOnly]);\n\n  const pendingItems = filteredItems.filter(item => !item.purchased);\n  const purchasedItems = filteredItems.filter(item => item.purchased);\n  const totalSpent = items.filter(item => item.purchased).reduce((sum, item) => sum + (item.price || 0), 0);\n  const totalPending = items.filter(item => !item.purchased).reduce((sum, item) => sum + (item.price || 0), 0);\n  const budgetUsed = (totalSpent / budget) * 100;\n\n  // Category statistics\n  const categoryStats = categories.map(category => {\n    const categoryItems = items.filter(item => item.category === category.id);\n    const purchased = categoryItems.filter(item => item.purchased).length;\n    const total = categoryItems.length;\n    const spent = categoryItems.filter(item => item.purchased).reduce((sum, item) => sum + (item.price || 0), 0);\n    \n    return {\n      ...category,\n      purchased,\n      total,\n      progress: total > 0 ? (purchased / total) * 100 : 0,\n      spent\n    };\n  });\n\n  // Get suggestions based on pregnancy week\n  const getSuggestions = () => {\n    if (!weekInfo) return [];\n    \n    const suggestions = [];\n    const week = weekInfo.week;\n    \n    if (week >= 20 && week <= 28) {\n      suggestions.push(\n        ...categories.find(c => c.id === 'nursery')?.essentials?.slice(0, 3).map(item => ({\n          item,\n          reason: 'Segundo trimestre: momento ideal para preparar o quarto',\n          category: 'nursery',\n          priority: 'high' as const\n        })) || []\n      );\n    }\n    \n    if (week >= 30) {\n      suggestions.push(\n        ...categories.find(c => c.id === 'baby-clothes')?.essentials?.slice(0, 3).map(item => ({\n          item,\n          reason: 'Terceiro trimestre: prepare as roupas do bebê',\n          category: 'baby-clothes',\n          priority: 'high' as const\n        })) || []\n      );\n    }\n    \n    if (week >= 35) {\n      suggestions.push(\n        ...categories.find(c => c.id === 'hygiene')?.essentials?.slice(0, 2).map(item => ({\n          item,\n          reason: 'Reta final: essenciais para os primeiros dias',\n          category: 'hygiene',\n          priority: 'high' as const\n        })) || []\n      );\n    }\n    \n    return suggestions;\n  };\n\n  // Pie chart data\n  const pieData = categoryStats.filter(cat => cat.spent > 0).map((cat) => ({\n    name: cat.name,\n    value: cat.spent,\n    color: cat.color\n  }));\n\n  const addItemMutation = useMutation({\n    mutationFn: async (item: any) => {\n      const response = await apiRequest(\"POST\", \"/api/shopping-items\", item);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/shopping-items\", pregnancy?.id] });\n      setShowAddForm(false);\n      setFormData({ name: \"\", price: \"\", category: \"\", priority: \"medium\", essential: false });\n      toast({\n        title: \"✅ Item adicionado!\",\n        description: \"Item foi adicionado à sua lista de compras.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"❌ Erro\",\n        description: \"Erro ao adicionar item. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateItemMutation = useMutation({\n    mutationFn: async ({ id, updates }: { id: string; updates: any }) => {\n      const response = await apiRequest(\"PUT\", `/api/shopping-items/${id}`, updates);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/shopping-items\", pregnancy?.id] });\n    },\n  });\n\n  const deleteItemMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/shopping-items/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/shopping-items\", pregnancy?.id] });\n      toast({\n        title: \"🗑️ Item removido\",\n        description: \"Item foi removido da sua lista.\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.name.trim()) {\n      toast({\n        title: \"Erro\",\n        description: \"Nome do item é obrigatório\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    addItemMutation.mutate({\n      pregnancyId: pregnancy!.id,\n      name: formData.name.trim(),\n      price: formData.price ? parseFloat(formData.price) : null,\n      category: formData.category || null,\n      priority: formData.priority,\n      essential: formData.essential\n    });\n  };\n\n  const togglePurchased = (id: string, purchased: boolean) => {\n    updateItemMutation.mutate({ id, updates: { purchased } });\n  };\n\n  const addSuggestion = (suggestion: any) => {\n    setFormData({\n      name: suggestion.item,\n      price: \"\",\n      category: suggestion.category,\n      priority: suggestion.priority,\n      essential: true\n    });\n    setShowAddForm(true);\n  };\n\n  if (!user || !pregnancy) {\n    setLocation(\"/login\");\n    return null;\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <LoadingSpinner size=\"lg\" />\n      </div>\n    );\n  }\n\n  const suggestions = getSuggestions();\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-pink-50 via-white to-blue-50 pb-20\">\n      <div className=\"p-4 pt-8\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <Button \n            variant=\"ghost\" \n            size=\"icon\"\n            className=\"rounded-full bg-white shadow-lg\"\n            onClick={() => setLocation(\"/\")}\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"h-5 w-5 text-gray-700\" />\n          </Button>\n          <h1 className=\"text-2xl font-bold text-gray-800\">Lista de Compras</h1>\n          <Button \n            variant=\"ghost\" \n            size=\"icon\"\n            className=\"rounded-full bg-gradient-to-r from-pink-500 to-blue-500 shadow-lg\"\n            onClick={() => setShowAddForm(true)}\n            data-testid=\"button-add-item\"\n          >\n            <Plus className=\"h-5 w-5 text-white\" />\n          </Button>\n        </div>\n\n        <Tabs defaultValue=\"list\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-4 mb-6\">\n            <TabsTrigger value=\"list\" className=\"flex items-center text-xs\">\n              <ShoppingCart className=\"w-3 h-3 mr-1\" />\n              Lista\n            </TabsTrigger>\n            <TabsTrigger value=\"suggestions\" className=\"flex items-center text-xs\">\n              <Lightbulb className=\"w-3 h-3 mr-1\" />\n              Sugestões\n            </TabsTrigger>\n            <TabsTrigger value=\"budget\" className=\"flex items-center text-xs\">\n              <PieChart className=\"w-3 h-3 mr-1\" />\n              Orçamento\n            </TabsTrigger>\n            <TabsTrigger value=\"categories\" className=\"flex items-center text-xs\">\n              <Package className=\"w-3 h-3 mr-1\" />\n              Categorias\n            </TabsTrigger>\n          </TabsList>\n\n          {/* List Tab */}\n          <TabsContent value=\"list\" className=\"space-y-6\">\n            {/* Summary Cards */}\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <Card className=\"text-center\">\n                <CardContent className=\"p-4\">\n                  <Package className=\"h-8 w-8 text-blue-500 mx-auto mb-2\" />\n                  <div className=\"text-2xl font-bold text-blue-600\">{pendingItems.length}</div>\n                  <div className=\"text-xs text-gray-600\">Pendentes</div>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"text-center\">\n                <CardContent className=\"p-4\">\n                  <CheckCircle className=\"h-8 w-8 text-green-500 mx-auto mb-2\" />\n                  <div className=\"text-2xl font-bold text-green-600\">{purchasedItems.length}</div>\n                  <div className=\"text-xs text-gray-600\">Comprados</div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"text-center\">\n                <CardContent className=\"p-4\">\n                  <DollarSign className=\"h-8 w-8 text-purple-500 mx-auto mb-2\" />\n                  <div className=\"text-2xl font-bold text-purple-600\">R$ {totalSpent.toFixed(2)}</div>\n                  <div className=\"text-xs text-gray-600\">Gastos</div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"text-center\">\n                <CardContent className=\"p-4\">\n                  <Target className=\"h-8 w-8 text-orange-500 mx-auto mb-2\" />\n                  <div className=\"text-2xl font-bold text-orange-600\">R$ {totalPending.toFixed(2)}</div>\n                  <div className=\"text-xs text-gray-600\">Restante</div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Filters */}\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-base flex items-center\">\n                  <Filter className=\"w-4 h-4 mr-2\" />\n                  Filtros\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4\">\n                  <div>\n                    <Label className=\"text-sm text-gray-700 mb-2 block\">Categoria</Label>\n                    <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                      <SelectTrigger className=\"h-9\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">Todas</SelectItem>\n                        {categories.map((category) => (\n                          <SelectItem key={category.id} value={category.id}>\n                            {category.icon} {category.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label className=\"text-sm text-gray-700 mb-2 block\">Prioridade</Label>\n                    <Select value={selectedPriority} onValueChange={setSelectedPriority}>\n                      <SelectTrigger className=\"h-9\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">Todas</SelectItem>\n                        <SelectItem value=\"high\">Alta</SelectItem>\n                        <SelectItem value=\"medium\">Média</SelectItem>\n                        <SelectItem value=\"low\">Baixa</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"essentials\"\n                      checked={showEssentialsOnly}\n                      onCheckedChange={(checked) => setShowEssentialsOnly(checked as boolean)}\n                    />\n                    <Label htmlFor=\"essentials\" className=\"text-sm text-gray-700\">\n                      Apenas essenciais\n                    </Label>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Pending Items */}\n            {pendingItems.length > 0 && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <ShoppingCart className=\"mr-2 h-5 w-5 text-pink-500\" />\n                    Para Comprar ({pendingItems.length})\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    {pendingItems.map((item) => {\n                      const category = categories.find(c => c.id === item.category);\n                      return (\n                        <div \n                          key={item.id} \n                          className=\"flex items-center justify-between p-4 bg-white rounded-lg border shadow-sm hover:shadow-md transition-shadow\"\n                        >\n                          <div className=\"flex items-center space-x-3 flex-1\">\n                            <Checkbox\n                              checked={false}\n                              onCheckedChange={() => togglePurchased(item.id, true)}\n                            />\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center space-x-2 mb-1\">\n                                <span className=\"font-medium\">{item.name}</span>\n                                {item.essential && (\n                                  <Badge className=\"bg-red-100 text-red-700 text-xs\">\n                                    Essencial\n                                  </Badge>\n                                )}\n                              </div>\n                              <div className=\"flex items-center space-x-2 text-sm\">\n                                {category && (\n                                  <span className=\"text-gray-600\">\n                                    {category.icon} {category.name}\n                                  </span>\n                                )}\n                                <Badge className={priorityColors[item.priority]}>\n                                  {item.priority === 'high' ? 'Alta' : \n                                   item.priority === 'medium' ? 'Média' : 'Baixa'}\n                                </Badge>\n                                {item.price && (\n                                  <span className=\"font-semibold text-green-600\">\n                                    R$ {item.price.toFixed(2)}\n                                  </span>\n                                )}\n                              </div>\n                            </div>\n                          </div>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => deleteItemMutation.mutate(item.id)}\n                            className=\"text-red-500 hover:text-red-700\"\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Purchased Items */}\n            {purchasedItems.length > 0 && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <CheckCircle className=\"mr-2 h-5 w-5 text-green-500\" />\n                    Comprados ({purchasedItems.length})\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    {purchasedItems.map((item) => {\n                      const category = categories.find(c => c.id === item.category);\n                      return (\n                        <div \n                          key={item.id} \n                          className=\"flex items-center justify-between p-4 bg-green-50 rounded-lg border border-green-200\"\n                        >\n                          <div className=\"flex items-center space-x-3 flex-1\">\n                            <Checkbox\n                              checked={true}\n                              onCheckedChange={() => togglePurchased(item.id, false)}\n                            />\n                            <div className=\"flex-1\">\n                              <div className=\"font-medium text-green-700 line-through\">\n                                {item.name}\n                              </div>\n                              <div className=\"flex items-center space-x-2 text-sm text-green-600\">\n                                {category && (\n                                  <span>{category.icon} {category.name}</span>\n                                )}\n                                {item.price && (\n                                  <span className=\"font-semibold\">\n                                    R$ {item.price.toFixed(2)}\n                                  </span>\n                                )}\n                                {item.purchaseDate && (\n                                  <span className=\"text-xs\">\n                                    em {new Date(item.purchaseDate).toLocaleDateString('pt-BR')}\n                                  </span>\n                                )}\n                              </div>\n                            </div>\n                          </div>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => deleteItemMutation.mutate(item.id)}\n                            className=\"text-red-500 hover:text-red-700\"\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Empty State */}\n            {items.length === 0 && (\n              <Card>\n                <CardContent className=\"text-center py-12\">\n                  <ShoppingCart className=\"h-16 w-16 mx-auto mb-4 text-gray-400\" />\n                  <h3 className=\"text-lg font-semibold text-gray-800 mb-2\">Lista vazia</h3>\n                  <p className=\"text-gray-600 mb-4\">Comece adicionando itens para seu bebê</p>\n                  <Button\n                    onClick={() => setShowAddForm(true)}\n                    className=\"bg-gradient-to-r from-pink-500 to-blue-500 hover:opacity-90\"\n                  >\n                    <Plus className=\"mr-2 h-4 w-4\" />\n                    Adicionar primeiro item\n                  </Button>\n                </CardContent>\n              </Card>\n            )}\n          </TabsContent>\n\n          {/* Suggestions Tab */}\n          <TabsContent value=\"suggestions\" className=\"space-y-6\">\n            {weekInfo && (\n              <Card className=\"bg-gradient-to-r from-purple-50 to-pink-50 border-purple-200\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center text-purple-700\">\n                    <Baby className=\"mr-2 h-5 w-5\" />\n                    Semana {weekInfo.week} da Gestação\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-sm text-purple-600 mb-3\">\n                    Baseado no seu progresso na gestação, aqui estão nossas sugestões prioritárias:\n                  </p>\n                </CardContent>\n              </Card>\n            )}\n\n            {suggestions.length > 0 ? (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Star className=\"mr-2 h-5 w-5 text-orange-500\" />\n                    Recomendado para Você\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {suggestions.map((suggestion, index) => (\n                      <div key={index} className=\"p-4 border rounded-lg bg-orange-50 border-orange-200\">\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1\">\n                            <h4 className=\"font-semibold text-orange-800 mb-1\">\n                              {suggestion.item}\n                            </h4>\n                            <p className=\"text-sm text-orange-600 mb-2\">\n                              {suggestion.reason}\n                            </p>\n                            <Badge className=\"bg-orange-100 text-orange-700\">\n                              Prioridade {suggestion.priority === 'high' ? 'Alta' : 'Média'}\n                            </Badge>\n                          </div>\n                          <Button\n                            size=\"sm\"\n                            onClick={() => addSuggestion(suggestion)}\n                            className=\"bg-orange-500 hover:bg-orange-600 text-white\"\n                          >\n                            Adicionar\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            ) : (\n              <Card>\n                <CardContent className=\"text-center py-8\">\n                  <Sparkles className=\"h-12 w-12 mx-auto mb-4 text-gray-400\" />\n                  <p className=\"text-gray-500 mb-2\">\n                    Você está bem preparada!\n                  </p>\n                  <p className=\"text-sm text-gray-400\">\n                    Continue acompanhando suas compras na aba Lista.\n                  </p>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Essential Items by Category */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold flex items-center\">\n                <Heart className=\"mr-2 h-5 w-5 text-red-500\" />\n                Itens Essenciais por Categoria\n              </h3>\n              \n              {categories.map((category) => (\n                <Card key={category.id}>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-base flex items-center\" style={{ color: category.color }}>\n                      <span className=\"text-xl mr-2\">{category.icon}</span>\n                      {category.name}\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n                      {category.essentials.map((essential, index) => (\n                        <div key={index} className=\"flex items-center justify-between p-2 bg-gray-50 rounded\">\n                          <span className=\"text-sm\">{essential}</span>\n                          <Button\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            onClick={() => addSuggestion({\n                              item: essential,\n                              category: category.id,\n                              priority: 'medium'\n                            })}\n                            className=\"text-xs h-6\"\n                          >\n                            +\n                          </Button>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </TabsContent>\n\n          {/* Budget Tab */}\n          <TabsContent value=\"budget\" className=\"space-y-6\">\n            {/* Budget Overview */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <span className=\"flex items-center\">\n                    <Calculator className=\"mr-2 h-5 w-5 text-blue-500\" />\n                    Orçamento\n                  </span>\n                  <div className=\"text-right\">\n                    <div className=\"text-2xl font-bold text-blue-600\">R$ {budget.toFixed(2)}</div>\n                    <div className=\"text-sm text-gray-600\">Meta total</div>\n                  </div>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {/* Budget Input */}\n                  <div>\n                    <Label className=\"text-sm text-gray-700 mb-2 block\">Definir orçamento total</Label>\n                    <Input\n                      type=\"number\"\n                      value={budget}\n                      onChange={(e) => setBudget(parseFloat(e.target.value) || 0)}\n                      className=\"w-full\"\n                    />\n                  </div>\n\n                  {/* Progress Bar */}\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span>Progresso do orçamento</span>\n                      <span>{budgetUsed.toFixed(1)}%</span>\n                    </div>\n                    <div className=\"w-full bg-gray-200 rounded-full h-3\">\n                      <div \n                        className={`h-3 rounded-full transition-all ${\n                          budgetUsed > 90 ? 'bg-red-500' : budgetUsed > 70 ? 'bg-yellow-500' : 'bg-green-500'\n                        }`}\n                        style={{ width: `${Math.min(budgetUsed, 100)}%` }}\n                      />\n                    </div>\n                  </div>\n\n                  {/* Budget Status */}\n                  <div className=\"grid grid-cols-3 gap-4 text-center\">\n                    <div>\n                      <div className=\"text-lg font-bold text-green-600\">R$ {totalSpent.toFixed(2)}</div>\n                      <div className=\"text-xs text-gray-600\">Gasto</div>\n                    </div>\n                    <div>\n                      <div className=\"text-lg font-bold text-orange-600\">R$ {totalPending.toFixed(2)}</div>\n                      <div className=\"text-xs text-gray-600\">Pendente</div>\n                    </div>\n                    <div>\n                      <div className=\"text-lg font-bold text-blue-600\">\n                        R$ {(budget - totalSpent - totalPending).toFixed(2)}\n                      </div>\n                      <div className=\"text-xs text-gray-600\">Restante</div>\n                    </div>\n                  </div>\n\n                  {/* Budget Alert */}\n                  {budgetUsed > 80 && (\n                    <div className=\"p-3 bg-yellow-50 border border-yellow-200 rounded-lg\">\n                      <div className=\"flex items-center\">\n                        <AlertCircle className=\"h-4 w-4 text-yellow-600 mr-2\" />\n                        <span className=\"text-sm text-yellow-800\">\n                          Atenção: você já usou {budgetUsed.toFixed(1)}% do seu orçamento!\n                        </span>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Spending Chart */}\n            {pieData.length > 0 && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <PieChart className=\"mr-2 h-5 w-5 text-purple-500\" />\n                    Gastos por Categoria\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-64\">\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\n                      <RechartsPieChart data={pieData}>\n                        <RechartsPieChart\n                          cx=\"50%\"\n                          cy=\"50%\"\n                          outerRadius={80}\n                          fill=\"#8884d8\"\n                          dataKey=\"value\"\n                        />\n                        {pieData.map((entry, index) => (\n                          <Cell key={`cell-${index}`} fill={entry.color} />\n                        ))}\n                        <Tooltip formatter={(value: number) => [`R$ ${value.toFixed(2)}`, 'Gasto']} />\n                      </RechartsPieChart>\n                    </ResponsiveContainer>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Category Breakdown */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Gastos Detalhados</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {categoryStats.filter(stat => stat.spent > 0).map((stat) => (\n                    <div key={stat.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                      <div className=\"flex items-center space-x-3\">\n                        <span className=\"text-xl\">{stat.icon}</span>\n                        <div>\n                          <div className=\"font-medium\">{stat.name}</div>\n                          <div className=\"text-sm text-gray-600\">\n                            {stat.purchased} de {stat.total} itens\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"font-semibold\" style={{ color: stat.color }}>\n                          R$ {stat.spent.toFixed(2)}\n                        </div>\n                        <div className=\"text-xs text-gray-600\">\n                          {((stat.spent / totalSpent) * 100).toFixed(1)}%\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Categories Tab */}\n          <TabsContent value=\"categories\">\n            <div className=\"space-y-4\">\n              {categoryStats.map((stat) => (\n                <Card key={stat.id}>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"flex items-center justify-between\">\n                      <span className=\"flex items-center\" style={{ color: stat.color }}>\n                        <span className=\"text-2xl mr-3\">{stat.icon}</span>\n                        {stat.name}\n                      </span>\n                      <div className=\"text-right\">\n                        <div className=\"text-sm text-gray-600\">\n                          {stat.purchased} / {stat.total} itens\n                        </div>\n                        <div className=\"text-sm font-semibold\" style={{ color: stat.color }}>\n                          R$ {stat.spent.toFixed(2)}\n                        </div>\n                      </div>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    {/* Progress Bar */}\n                    <div className=\"mb-4\">\n                      <div className=\"flex justify-between text-sm mb-1\">\n                        <span>Progresso</span>\n                        <span>{stat.progress.toFixed(0)}%</span>\n                      </div>\n                      <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                        <div \n                          className=\"h-2 rounded-full transition-all\"\n                          style={{ \n                            width: `${stat.progress}%`, \n                            backgroundColor: stat.color \n                          }}\n                        />\n                      </div>\n                    </div>\n\n                    {/* Essential Items Preview */}\n                    <div>\n                      <h4 className=\"text-sm font-medium text-gray-700 mb-2\">Itens essenciais:</h4>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n                        {stat.essentials.slice(0, 4).map((essential, index) => (\n                          <div key={index} className=\"flex items-center justify-between p-2 bg-gray-50 rounded text-sm\">\n                            <span>{essential}</span>\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              onClick={() => addSuggestion({\n                                item: essential,\n                                category: stat.id,\n                                priority: 'medium'\n                              })}\n                              className=\"h-6 w-6 p-0\"\n                            >\n                              <Plus className=\"h-3 w-3\" />\n                            </Button>\n                          </div>\n                        ))}\n                      </div>\n                      {stat.essentials.length > 4 && (\n                        <div className=\"mt-2\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"w-full text-xs h-6\"\n                            style={{ color: stat.color }}\n                          >\n                            Ver todos ({stat.essentials.length})\n                            <ChevronRight className=\"h-3 w-3 ml-1\" />\n                          </Button>\n                        </div>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      {/* Add item modal */}\n      {showAddForm && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50\">\n          <Card className=\"w-full max-w-lg max-h-[90vh] overflow-y-auto\">\n            <CardHeader>\n              <CardTitle className=\"text-gray-800\">Novo Item</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"name\" className=\"text-gray-700 font-medium\">\n                    Nome do item *\n                  </Label>\n                  <Input\n                    id=\"name\"\n                    placeholder=\"Ex: Body para bebê manga longa\"\n                    value={formData.name}\n                    onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                    required\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"price\" className=\"text-gray-700 font-medium\">\n                    Preço (R$)\n                  </Label>\n                  <Input\n                    id=\"price\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    placeholder=\"Ex: 25.99\"\n                    value={formData.price}\n                    onChange={(e) => setFormData({ ...formData, price: e.target.value })}\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"category\" className=\"text-gray-700 font-medium\">\n                    Categoria\n                  </Label>\n                  <Select \n                    value={formData.category} \n                    onValueChange={(value) => setFormData({ ...formData, category: value })}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Selecione uma categoria\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {categories.map((category) => (\n                        <SelectItem key={category.id} value={category.id}>\n                          {category.icon} {category.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"priority\" className=\"text-gray-700 font-medium\">\n                    Prioridade\n                  </Label>\n                  <Select \n                    value={formData.priority} \n                    onValueChange={(value) => setFormData({ ...formData, priority: value as 'high' | 'medium' | 'low' })}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"high\">Alta</SelectItem>\n                      <SelectItem value=\"medium\">Média</SelectItem>\n                      <SelectItem value=\"low\">Baixa</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id=\"essential\"\n                    checked={formData.essential}\n                    onCheckedChange={(checked) => setFormData({ ...formData, essential: checked as boolean })}\n                  />\n                  <Label htmlFor=\"essential\" className=\"text-sm text-gray-700\">\n                    Item essencial\n                  </Label>\n                </div>\n                \n                <div className=\"flex space-x-3 pt-4\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\"\n                    onClick={() => setShowAddForm(false)}\n                    className=\"flex-1\"\n                  >\n                    Cancelar\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    className=\"flex-1 bg-gradient-to-r from-pink-500 to-blue-500 hover:opacity-90\"\n                    disabled={addItemMutation.isPending}\n                  >\n                    {addItemMutation.isPending ? (\n                      <LoadingSpinner size=\"sm\" className=\"mr-2\" />\n                    ) : (\n                      <Plus className=\"mr-2 h-4 w-4\" />\n                    )}\n                    Adicionar\n                  </Button>\n                </div>\n              </form>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      <BottomNavigation />\n    </div>\n  );\n}","size_bytes":44306},"client/src/pages/symptoms.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { usePregnancy } from \"@/hooks/use-pregnancy\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { LoadingSpinner } from \"@/components/ui/loading-spinner\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport BottomNavigation from \"@/components/layout/bottom-navigation\";\nimport { ArrowLeft, Plus, Activity, Calendar, AlertCircle, Trash2, TrendingUp } from \"lucide-react\";\n\nconst commonSymptoms = [\n  \"Náusea\",\n  \"Vômito\", \n  \"Azia\",\n  \"Dor nas costas\",\n  \"Dor de cabeça\",\n  \"Fadiga\",\n  \"Inchaço\",\n  \"Constipação\",\n  \"Tontura\",\n  \"Insônia\",\n  \"Dor pélvica\",\n  \"Cãibras\",\n  \"Falta de ar\",\n  \"Emoções intensas\",\n  \"Outros\"\n];\n\nconst severityLevels = [\n  { value: 1, label: \"Muito Leve\", color: \"text-green-600\", bg: \"bg-green-100\" },\n  { value: 2, label: \"Leve\", color: \"text-green-500\", bg: \"bg-green-50\" },\n  { value: 3, label: \"Moderado\", color: \"text-yellow-600\", bg: \"bg-yellow-100\" },\n  { value: 4, label: \"Forte\", color: \"text-orange-600\", bg: \"bg-orange-100\" },\n  { value: 5, label: \"Muito Forte\", color: \"text-red-600\", bg: \"bg-red-100\" },\n];\n\nexport default function Symptoms() {\n  const [showAddForm, setShowAddForm] = useState(false);\n  const [formData, setFormData] = useState({\n    name: \"\",\n    severity: \"\",\n    notes: \"\",\n  });\n\n  const { user } = useAuth();\n  const { pregnancy } = usePregnancy();\n  const [, setLocation] = useLocation();\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const { data: symptomsData, isLoading } = useQuery({\n    queryKey: [\"/api/symptoms\", pregnancy?.id],\n    enabled: !!pregnancy,\n  });\n\n  const addSymptomMutation = useMutation({\n    mutationFn: async (symptom: any) => {\n      const response = await apiRequest(\"POST\", \"/api/symptoms\", symptom);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/symptoms\", pregnancy?.id] });\n      setShowAddForm(false);\n      setFormData({ name: \"\", severity: \"\", notes: \"\" });\n      toast({\n        title: \"Sintoma registrado!\",\n        description: \"Seu sintoma foi adicionado com sucesso.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao registrar sintoma. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteSymptomMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/symptoms/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/symptoms\", pregnancy?.id] });\n      toast({\n        title: \"Sintoma removido\",\n        description: \"Sintoma foi removido do registro.\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.name.trim() || !formData.severity) {\n      toast({\n        title: \"Erro\",\n        description: \"Nome do sintoma e intensidade são obrigatórios\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    addSymptomMutation.mutate({\n      pregnancyId: pregnancy!.id,\n      name: formData.name.trim(),\n      severity: parseInt(formData.severity),\n      notes: formData.notes.trim() || null,\n      date: new Date().toISOString(),\n    });\n  };\n\n  if (!user || !pregnancy) {\n    setLocation(\"/login\");\n    return null;\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <LoadingSpinner size=\"lg\" />\n      </div>\n    );\n  }\n\n  const symptoms = symptomsData?.symptoms || [];\n  const recentSymptoms = symptoms.slice(0, 10);\n\n  // Group symptoms by name for frequency analysis\n  const symptomFrequency = symptoms.reduce((acc: any, symptom: any) => {\n    if (!acc[symptom.name]) {\n      acc[symptom.name] = [];\n    }\n    acc[symptom.name].push(symptom);\n    return acc;\n  }, {});\n\n  const mostFrequentSymptoms = Object.entries(symptomFrequency)\n    .map(([name, occurrences]: [string, any]) => ({\n      name,\n      count: occurrences.length,\n      avgSeverity: occurrences.reduce((sum: number, s: any) => sum + s.severity, 0) / occurrences.length,\n    }))\n    .sort((a, b) => b.count - a.count)\n    .slice(0, 5);\n\n  const getSeverityInfo = (severity: number) => {\n    return severityLevels.find(level => level.value === severity) || severityLevels[0];\n  };\n\n  return (\n    <div className=\"min-h-screen bg-cream pb-20\">\n      <div className=\"p-4 pt-12\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <Button \n            variant=\"ghost\" \n            size=\"icon\"\n            className=\"rounded-full bg-white shadow-lg\"\n            onClick={() => setLocation(\"/\")}\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"h-5 w-5 text-charcoal\" />\n          </Button>\n          <h2 className=\"text-xl font-bold text-charcoal\" data-testid=\"text-page-title\">\n            Sintomas\n          </h2>\n          <Button \n            variant=\"ghost\" \n            size=\"icon\"\n            className=\"rounded-full bg-baby-pink-dark shadow-lg\"\n            onClick={() => setShowAddForm(true)}\n            data-testid=\"button-add-symptom\"\n          >\n            <Plus className=\"h-5 w-5 text-white\" />\n          </Button>\n        </div>\n\n        {/* Most Frequent Symptoms */}\n        {mostFrequentSymptoms.length > 0 && (\n          <Card className=\"shadow-lg mb-6\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center text-charcoal\">\n                <TrendingUp className=\"mr-2 h-5 w-5 text-baby-pink-dark\" />\n                Sintomas Mais Frequentes\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {mostFrequentSymptoms.map((symptom, index) => {\n                  const severityInfo = getSeverityInfo(Math.round(symptom.avgSeverity));\n                  return (\n                    <div \n                      key={symptom.name} \n                      className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\"\n                      data-testid={`frequent-symptom-${index}`}\n                    >\n                      <div className=\"flex-1\">\n                        <div className=\"font-medium text-charcoal\">{symptom.name}</div>\n                        <div className=\"text-sm text-gray-600\">\n                          {symptom.count} ocorrências\n                        </div>\n                      </div>\n                      <div className={`px-2 py-1 rounded-full text-xs ${severityInfo.bg} ${severityInfo.color}`}>\n                        Média: {severityInfo.label}\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Recent Symptoms */}\n        <Card className=\"shadow-lg\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center text-charcoal\">\n              <Activity className=\"mr-2 h-5 w-5 text-baby-blue-dark\" />\n              Registro de Sintomas ({symptoms.length})\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {symptoms.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <AlertCircle className=\"h-12 w-12 mx-auto mb-4 text-gray-400\" />\n                <h3 className=\"text-lg font-semibold text-charcoal mb-2\">Nenhum sintoma registrado</h3>\n                <p className=\"text-gray-600 mb-4\">Comece a acompanhar seus sintomas</p>\n                <Button\n                  onClick={() => setShowAddForm(true)}\n                  className=\"bg-gradient-to-r from-baby-pink-dark to-baby-blue-dark hover:opacity-90\"\n                  data-testid=\"button-add-first-symptom\"\n                >\n                  <Plus className=\"mr-2 h-4 w-4\" />\n                  Registrar primeiro sintoma\n                </Button>\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                {recentSymptoms.map((symptom: any) => {\n                  const severityInfo = getSeverityInfo(symptom.severity);\n                  return (\n                    <div \n                      key={symptom.id} \n                      className=\"flex items-start justify-between p-4 bg-white rounded-lg border\"\n                      data-testid={`symptom-${symptom.id}`}\n                    >\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-2 mb-1\">\n                          <h4 className=\"font-medium text-charcoal\">{symptom.name}</h4>\n                          <span className={`px-2 py-1 rounded-full text-xs ${severityInfo.bg} ${severityInfo.color}`}>\n                            {severityInfo.label}\n                          </span>\n                        </div>\n                        \n                        <div className=\"flex items-center text-sm text-gray-600 mb-2\">\n                          <Calendar className=\"h-3 w-3 mr-1\" />\n                          {new Date(symptom.date).toLocaleDateString('pt-BR')} às{' '}\n                          {new Date(symptom.date).toLocaleTimeString('pt-BR', { \n                            hour: '2-digit', \n                            minute: '2-digit' \n                          })}\n                        </div>\n                        \n                        {symptom.notes && (\n                          <p className=\"text-sm text-gray-700 italic\" data-testid={`symptom-notes-${symptom.id}`}>\n                            {symptom.notes}\n                          </p>\n                        )}\n                      </div>\n                      \n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => deleteSymptomMutation.mutate(symptom.id)}\n                        className=\"text-red-500 hover:text-red-700\"\n                        data-testid={`button-delete-${symptom.id}`}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Add symptom modal */}\n      {showAddForm && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50\">\n          <Card className=\"w-full max-w-md\">\n            <CardHeader>\n              <CardTitle className=\"text-charcoal\">Registrar Sintoma</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSubmit} className=\"space-y-4\" data-testid=\"form-add-symptom\">\n                <div>\n                  <Label htmlFor=\"name\" className=\"text-charcoal font-medium\">\n                    Sintoma *\n                  </Label>\n                  <Select \n                    value={formData.name} \n                    onValueChange={(value) => setFormData({ ...formData, name: value })}\n                  >\n                    <SelectTrigger data-testid=\"select-symptom\">\n                      <SelectValue placeholder=\"Selecione um sintoma\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {commonSymptoms.map((symptom) => (\n                        <SelectItem key={symptom} value={symptom}>\n                          {symptom}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  {formData.name === \"Outros\" && (\n                    <Input\n                      placeholder=\"Digite o sintoma\"\n                      className=\"mt-2\"\n                      onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                      data-testid=\"input-custom-symptom\"\n                    />\n                  )}\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"severity\" className=\"text-charcoal font-medium\">\n                    Intensidade *\n                  </Label>\n                  <Select \n                    value={formData.severity} \n                    onValueChange={(value) => setFormData({ ...formData, severity: value })}\n                  >\n                    <SelectTrigger data-testid=\"select-severity\">\n                      <SelectValue placeholder=\"Qual a intensidade?\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {severityLevels.map((level) => (\n                        <SelectItem key={level.value} value={level.value.toString()}>\n                          <div className=\"flex items-center\">\n                            <div className={`w-3 h-3 rounded-full mr-2 ${level.bg.replace('bg-', 'bg-').replace('-100', '-400')}`} />\n                            {level.label}\n                          </div>\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"notes\" className=\"text-charcoal font-medium\">\n                    Observações\n                  </Label>\n                  <Textarea\n                    id=\"notes\"\n                    placeholder=\"Ex: Piorou após o almoço\"\n                    value={formData.notes}\n                    onChange={(e) => setFormData({ ...formData, notes: e.target.value })}\n                    className=\"focus:ring-2 focus:ring-baby-pink focus:border-baby-pink-dark\"\n                    data-testid=\"textarea-notes\"\n                  />\n                </div>\n                \n                <div className=\"flex space-x-3\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\"\n                    onClick={() => setShowAddForm(false)}\n                    className=\"flex-1\"\n                    data-testid=\"button-cancel\"\n                  >\n                    Cancelar\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    className=\"flex-1 bg-gradient-to-r from-baby-pink-dark to-baby-blue-dark hover:opacity-90\"\n                    disabled={addSymptomMutation.isPending}\n                    data-testid=\"button-save\"\n                  >\n                    {addSymptomMutation.isPending ? (\n                      <LoadingSpinner size=\"sm\" className=\"mr-2\" />\n                    ) : (\n                      <Activity className=\"mr-2 h-4 w-4\" />\n                    )}\n                    Registrar\n                  </Button>\n                </div>\n              </form>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      <BottomNavigation />\n    </div>\n  );\n}\n","size_bytes":15418},"client/src/pages/token-reset.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useLocation } from 'wouter';\nimport { ArrowLeft, Mail, Eye, EyeOff, CheckCircle2, RefreshCw, Lock, Heart } from 'lucide-react';\nimport logoImage from \"@assets/4_1755308511005.png\";\n\n// Componente de animação de fundo igual ao login\nfunction AnimatedBackground({ step }: { step: string }) {\n  return (\n    <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n      {/* Corações flutuantes */}\n      {[...Array(8)].map((_, i) => {\n        const heartId = `${step}-heart-${i}`;\n        return (\n          <Heart\n            key={heartId}\n            className={`absolute text-pink-300/30 animate-float-1`}\n            size={20 + (i % 3) * 10}\n            style={{\n              left: `${10 + (i * 12) % 80}%`,\n              top: `${15 + (i * 15) % 70}%`,\n              animationDelay: `${i * 0.7}s`,\n              animationDuration: `${3 + (i % 3)}s`\n            }}\n          />\n        );\n      })}\n      \n      {/* Bolinhas flutuantes */}\n      {[...Array(12)].map((_, i) => {\n        const bubbleId = `${step}-bubble-${i}`;\n        return (\n          <div\n            key={bubbleId}\n            className={`absolute rounded-full bg-gradient-to-r from-pink-200/20 to-blue-200/20 animate-bounce`}\n            style={{\n              width: `${8 + (i % 4) * 6}px`,\n              height: `${8 + (i % 4) * 6}px`,\n              left: `${5 + (i * 8) % 90}%`,\n              top: `${10 + (i * 8) % 80}%`,\n              animationDelay: `${i * 0.5}s`,\n              animationDuration: `${4 + (i % 3)}s`\n            }}\n          />\n        );\n      })}\n      \n      {/* Estrelas piscantes */}\n      {[...Array(6)].map((_, i) => {\n        const starId = `${step}-star-${i}`;\n        return (\n          <div\n            key={starId}\n            className={`absolute w-2 h-2 bg-yellow-300/40 animate-pulse`}\n            style={{\n              left: `${20 + (i * 15) % 60}%`,\n              top: `${20 + (i * 12) % 60}%`,\n              animationDelay: `${i * 1.2}s`,\n              clipPath: 'polygon(50% 0%, 61% 35%, 98% 35%, 68% 57%, 79% 91%, 50% 70%, 21% 91%, 32% 57%, 2% 35%, 39% 35%)'\n            }}\n          />\n        );\n      })}\n    </div>\n  );\n}\n\ninterface TokenResetProps {\n  email: string;\n  onBack: () => void;\n}\n\nexport function TokenReset({ email, onBack }: TokenResetProps) {\n  const [token, setToken] = useState('');\n  const [newPassword, setNewPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isResending, setIsResending] = useState(false);\n  const [step, setStep] = useState<'token' | 'password'>('token');\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n\n  const handleVerifyToken = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!token.trim()) {\n      toast({\n        title: \"Token obrigatório\",\n        description: \"Por favor, insira o token recebido no email\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      const response = await apiRequest('POST', '/api/auth/verify-reset-token', { token });\n      setStep('password');\n      toast({\n        title: \"Token válido!\",\n        description: \"Agora você pode definir sua nova senha\",\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Token inválido\",\n        description: error.message || \"Verifique o token e tente novamente\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleResetPassword = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!newPassword || !confirmPassword) {\n      toast({\n        title: \"Campos obrigatórios\",\n        description: \"Por favor, preencha ambos os campos de senha\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if (newPassword !== confirmPassword) {\n      toast({\n        title: \"Senhas não coincidem\",\n        description: \"Verifique se as senhas são idênticas\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if (newPassword.length < 6) {\n      toast({\n        title: \"Senha muito curta\",\n        description: \"A senha deve ter pelo menos 6 caracteres\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      await apiRequest('POST', '/api/auth/reset-password', { \n        token, \n        newPassword \n      });\n      toast({\n        title: \"Senha redefinida!\",\n        description: \"Sua senha foi alterada com sucesso\",\n      });\n      setLocation('/login');\n    } catch (error: any) {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Erro ao redefinir senha\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleResendEmail = async () => {\n    setIsResending(true);\n    try {\n      await apiRequest('POST', '/api/auth/forgot-password', { email });\n      toast({\n        title: \"Email reenviado!\",\n        description: \"Verifique sua caixa de entrada novamente\",\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Erro ao reenviar email\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsResending(false);\n    }\n  };\n\n  if (step === 'password') {\n    // Tela de nova senha\n    return (\n      <div className=\"min-h-screen relative flex flex-col items-center justify-center p-6 gradient-bg\">\n        <AnimatedBackground step=\"password\" />\n        \n        <div className=\"text-center mb-8 z-10\">\n          <div className=\"mx-auto w-32 h-32 rounded-full bg-gradient-to-br from-baby-pink to-baby-blue flex items-center justify-center mb-6 shadow-2xl overflow-hidden transform hover:scale-105 transition-transform duration-300\">\n            <img \n              src={logoImage} \n              alt=\"Mama Care Logo\" \n              className=\"w-full h-full object-cover\"\n            />\n          </div>\n          <h1 className=\"text-3xl font-bold text-charcoal mb-2\">Nova Senha</h1>\n          <p className=\"text-gray-600\">Defina sua nova senha segura</p>\n        </div>\n\n        <Card className=\"w-full max-w-sm glass-effect shadow-xl z-10\">\n          <CardContent className=\"p-6\">\n            <form onSubmit={handleResetPassword} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"newPassword\" className=\"text-charcoal font-medium\">\n                  Nova senha\n                </Label>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                  <Input\n                    id=\"newPassword\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    value={newPassword}\n                    onChange={(e) => setNewPassword(e.target.value)}\n                    className=\"pl-10 pr-10\"\n                    placeholder=\"Digite sua nova senha\"\n                    data-testid=\"input-new-password\"\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                    data-testid=\"button-toggle-password\"\n                  >\n                    {showPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                  </button>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"confirmPassword\" className=\"text-charcoal font-medium\">\n                  Confirmar senha\n                </Label>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                  <Input\n                    id=\"confirmPassword\"\n                    type={showConfirmPassword ? \"text\" : \"password\"}\n                    value={confirmPassword}\n                    onChange={(e) => setConfirmPassword(e.target.value)}\n                    className=\"pl-10 pr-10\"\n                    placeholder=\"Confirme sua nova senha\"\n                    data-testid=\"input-confirm-password\"\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                    className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                    data-testid=\"button-toggle-confirm-password\"\n                  >\n                    {showConfirmPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                  </button>\n                </div>\n              </div>\n\n              <Button\n                type=\"submit\"\n                disabled={isLoading}\n                className=\"w-full bg-gradient-to-r from-baby-pink-dark to-baby-blue-dark hover:opacity-90 text-white font-medium py-3\"\n                data-testid=\"button-reset-password\"\n              >\n                {isLoading ? (\n                  <>\n                    <RefreshCw className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Redefinindo...\n                  </>\n                ) : (\n                  'Redefinir Senha'\n                )}\n              </Button>\n\n              <div className=\"text-center\">\n                <button\n                  type=\"button\"\n                  onClick={() => setLocation(\"/login\")}\n                  className=\"text-sm text-baby-pink-dark hover:underline flex items-center justify-center gap-1\"\n                  data-testid=\"button-back-to-login\"\n                >\n                  <ArrowLeft className=\"w-4 h-4\" />\n                  Voltar ao Login\n                </button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  // Tela de inserir token\n  return (\n    <div className=\"min-h-screen relative flex flex-col items-center justify-center p-6 gradient-bg\">\n      <AnimatedBackground step=\"token\" />\n      \n      <div className=\"text-center mb-8 z-10\">\n        <div className=\"mx-auto w-32 h-32 rounded-full bg-gradient-to-br from-baby-pink to-baby-blue flex items-center justify-center mb-6 shadow-2xl overflow-hidden transform hover:scale-105 transition-transform duration-300\">\n          <img \n            src={logoImage} \n            alt=\"Mama Care Logo\" \n            className=\"w-full h-full object-cover\"\n          />\n        </div>\n        <h1 className=\"text-3xl font-bold text-charcoal mb-2\">Cuidados com a mamãe</h1>\n        <p className=\"text-gray-600\">Recuperação de senha</p>\n      </div>\n\n      <Card className=\"w-full max-w-sm glass-effect shadow-xl z-10\">\n        <CardContent className=\"p-6\">\n          <div className=\"text-center mb-6\">\n            <h2 className=\"text-xl font-semibold text-charcoal mb-2\">Seta o Token</h2>\n            <p className=\"text-sm text-gray-600\">Token enviado para {email}</p>\n          </div>\n\n          <form onSubmit={handleVerifyToken} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"token\" className=\"text-charcoal font-medium\">\n                Token de Recuperação\n              </Label>\n              <Input\n                id=\"token\"\n                type=\"text\"\n                value={token}\n                onChange={(e) => setToken(e.target.value)}\n                placeholder=\"Digite o token recebido no email\"\n                className=\"text-center text-lg tracking-wider\"\n                data-testid=\"input-reset-token\"\n              />\n            </div>\n\n            <Button \n              type=\"submit\" \n              disabled={isLoading}\n              className=\"w-full bg-gradient-to-r from-baby-pink-dark to-baby-blue-dark hover:opacity-90 text-white font-medium py-3\"\n              data-testid=\"button-verify-token\"\n            >\n              {isLoading ? (\n                <>\n                  <RefreshCw className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Verificando...\n                </>\n              ) : (\n                <>\n                  <CheckCircle2 className=\"w-4 h-4 mr-2\" />\n                  Verificar Token\n                </>\n              )}\n            </Button>\n\n            <Button\n              type=\"button\"\n              variant=\"outline\" \n              onClick={handleResendEmail}\n              disabled={isResending}\n              className=\"w-full border-baby-pink-dark text-baby-pink-dark hover:bg-baby-pink/10\"\n              data-testid=\"button-resend-email\"\n            >\n              {isResending ? (\n                <>\n                  <RefreshCw className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Reenviando...\n                </>\n              ) : (\n                <>\n                  <Mail className=\"w-4 h-4 mr-2\" />\n                  Reenviar Email\n                </>\n              )}\n            </Button>\n\n            <div className=\"text-center\">\n              <button\n                type=\"button\"\n                onClick={onBack}\n                className=\"text-sm text-baby-pink-dark hover:underline flex items-center justify-center gap-1\"\n                data-testid=\"button-back\"\n              >\n                <ArrowLeft className=\"w-4 h-4\" />\n                Voltar\n              </button>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":13999},"client/src/pages/verify-reset.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { useToast } from '@/hooks/use-toast';\nimport { Link, useLocation } from 'wouter';\nimport { Lock, Shield, Eye, EyeOff, CheckCircle, ArrowLeft } from 'lucide-react';\n\nconst verifyResetSchema = z.object({\n  token: z.string().min(1, 'Código é obrigatório'),\n  newPassword: z.string().min(6, 'Senha deve ter pelo menos 6 caracteres'),\n  confirmPassword: z.string().min(6, 'Confirmação é obrigatória')\n}).refine((data) => data.newPassword === data.confirmPassword, {\n  message: \"Senhas não conferem\",\n  path: [\"confirmPassword\"],\n});\n\ntype VerifyResetForm = z.infer<typeof verifyResetSchema>;\n\nexport default function VerifyResetPage() {\n  const [location, setLocation] = useLocation();\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [isVerifying, setIsVerifying] = useState(false);\n  const [isResetting, setIsResetting] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [tokenValidated, setTokenValidated] = useState(false);\n  const { toast } = useToast();\n\n  const form = useForm<VerifyResetForm>({\n    resolver: zodResolver(verifyResetSchema),\n    defaultValues: {\n      token: '',\n      newPassword: '',\n      confirmPassword: ''\n    }\n  });\n\n  const token = form.watch('token');\n\n  // Verificar token automaticamente quando preenchido\n  useEffect(() => {\n    if (token && token.length >= 30) { // Assumindo que tokens têm pelo menos 30 caracteres\n      verifyToken();\n    } else {\n      setTokenValidated(false);\n    }\n  }, [token]);\n\n  const verifyToken = async () => {\n    if (!token) return;\n    \n    setIsVerifying(true);\n    setError('');\n    \n    try {\n      const response = await fetch('/api/auth/verify-reset-token', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ token })\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        setTokenValidated(true);\n        toast({\n          title: \"✅ Código validado\",\n          description: \"Agora você pode definir sua nova senha.\",\n        });\n      } else {\n        setError(data.error || 'Código inválido ou expirado');\n        setTokenValidated(false);\n      }\n    } catch (error) {\n      setError('Erro ao verificar código. Tente novamente.');\n      setTokenValidated(false);\n    } finally {\n      setIsVerifying(false);\n    }\n  };\n\n  const onSubmit = async (data: VerifyResetForm) => {\n    if (!tokenValidated) {\n      setError('Código não foi validado ainda');\n      return;\n    }\n\n    setIsResetting(true);\n    setError('');\n    \n    try {\n      const response = await fetch('/api/auth/reset-password', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          token: data.token,\n          newPassword: data.newPassword\n        })\n      });\n\n      const result = await response.json();\n\n      if (response.ok) {\n        setSuccess('Senha alterada com sucesso!');\n        toast({\n          title: \"🎉 Sucesso!\",\n          description: \"Sua senha foi alterada. Redirecionando para o login...\",\n        });\n        \n        setTimeout(() => {\n          setLocation('/login');\n        }, 2000);\n      } else {\n        setError(result.error || 'Erro ao alterar senha');\n      }\n    } catch (error) {\n      setError('Erro ao alterar senha. Tente novamente.');\n    } finally {\n      setIsResetting(false);\n    }\n  };\n\n  if (success) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-pink-50 via-purple-50 to-blue-50 flex items-center justify-center p-4 relative overflow-hidden\">\n        {/* Fundo animado */}\n        <div className=\"absolute inset-0 overflow-hidden\">\n          <div className=\"absolute -top-4 -left-4 w-72 h-72 bg-pink-300 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-blob\"></div>\n          <div className=\"absolute -top-4 -right-4 w-72 h-72 bg-yellow-300 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-blob animation-delay-2000\"></div>\n          <div className=\"absolute -bottom-8 left-20 w-72 h-72 bg-pink-300 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-blob animation-delay-4000\"></div>\n        </div>\n\n        <Card className=\"w-full max-w-md backdrop-blur-sm bg-white/90 border-0 shadow-2xl relative z-10\">\n          <CardHeader className=\"text-center space-y-4\">\n            <div className=\"mx-auto w-16 h-16 bg-gradient-to-r from-pink-500 to-purple-600 rounded-full flex items-center justify-center animate-bounce\">\n              <CheckCircle className=\"w-8 h-8 text-white\" />\n            </div>\n            <CardTitle className=\"text-2xl font-bold bg-gradient-to-r from-pink-600 to-purple-600 bg-clip-text text-transparent\">\n              Senha Alterada!\n            </CardTitle>\n            <CardDescription className=\"text-gray-600\">\n              Sua senha foi alterada com sucesso. Redirecionando para o login...\n            </CardDescription>\n          </CardHeader>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-pink-50 via-purple-50 to-blue-50 flex items-center justify-center p-4 relative overflow-hidden\">\n      {/* Fundo animado */}\n      <div className=\"absolute inset-0 overflow-hidden\">\n        <div className=\"absolute -top-4 -left-4 w-72 h-72 bg-pink-300 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-blob\"></div>\n        <div className=\"absolute -top-4 -right-4 w-72 h-72 bg-yellow-300 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-blob animation-delay-2000\"></div>\n        <div className=\"absolute -bottom-8 left-20 w-72 h-72 bg-pink-300 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-blob animation-delay-4000\"></div>\n      </div>\n\n      <Card className=\"w-full max-w-md backdrop-blur-sm bg-white/90 border-0 shadow-2xl relative z-10\">\n        <CardHeader className=\"text-center space-y-4\">\n          <div className=\"mx-auto w-16 h-16 bg-gradient-to-r from-pink-500 to-purple-600 rounded-full flex items-center justify-center\">\n            <Shield className=\"w-8 h-8 text-white\" />\n          </div>\n          <CardTitle className=\"text-2xl font-bold bg-gradient-to-r from-pink-600 to-purple-600 bg-clip-text text-transparent\">\n            Verificação & Nova Senha\n          </CardTitle>\n          <CardDescription className=\"text-gray-600\">\n            Digite o código recebido por email e defina sua nova senha\n          </CardDescription>\n        </CardHeader>\n\n        <CardContent className=\"space-y-6\">\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              {/* Campo do Código */}\n              <FormField\n                control={form.control}\n                name=\"token\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-gray-700 font-medium\">\n                      Código de Verificação\n                    </FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                        <Input\n                          {...field}\n                          type=\"text\"\n                          placeholder=\"Digite o código recebido por email\"\n                          className=\"pl-10 h-12 border-gray-200 focus:border-pink-400 transition-colors\"\n                          data-testid=\"input-reset-token\"\n                        />\n                        {tokenValidated && (\n                          <CheckCircle className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-green-500 w-5 h-5\" />\n                        )}\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                    {tokenValidated && (\n                      <p className=\"text-sm text-green-600 flex items-center gap-2\">\n                        <CheckCircle className=\"w-4 h-4\" />\n                        Código validado com sucesso\n                      </p>\n                    )}\n                  </FormItem>\n                )}\n              />\n\n              {/* Nova Senha */}\n              <FormField\n                control={form.control}\n                name=\"newPassword\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-gray-700 font-medium\">\n                      Nova Senha\n                    </FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                        <Input\n                          {...field}\n                          type={showPassword ? \"text\" : \"password\"}\n                          placeholder=\"Digite sua nova senha\"\n                          className=\"pl-10 pr-10 h-12 border-gray-200 focus:border-pink-400 transition-colors\"\n                          disabled={!tokenValidated}\n                          data-testid=\"input-new-password\"\n                        />\n                        <button\n                          type=\"button\"\n                          onClick={() => setShowPassword(!showPassword)}\n                          className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                          disabled={!tokenValidated}\n                        >\n                          {showPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                        </button>\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Confirmar Senha */}\n              <FormField\n                control={form.control}\n                name=\"confirmPassword\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-gray-700 font-medium\">\n                      Confirmar Nova Senha\n                    </FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                        <Input\n                          {...field}\n                          type={showConfirmPassword ? \"text\" : \"password\"}\n                          placeholder=\"Confirme sua nova senha\"\n                          className=\"pl-10 pr-10 h-12 border-gray-200 focus:border-pink-400 transition-colors\"\n                          disabled={!tokenValidated}\n                          data-testid=\"input-confirm-password\"\n                        />\n                        <button\n                          type=\"button\"\n                          onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                          className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                          disabled={!tokenValidated}\n                        >\n                          {showConfirmPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                        </button>\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {error && (\n                <Alert variant=\"destructive\">\n                  <AlertDescription>{error}</AlertDescription>\n                </Alert>\n              )}\n\n              <Button\n                type=\"submit\"\n                className=\"w-full h-12 bg-gradient-to-r from-pink-500 to-purple-600 hover:from-pink-600 hover:to-purple-700 text-white font-semibold rounded-lg transition-all duration-200 transform hover:scale-[1.02]\"\n                disabled={isVerifying || isResetting || !tokenValidated}\n                data-testid=\"button-reset-password\"\n              >\n                {isVerifying ? 'Verificando...' : isResetting ? 'Alterando Senha...' : 'Alterar Senha'}\n              </Button>\n            </form>\n          </Form>\n\n          <div className=\"text-center\">\n            <Link href=\"/login\">\n              <button className=\"inline-flex items-center gap-2 text-sm text-gray-600 hover:text-pink-600 transition-colors\">\n                <ArrowLeft className=\"w-4 h-4\" />\n                Voltar ao Login\n              </button>\n            </Link>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":13365},"client/src/pages/verify-token.tsx":{"content":"import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { useToast } from '@/hooks/use-toast';\nimport { Link, useLocation } from 'wouter';\nimport { Shield, ArrowLeft, Eye, EyeOff } from 'lucide-react';\n\nconst verifySchema = z.object({\n  token: z.string().min(4, 'Código deve ter 4 números').max(4, 'Código deve ter 4 números'),\n  newPassword: z.string().min(6, 'Senha deve ter pelo menos 6 caracteres'),\n  confirmPassword: z.string().min(6, 'Confirmação é obrigatória')\n}).refine((data) => data.newPassword === data.confirmPassword, {\n  message: \"Senhas não conferem\",\n  path: [\"confirmPassword\"],\n});\n\ntype VerifyForm = z.infer<typeof verifySchema>;\n\nexport default function VerifyTokenPage() {\n  const [location, setLocation] = useLocation();\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const { toast } = useToast();\n\n  const form = useForm<VerifyForm>({\n    resolver: zodResolver(verifySchema),\n    defaultValues: {\n      token: '',\n      newPassword: '',\n      confirmPassword: ''\n    }\n  });\n\n  const onSubmit = async (data: VerifyForm) => {\n    setIsLoading(true);\n    setError('');\n    \n    try {\n      // Primeiro verificar o token\n      const verifyResponse = await fetch('/api/auth/verify-reset-token', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ token: data.token })\n      });\n\n      if (!verifyResponse.ok) {\n        const verifyData = await verifyResponse.json();\n        setError(verifyData.error || 'Código inválido');\n        return;\n      }\n\n      // Se o token é válido, redefinir a senha\n      const resetResponse = await fetch('/api/auth/reset-password', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          token: data.token,\n          newPassword: data.newPassword\n        })\n      });\n\n      const resetData = await resetResponse.json();\n\n      if (resetResponse.ok) {\n        setSuccess('Senha alterada com sucesso!');\n        toast({\n          title: \"Sucesso!\",\n          description: \"Sua senha foi alterada. Redirecionando para o login...\",\n        });\n        \n        setTimeout(() => {\n          setLocation('/login');\n        }, 2000);\n      } else {\n        setError(resetData.error || 'Erro ao alterar senha');\n      }\n    } catch (error) {\n      setError('Erro ao processar solicitação. Tente novamente.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  if (success) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-pink-50 to-blue-50 flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md bg-white/80 backdrop-blur border-0 shadow-lg\">\n          <CardHeader className=\"text-center space-y-4\">\n            <div className=\"mx-auto w-16 h-16 bg-green-500 rounded-full flex items-center justify-center\">\n              <span className=\"text-white text-2xl\">✓</span>\n            </div>\n            <CardTitle className=\"text-2xl font-bold text-green-600\">\n              Senha Alterada!\n            </CardTitle>\n            <CardDescription className=\"text-gray-600\">\n              Sua senha foi alterada com sucesso. Redirecionando...\n            </CardDescription>\n          </CardHeader>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-pink-50 to-blue-50 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md bg-white/80 backdrop-blur border-0 shadow-lg\">\n        <CardHeader className=\"text-center space-y-4\">\n          <div className=\"mx-auto w-16 h-16 bg-gradient-to-r from-pink-500 to-blue-500 rounded-full flex items-center justify-center\">\n            <Shield className=\"w-8 h-8 text-white\" />\n          </div>\n          <CardTitle className=\"text-2xl font-bold text-gray-800\">\n            Verificar Código\n          </CardTitle>\n          <CardDescription className=\"text-gray-600\">\n            Digite o código de 4 números recebido por email e sua nova senha\n          </CardDescription>\n        </CardHeader>\n\n        <CardContent className=\"space-y-6\">\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              \n              {/* Campo do Código */}\n              <FormField\n                control={form.control}\n                name=\"token\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-gray-700 font-medium\">\n                      Código de Verificação (4 números)\n                    </FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        type=\"number\"\n                        placeholder=\"0000\"\n                        maxLength={4}\n                        className=\"text-center text-2xl h-16 font-mono tracking-widest\"\n                        data-testid=\"input-token\"\n                        onChange={(e) => {\n                          const value = e.target.value.slice(0, 4);\n                          field.onChange(value);\n                        }}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Nova Senha */}\n              <FormField\n                control={form.control}\n                name=\"newPassword\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-gray-700 font-medium\">\n                      Nova Senha\n                    </FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <Input\n                          {...field}\n                          type={showPassword ? \"text\" : \"password\"}\n                          placeholder=\"Digite sua nova senha\"\n                          className=\"pr-10 h-12\"\n                          data-testid=\"input-new-password\"\n                        />\n                        <button\n                          type=\"button\"\n                          onClick={() => setShowPassword(!showPassword)}\n                          className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                        >\n                          {showPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                        </button>\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Confirmar Senha */}\n              <FormField\n                control={form.control}\n                name=\"confirmPassword\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-gray-700 font-medium\">\n                      Confirmar Nova Senha\n                    </FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <Input\n                          {...field}\n                          type={showConfirmPassword ? \"text\" : \"password\"}\n                          placeholder=\"Confirme sua nova senha\"\n                          className=\"pr-10 h-12\"\n                          data-testid=\"input-confirm-password\"\n                        />\n                        <button\n                          type=\"button\"\n                          onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                          className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                        >\n                          {showConfirmPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                        </button>\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {error && (\n                <Alert variant=\"destructive\">\n                  <AlertDescription>{error}</AlertDescription>\n                </Alert>\n              )}\n\n              <Button\n                type=\"submit\"\n                className=\"w-full h-12 bg-gradient-to-r from-pink-500 to-blue-500 hover:from-pink-600 hover:to-blue-600 text-white font-semibold\"\n                disabled={isLoading}\n                data-testid=\"button-verify-reset\"\n              >\n                {isLoading ? 'Processando...' : 'Verificar e Alterar Senha'}\n              </Button>\n            </form>\n          </Form>\n\n          <div className=\"text-center\">\n            <Link href=\"/reset-password\">\n              <button className=\"inline-flex items-center gap-2 text-sm text-gray-600 hover:text-pink-600 transition-colors\">\n                <ArrowLeft className=\"w-4 h-4\" />\n                Voltar para solicitar código\n              </button>\n            </Link>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":9791},"client/src/pages/weight-tracking.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { usePregnancy } from \"@/hooks/use-pregnancy\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { LoadingSpinner } from \"@/components/ui/loading-spinner\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport WeightChart from \"@/components/weight-chart\";\nimport BottomNavigation from \"@/components/layout/bottom-navigation\";\nimport { ArrowLeft, Scale, Plus, TrendingUp } from \"lucide-react\";\n\nexport default function WeightTracking() {\n  const [showAddForm, setShowAddForm] = useState(false);\n  const [weight, setWeight] = useState(\"\");\n  const [date, setDate] = useState(new Date().toISOString().split('T')[0]);\n  const [notes, setNotes] = useState(\"\");\n  const { user } = useAuth();\n  const { pregnancy } = usePregnancy();\n  const [, setLocation] = useLocation();\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const { data: weightData, isLoading } = useQuery({\n    queryKey: [\"/api/weight-entries\"],\n    enabled: !!pregnancy,\n  });\n\n  const addWeightMutation = useMutation({\n    mutationFn: async (weightEntry: any) => {\n      const response = await apiRequest(\"POST\", \"/api/weight-entries\", weightEntry);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/weight-entries\"] });\n      setShowAddForm(false);\n      setWeight(\"\");\n      setDate(new Date().toISOString().split('T')[0]);\n      setNotes(\"\");\n      toast({\n        title: \"Peso registrado!\",\n        description: \"Seu peso foi adicionado com sucesso.\",\n      });\n    },\n    onError: (error: any) => {\n      console.error(\"Erro ao registrar peso:\", error);\n      toast({\n        title: \"Erro ao Registrar peso\",\n        description: `Erro: ${error?.message || \"Erro desconhecido\"}. Verifique os dados e tente novamente.`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!weight || parseFloat(weight) <= 0) {\n      toast({\n        title: \"Erro\",\n        description: \"Por favor, insira um peso válido\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    addWeightMutation.mutate({\n      weight: weight,\n      date: date, // Enviar como string no formato ISO\n      notes: notes.trim() || undefined,\n    });\n  };\n\n  if (!user || !pregnancy) {\n    setLocation(\"/login\");\n    return null;\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <LoadingSpinner size=\"lg\" />\n      </div>\n    );\n  }\n\n  const entries = (weightData as any)?.entries || [];\n  const records = entries; // Para compatibilidade com componentes existentes\n  const latestWeight = entries.length > 0 ? entries[0] : null;\n  \n  // Calculate weight gain from first record\n  const firstWeight = records.length > 0 ? records[records.length - 1].weight : null;\n  const weightGain = latestWeight && firstWeight ? \n    parseFloat(latestWeight.weight) - parseFloat(firstWeight.weight) : 0;\n\n  return (\n    <div className=\"min-h-screen bg-cream pb-20\">\n      <div className=\"p-4 pt-12\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <Button \n            variant=\"ghost\" \n            size=\"icon\"\n            className=\"rounded-full bg-white shadow-lg\"\n            onClick={() => setLocation(\"/\")}\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"h-5 w-5 text-charcoal\" />\n          </Button>\n          <h2 className=\"text-xl font-bold text-charcoal\" data-testid=\"text-page-title\">\n            Controle de Peso\n          </h2>\n          <Button \n            variant=\"ghost\" \n            size=\"icon\"\n            className=\"rounded-full bg-baby-pink-dark shadow-lg\"\n            onClick={() => setShowAddForm(true)}\n            data-testid=\"button-add-weight\"\n          >\n            <Plus className=\"h-5 w-5 text-white\" />\n          </Button>\n        </div>\n\n        {/* Current weight display */}\n        <Card className=\"glass-effect shadow-xl mb-6\">\n          <CardContent className=\"p-6\">\n            <div className=\"text-center\">\n              <h3 className=\"text-lg font-semibold text-charcoal mb-2\">Peso Atual</h3>\n              <div className=\"text-3xl font-bold text-baby-pink-dark\" data-testid=\"text-current-weight\">\n                {latestWeight ? `${latestWeight.weight} kg` : \"Não registrado\"}\n              </div>\n              {weightGain !== 0 && (\n                <div className=\"text-sm text-gray-600 mt-1\" data-testid=\"text-weight-gain\">\n                  {weightGain > 0 ? '+' : ''}{weightGain.toFixed(1)} kg desde o início\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Weight chart */}\n        {records.length > 0 && (\n          <Card className=\"shadow-lg mb-6\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center text-charcoal\">\n                <TrendingUp className=\"mr-2 h-5 w-5\" />\n                Progresso\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <WeightChart records={records} />\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Weight goal */}\n        <Card className=\"shadow-lg mb-6\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-charcoal mb-4 flex items-center\">\n              <Scale className=\"mr-2 h-5 w-5\" />\n              Meta de Peso\n            </h3>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <span className=\"text-sm text-gray-600\">Meta total: </span>\n                <span className=\"font-semibold\" data-testid=\"text-weight-goal\">12-18 kg</span>\n              </div>\n              <div className=\"text-right\">\n                <div className=\"text-sm text-gray-600\">Restante</div>\n                <div className=\"font-semibold text-baby-blue-dark\" data-testid=\"text-weight-remaining\">\n                  {weightGain < 12 ? `${(12 - weightGain).toFixed(1)}-${(18 - weightGain).toFixed(1)} kg` : 'Meta atingida'}\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Recent records */}\n        {records.length > 0 && (\n          <Card className=\"shadow-lg\">\n            <CardHeader>\n              <CardTitle className=\"text-charcoal\">Registros Recentes</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {records.slice(0, 5).map((record: any) => (\n                  <div key={record.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                    <div>\n                      <div className=\"font-medium\" data-testid={`text-record-weight-${record.id}`}>\n                        {record.weight} kg\n                      </div>\n                      <div className=\"text-sm text-gray-500\" data-testid={`text-record-date-${record.id}`}>\n                        📅 {new Date(record.date).toLocaleDateString('pt-BR')}\n                      </div>\n                      {record.createdAt && (\n                        <div className=\"text-xs text-gray-400\" data-testid={`text-record-created-${record.id}`}>\n                          🕒 Registrado: {new Date(record.createdAt).toLocaleDateString('pt-BR')} às {new Date(record.createdAt).toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' })}\n                        </div>\n                      )}\n                    </div>\n                    {record.notes && (\n                      <div className=\"text-sm text-gray-600 max-w-32 truncate\" data-testid={`text-record-notes-${record.id}`}>\n                        {record.notes}\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {/* Add weight modal */}\n      {showAddForm && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50\">\n          <Card className=\"w-full max-w-md\">\n            <CardHeader>\n              <CardTitle className=\"text-charcoal\">Registrar Peso</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSubmit} className=\"space-y-4\" data-testid=\"form-add-weight\">\n                <div>\n                  <Label htmlFor=\"weight\" className=\"text-charcoal font-medium\">\n                    Peso (kg)\n                  </Label>\n                  <Input\n                    id=\"weight\"\n                    type=\"number\"\n                    step=\"0.1\"\n                    placeholder=\"Ex: 65.5\"\n                    value={weight}\n                    onChange={(e) => setWeight(e.target.value)}\n                    className=\"focus:ring-2 focus:ring-baby-pink focus:border-baby-pink-dark\"\n                    data-testid=\"input-weight\"\n                    required\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"date\" className=\"text-charcoal font-medium\">\n                    Data\n                  </Label>\n                  <Input\n                    id=\"date\"\n                    type=\"date\"\n                    value={date}\n                    onChange={(e) => setDate(e.target.value)}\n                    className=\"focus:ring-2 focus:ring-baby-pink focus:border-baby-pink-dark\"\n                    data-testid=\"input-date\"\n                    required\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"notes\" className=\"text-charcoal font-medium\">\n                    Observações (opcional)\n                  </Label>\n                  <Textarea\n                    id=\"notes\"\n                    placeholder=\"Ex: Após o almoço\"\n                    value={notes}\n                    onChange={(e) => setNotes(e.target.value)}\n                    className=\"focus:ring-2 focus:ring-baby-pink focus:border-baby-pink-dark\"\n                    data-testid=\"input-notes\"\n                  />\n                </div>\n                \n                <div className=\"flex space-x-3\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\"\n                    onClick={() => setShowAddForm(false)}\n                    className=\"flex-1\"\n                    data-testid=\"button-cancel\"\n                  >\n                    Cancelar\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    className=\"flex-1 bg-gradient-to-r from-baby-pink-dark to-baby-blue-dark hover:opacity-90\"\n                    disabled={addWeightMutation.isPending}\n                    data-testid=\"button-save\"\n                  >\n                    {addWeightMutation.isPending ? (\n                      <LoadingSpinner size=\"sm\" className=\"mr-2\" />\n                    ) : (\n                      <Scale className=\"mr-2 h-4 w-4\" />\n                    )}\n                    Salvar\n                  </Button>\n                </div>\n              </form>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      <BottomNavigation />\n    </div>\n  );\n}\n","size_bytes":11742},"client/src/components/layout/bottom-navigation.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Home, TrendingUp, Baby, Users, User, Book, Activity, Weight, Calendar } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nconst tabs = [\n  { id: \"dashboard\", path: \"/\", icon: Home, label: \"Início\" },\n  { id: \"kick-counter\", path: \"/kick-counter\", icon: Activity, label: \"Chutes\" },\n  { id: \"progress\", path: \"/progress\", icon: TrendingUp, label: \"Progresso\" },\n  { id: \"diary\", path: \"/diary\", icon: Book, label: \"Diário\" },\n  { id: \"profile\", path: \"/profile\", icon: User, label: \"Perfil\" },\n];\n\nexport default function BottomNavigation() {\n  const [location, setLocation] = useLocation();\n\n  return (\n    <div className=\"fixed bottom-0 left-1/2 transform -translate-x-1/2 w-full max-w-md bg-white dark:bg-gray-900 border-t border-gray-200 dark:border-gray-700 z-[100] shadow-lg backdrop-blur-sm isolation-isolate\">\n      <div className=\"flex items-center justify-around py-2\">\n        {tabs.map((tab) => {\n          const Icon = tab.icon;\n          const isActive = location === tab.path;\n          \n          return (\n            <Button\n              key={tab.id}\n              variant=\"ghost\"\n              size=\"sm\"\n              className={cn(\n                \"flex flex-col items-center py-2 px-4 transition-colors focus:outline-none focus:ring-2 focus:ring-pink-500 focus:ring-offset-2 focus:ring-offset-white dark:focus:ring-offset-gray-900 rounded-lg\",\n                isActive \n                  ? \"text-pink-600 dark:text-pink-400\" \n                  : \"text-gray-400 dark:text-gray-500 hover:text-pink-600 dark:hover:text-pink-400\"\n              )}\n              onClick={() => setLocation(tab.path)}\n              data-testid={`tab-${tab.id}`}\n            >\n              <Icon className=\"h-5 w-5 mb-1\" />\n              <span className=\"text-xs\">{tab.label}</span>\n            </Button>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","size_bytes":1962},"client/src/components/layout/floating-action-button.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useLocation } from \"wouter\";\nimport { Plus, Activity, Weight, Camera } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nexport default function FloatingActionButton() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [, setLocation] = useLocation();\n\n  const quickActions = [\n    { \n      icon: Activity, \n      label: \"Chute Rápido\", \n      color: \"bg-baby-pink-dark\", \n      action: () => setLocation(\"/kick-counter\") \n    },\n    { \n      icon: Weight, \n      label: \"Peso\", \n      color: \"bg-baby-blue-dark\", \n      action: () => setLocation(\"/weight-tracking\") \n    },\n    { \n      icon: Camera, \n      label: \"Foto\", \n      color: \"bg-coral\", \n      action: () => setLocation(\"/photo-album\") \n    },\n  ];\n\n  const toggleMenu = () => {\n    setIsOpen(!isOpen);\n  };\n\n  return (\n    <div className=\"fixed bottom-20 right-4 z-40\">\n      <div className=\"relative\">\n        {/* Main FAB */}\n        <Button\n          className={cn(\n            \"w-14 h-14 rounded-full shadow-2xl text-white transform transition-all duration-300\",\n            \"bg-gradient-to-r from-baby-pink-dark to-baby-blue-dark hover:scale-110\",\n            isOpen && \"rotate-45\"\n          )}\n          onClick={toggleMenu}\n          data-testid=\"button-fab-main\"\n        >\n          <Plus className=\"h-6 w-6\" />\n        </Button>\n        \n        {/* Quick action buttons */}\n        <div\n          className={cn(\n            \"absolute bottom-16 right-0 space-y-2 transition-all duration-300\",\n            isOpen ? \"opacity-100 pointer-events-auto\" : \"opacity-0 pointer-events-none\"\n          )}\n        >\n          {quickActions.map((action, index) => {\n            const Icon = action.icon;\n            return (\n              <Button\n                key={index}\n                className={cn(\n                  \"w-12 h-12 rounded-full shadow-lg text-white transform transition-all duration-300\",\n                  action.color,\n                  isOpen ? \"scale-100\" : \"scale-0\"\n                )}\n                style={{\n                  transitionDelay: isOpen ? `${index * 50}ms` : `${(quickActions.length - index - 1) * 50}ms`\n                }}\n                onClick={() => {\n                  action.action();\n                  setIsOpen(false);\n                }}\n                data-testid={`button-quick-${action.label.toLowerCase().replace(' ', '-')}`}\n              >\n                <Icon className=\"h-4 w-4\" />\n              </Button>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2607},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/loading-spinner.tsx":{"content":"import { cn } from \"@/lib/utils\";\n\ninterface LoadingSpinnerProps {\n  className?: string;\n  size?: \"sm\" | \"md\" | \"lg\";\n}\n\nexport function LoadingSpinner({ className, size = \"md\" }: LoadingSpinnerProps) {\n  return (\n    <div\n      className={cn(\n        \"animate-spin rounded-full border-2 border-gray-300 border-t-baby-pink-dark\",\n        {\n          \"h-4 w-4\": size === \"sm\",\n          \"h-6 w-6\": size === \"md\",\n          \"h-8 w-8\": size === \"lg\",\n        },\n        className\n      )}\n    />\n  );\n}\n\nexport default LoadingSpinner;\n","size_bytes":532},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/migrate-add-created-at.ts":{"content":"// Migração para adicionar colunas necessárias ao Supabase\nimport { db } from \"./db\";\nimport { sql } from \"drizzle-orm\";\n\nasync function migrateDatabase() {\n  console.log(\"🔄 Starting database migration...\");\n  \n  try {\n    // Adicionar created_at na tabela users se não existir\n    await db.execute(sql`\n      ALTER TABLE users \n      ADD COLUMN IF NOT EXISTS created_at TIMESTAMP DEFAULT NOW()\n    `);\n    console.log(\"✅ Added created_at to users table\");\n\n    // Criar tabela de analytics se não existir\n    await db.execute(sql`\n      CREATE TABLE IF NOT EXISTS user_analytics (\n        id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n        user_id VARCHAR REFERENCES users(id),\n        session_id TEXT NOT NULL,\n        action TEXT NOT NULL,\n        page TEXT NOT NULL,\n        element TEXT,\n        duration INTEGER,\n        metadata JSONB,\n        timestamp TIMESTAMP DEFAULT NOW()\n      )\n    `);\n    console.log(\"✅ Created user_analytics table\");\n\n    // Criar tabela de sessions se não existir\n    await db.execute(sql`\n      CREATE TABLE IF NOT EXISTS user_sessions (\n        id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n        user_id VARCHAR REFERENCES users(id) NOT NULL,\n        session_id TEXT NOT NULL UNIQUE,\n        start_time TIMESTAMP DEFAULT NOW(),\n        end_time TIMESTAMP,\n        total_duration INTEGER,\n        pages_visited JSONB DEFAULT '[]'::jsonb,\n        actions_count INTEGER DEFAULT 0,\n        user_agent TEXT,\n        ip_address TEXT\n      )\n    `);\n    console.log(\"✅ Created user_sessions table\");\n\n    // Criar tabela access_logs se não existir\n    await db.execute(sql`\n      CREATE TABLE IF NOT EXISTS access_logs (\n        id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n        user_id VARCHAR REFERENCES users(id),\n        email TEXT,\n        action TEXT NOT NULL,\n        ip_address TEXT,\n        user_agent TEXT,\n        success BOOLEAN DEFAULT true,\n        error_message TEXT,\n        session_id TEXT,\n        created_at TIMESTAMP DEFAULT NOW()\n      )\n    `);\n    console.log(\"✅ Created access_logs table\");\n\n    console.log(\"🎉 Database migration completed successfully!\");\n    \n  } catch (error) {\n    console.error(\"❌ Migration failed:\", error);\n    throw error;\n  }\n}\n\n// Executar migração se este arquivo for chamado diretamente\nif (require.main === module) {\n  migrateDatabase()\n    .then(() => process.exit(0))\n    .catch((error) => {\n      console.error(error);\n      process.exit(1);\n    });\n}\n\nexport { migrateDatabase };","size_bytes":2515},"client/src/components/pregnancy-tracker.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { usePregnancy } from \"@/hooks/use-pregnancy\";\nimport { useBabyDevelopment } from \"@/hooks/use-baby-development\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { LoadingSpinner } from \"@/components/ui/loading-spinner\";\nimport ThreeDBaby from \"@/components/three-d-baby\";\nimport { \n  ArrowLeft, \n  Baby, \n  Heart, \n  Ruler, \n  Weight, \n  Apple,\n  Activity,\n  User,\n  Calendar,\n  Info\n} from \"lucide-react\";\n\ninterface PregnancyTrackerProps {\n  onBack: () => void;\n}\n\nexport default function PregnancyTracker({ onBack }: PregnancyTrackerProps) {\n  const { user, isLoading: authLoading } = useAuth();\n  const { pregnancy, weekInfo, isLoading: pregnancyLoading } = usePregnancy();\n  const { data: developmentData, isLoading: developmentLoading } = useBabyDevelopment(weekInfo?.week || 0);\n  const [activeTab, setActiveTab] = useState(\"baby\");\n  const [, setLocation] = useLocation();\n\n  const isLoading = authLoading || pregnancyLoading || developmentLoading;\n\n  if (authLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-b from-pink-50 via-purple-50 to-blue-50\">\n        <LoadingSpinner size=\"lg\" />\n      </div>\n    );\n  }\n\n  if (!user) {\n    setLocation(\"/login\");\n    return null;\n  }\n\n  if (pregnancyLoading || developmentLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-b from-pink-50 via-purple-50 to-blue-50\">\n        <LoadingSpinner size=\"lg\" />\n      </div>\n    );\n  }\n\n  if (!pregnancy) {\n    setLocation(\"/setup\");\n    return null;\n  }\n\n  if (!weekInfo) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-b from-pink-50 via-purple-50 to-blue-50\">\n        <div className=\"text-center p-6\">\n          <Baby className=\"mx-auto h-12 w-12 text-pink-400 mb-4\" />\n          <h2 className=\"text-xl font-semibold text-gray-800 mb-2\">\n            Erro ao calcular semana\n          </h2>\n          <p className=\"text-gray-600 mb-4\">\n            Verifique os dados da sua gravidez\n          </p>\n          <Button onClick={onBack} variant=\"outline\">\n            Voltar\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const development = developmentData?.developmentData;\n\n  // Parse development milestones - if they're strings, split them; if they're arrays, use them\n  const parseMilestones = (milestones: string | string[]): string[] => {\n    if (Array.isArray(milestones)) {\n      return milestones;\n    }\n    if (typeof milestones === 'string') {\n      // Try to parse as JSON array first, then split by common delimiters\n      try {\n        const parsed = JSON.parse(milestones);\n        if (Array.isArray(parsed)) return parsed;\n      } catch {\n        // If not JSON, split by common separators\n        return milestones.split(/[;,\\n]/).map(item => item.trim()).filter(Boolean);\n      }\n    }\n    return [];\n  };\n\n  const babyMilestones = development ? parseMilestones(development.development_milestones_baby) : [];\n  const momMilestones = development ? parseMilestones(development.development_milestones_mom) : [];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-pink-50 via-purple-50 to-blue-50 pb-20\">\n      {/* Header */}\n      <div className=\"sticky top-0 z-10 bg-white/90 backdrop-blur-sm border-b border-pink-100 shadow-sm\">\n        <div className=\"flex items-center justify-between p-4 pt-12\">\n          <Button \n            variant=\"ghost\" \n            size=\"icon\"\n            className=\"rounded-full bg-white shadow-lg hover:bg-gray-50\"\n            onClick={onBack}\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"h-5 w-5 text-gray-700\" />\n          </Button>\n          \n          <div className=\"text-center\">\n            <h1 className=\"text-xl font-bold text-gray-800\">\n              Semana {weekInfo.week}\n            </h1>\n            <p className=\"text-sm text-gray-600\">\n              {weekInfo.weeksRemaining} semanas restantes\n            </p>\n          </div>\n          \n          <div className=\"w-10\" />\n        </div>\n      </div>\n\n      <div className=\"p-4\">\n        {/* Main Week Card */}\n        <Card className=\"bg-white/80 backdrop-blur-sm border-pink-100 shadow-xl mb-6 overflow-hidden\">\n          <div className=\"bg-gradient-to-r from-pink-400 to-purple-400 h-2\"></div>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex-1\">\n                <div className=\"flex items-center mb-3\">\n                  <Calendar className=\"h-5 w-5 text-pink-500 mr-2\" />\n                  <h2 className=\"text-2xl font-bold text-gray-800\">\n                    Semana {weekInfo.week}\n                  </h2>\n                </div>\n                \n                {development ? (\n                  <div className=\"grid grid-cols-2 gap-4 mb-4\">\n                    <div className=\"flex items-center\">\n                      <Ruler className=\"h-4 w-4 text-pink-500 mr-2\" />\n                      <div>\n                        <div className=\"text-sm text-gray-600\">Tamanho</div>\n                        <div className=\"font-semibold text-gray-800\" data-testid=\"text-baby-size\">\n                          {development.length_cm ? `${development.length_cm} cm` : development.size}\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center\">\n                      <Weight className=\"h-4 w-4 text-purple-500 mr-2\" />\n                      <div>\n                        <div className=\"text-sm text-gray-600\">Peso</div>\n                        <div className=\"font-semibold text-gray-800\" data-testid=\"text-baby-weight\">\n                          {development.weight_grams ? `${development.weight_grams} g` : development.weight}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"flex items-center justify-center py-8\">\n                    <Info className=\"h-5 w-5 text-gray-400 mr-2\" />\n                    <p className=\"text-gray-500\">\n                      Dados de desenvolvimento não disponíveis para esta semana\n                    </p>\n                  </div>\n                )}\n                \n                {development?.fruit_comparison && (\n                  <div className=\"bg-gradient-to-r from-pink-50 via-purple-50 to-pink-50 p-4 rounded-xl border border-pink-100 shadow-sm\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center flex-1\">\n                        <div className=\"bg-white p-2 rounded-lg shadow-sm mr-4\">\n                          {development.fruit_image_url ? (\n                            <img \n                              src={development.fruit_image_url.replace('@assets/', '/attached_assets/')} \n                              alt={`Tamanho de ${development.fruit_comparison}`}\n                              className=\"h-12 w-12 object-contain\"\n                              data-testid=\"img-fruit-comparison\"\n                            />\n                          ) : (\n                            <Apple className=\"h-12 w-12 text-pink-400\" />\n                          )}\n                        </div>\n                        <div>\n                          <div className=\"text-sm font-medium text-gray-600 mb-1\">\n                            Comparação de tamanho\n                          </div>\n                          <div className=\"font-semibold text-gray-800\" data-testid=\"text-baby-comparison\">\n                            Tamanho de {development.fruit_comparison}\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"text-xs text-gray-500\">Semana {weekInfo.week}</div>\n                        <div className=\"text-sm font-medium text-purple-600\">\n                          {development.length_cm ? `${development.length_cm} cm` : development.size}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n              \n              <div className=\"ml-6\">\n                <ThreeDBaby week={weekInfo.week} size={100} />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Mom & Baby Tabs */}\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2 bg-white/80 backdrop-blur-sm border border-pink-100 shadow-lg\">\n            <TabsTrigger \n              value=\"baby\" \n              className=\"data-[state=active]:bg-gradient-to-r data-[state=active]:from-pink-400 data-[state=active]:to-purple-400 data-[state=active]:text-white transition-all duration-300\"\n              data-testid=\"tab-baby\"\n            >\n              <Baby className=\"h-4 w-4 mr-2\" />\n              Bebê\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"mom\" \n              className=\"data-[state=active]:bg-gradient-to-r data-[state=active]:from-pink-400 data-[state=active]:to-purple-400 data-[state=active]:text-white transition-all duration-300\"\n              data-testid=\"tab-mom\"\n            >\n              <Heart className=\"h-4 w-4 mr-2\" />\n              Mamãe\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Baby Tab Content */}\n          <TabsContent value=\"baby\" className=\"mt-4\">\n            <Card className=\"bg-white/80 backdrop-blur-sm border-pink-100 shadow-lg\">\n              <CardHeader className=\"bg-gradient-to-r from-pink-50 to-purple-50\">\n                <CardTitle className=\"flex items-center text-gray-800\">\n                  <Activity className=\"mr-2 h-5 w-5 text-pink-500\" />\n                  Desenvolvimento do Bebê\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-6\">\n                {/* Size Comparison Card at top of Baby tab */}\n                {development?.fruit_comparison && (\n                  <div className=\"mb-6 bg-gradient-to-r from-pink-50 via-white to-purple-50 p-5 rounded-2xl border border-pink-100 shadow-lg\">\n                    <div className=\"text-center\">\n                      <h3 className=\"text-lg font-bold text-gray-800 mb-3\">\n                        Seu bebê está do tamanho de\n                      </h3>\n                      <div className=\"flex flex-col items-center\">\n                        <div className=\"bg-white p-6 rounded-full shadow-lg mb-4\">\n                          {development.fruit_image_url ? (\n                            <img \n                              src={development.fruit_image_url.replace('@assets/', '/attached_assets/')} \n                              alt={`Tamanho de ${development.fruit_comparison}`}\n                              className=\"h-20 w-20 object-contain\"\n                              data-testid=\"img-fruit-comparison-large\"\n                            />\n                          ) : (\n                            <Apple className=\"h-20 w-20 text-pink-400\" />\n                          )}\n                        </div>\n                        <div className=\"text-xl font-bold text-purple-700 mb-2\">\n                          {development.fruit_comparison}\n                        </div>\n                        <div className=\"flex gap-4 text-sm text-gray-600\">\n                          <span><strong>Tamanho:</strong> {development.length_cm ? `${development.length_cm} cm` : development.size}</span>\n                          <span><strong>Peso:</strong> {development.weight_grams ? `${development.weight_grams} g` : development.weight}</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {development?.baby_description && (\n                  <div className=\"mb-4 p-4 bg-pink-50 rounded-lg\">\n                    <p className=\"text-gray-700\">{development.baby_description}</p>\n                  </div>\n                )}\n                \n                {babyMilestones.length > 0 ? (\n                  <div className=\"space-y-3\">\n                    {babyMilestones.map((milestone, index) => (\n                      <div \n                        key={index} \n                        className=\"flex items-start space-x-3 p-3 bg-gradient-to-r from-pink-50 to-purple-50 rounded-lg border border-pink-100\"\n                        data-testid={`text-baby-development-${index}`}\n                      >\n                        <div className=\"w-2 h-2 bg-gradient-to-r from-pink-400 to-purple-400 rounded-full mt-2 flex-shrink-0\" />\n                        <span className=\"text-gray-700\">{milestone}</span>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <Baby className=\"h-12 w-12 text-gray-300 mx-auto mb-4\" />\n                    <p className=\"text-gray-500\">\n                      Marcos de desenvolvimento não disponíveis para esta semana\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Mom Tab Content */}\n          <TabsContent value=\"mom\" className=\"mt-4\">\n            <Card className=\"bg-white/80 backdrop-blur-sm border-pink-100 shadow-lg\">\n              <CardHeader className=\"bg-gradient-to-r from-pink-50 to-purple-50\">\n                <CardTitle className=\"flex items-center text-gray-800\">\n                  <User className=\"mr-2 h-5 w-5 text-pink-500\" />\n                  Mudanças na Mamãe\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-6\">\n                {development?.mom_description && (\n                  <div className=\"mb-4 p-4 bg-pink-50 rounded-lg\">\n                    <p className=\"text-gray-700\">{development.mom_description}</p>\n                  </div>\n                )}\n                \n                {momMilestones.length > 0 ? (\n                  <div className=\"space-y-3\">\n                    {momMilestones.map((milestone, index) => (\n                      <div \n                        key={index} \n                        className=\"flex items-start space-x-3 p-3 bg-gradient-to-r from-pink-50 to-purple-50 rounded-lg border border-pink-100\"\n                        data-testid={`text-mom-development-${index}`}\n                      >\n                        <div className=\"w-2 h-2 bg-gradient-to-r from-pink-400 to-purple-400 rounded-full mt-2 flex-shrink-0\" />\n                        <span className=\"text-gray-700\">{milestone}</span>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <Heart className=\"h-12 w-12 text-gray-300 mx-auto mb-4\" />\n                    <p className=\"text-gray-500\">\n                      Informações sobre mudanças na mamãe não disponíveis para esta semana\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":15731},"client/src/hooks/use-baby-development.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { BabyDevelopment } from \"@shared/schema\";\nimport { getInterpolatedBabyData, getBabyDevelopmentData, getPregnancyPhase, type BabyDevelopmentData } from \"@/lib/baby-data\";\n\ninterface BabyDevelopmentResponse {\n  developmentData: BabyDevelopment;\n}\n\ninterface AllBabyDevelopmentResponse {\n  developmentData: BabyDevelopment[];\n}\n\nexport function useBabyDevelopment(week: number) {\n  return useQuery<BabyDevelopmentResponse>({\n    queryKey: [\"/api/baby-development\", week],\n    enabled: week > 0 && week <= 42,\n    queryFn: async () => {\n      try {\n        const response = await fetch(`/api/baby-development/${week}`, {\n          credentials: \"include\",\n        });\n        if (!response.ok) {\n          return null;\n        }\n        return response.json();\n      } catch (error) {\n        return null;\n      }\n    },\n  });\n}\n\n// Hook para dados locais de desenvolvimento do bebê\nexport function useBabyDevelopmentLocal(week: number) {\n  return useQuery({\n    queryKey: ['baby-development-local', week],\n    queryFn: () => {\n      return new Promise<BabyDevelopmentData>((resolve) => {\n        setTimeout(() => {\n          const data = getInterpolatedBabyData(week);\n          resolve(data);\n        }, 50);\n      });\n    },\n    staleTime: 5 * 60 * 1000,\n    enabled: week > 0 && week <= 42,\n  });\n}\n\nexport function useBabyDevelopmentRange(startWeek: number, endWeek: number) {\n  return useQuery({\n    queryKey: ['baby-development-range', startWeek, endWeek],\n    queryFn: () => {\n      return new Promise<BabyDevelopmentData[]>((resolve) => {\n        setTimeout(() => {\n          const weeks = Array.from(\n            { length: endWeek - startWeek + 1 }, \n            (_, i) => startWeek + i\n          );\n          const data = weeks.map(week => getInterpolatedBabyData(week));\n          resolve(data);\n        }, 100);\n      });\n    },\n    staleTime: 5 * 60 * 1000,\n    enabled: startWeek > 0 && endWeek <= 42 && startWeek <= endWeek,\n  });\n}\n\nexport function useAllBabyDevelopment() {\n  return useQuery<AllBabyDevelopmentResponse>({\n    queryKey: [\"/api/baby-development\"],\n    queryFn: async () => {\n      try {\n        const response = await fetch(\"/api/baby-development\", {\n          credentials: \"include\",\n        });\n        if (!response.ok) {\n          return null;\n        }\n        return response.json();\n      } catch (error) {\n        return null;\n      }\n    },\n  });\n}\n\n// Hook para obter marcos de desenvolvimento por trimestre\nexport function useDevelopmentMilestones(trimester: 1 | 2 | 3) {\n  const weekRanges = {\n    1: { start: 1, end: 12 },\n    2: { start: 13, end: 27 },\n    3: { start: 28, end: 40 }\n  };\n\n  const range = weekRanges[trimester];\n  \n  return useQuery({\n    queryKey: ['development-milestones', trimester],\n    queryFn: () => {\n      return new Promise<{\n        trimester: number;\n        weeks: BabyDevelopmentData[];\n        keyMilestones: string[];\n        motherChanges: string[];\n        phase: ReturnType<typeof getPregnancyPhase>;\n      }>((resolve) => {\n        setTimeout(() => {\n          const weeks = Array.from(\n            { length: range.end - range.start + 1 },\n            (_, i) => range.start + i\n          ).map(week => getInterpolatedBabyData(week));\n\n          // Extrair marcos importantes para o trimestre\n          const keyMilestones = weeks\n            .flatMap(w => w.developments)\n            .filter((milestone, index, arr) => arr.indexOf(milestone) === index)\n            .slice(0, 5);\n\n          const motherChanges = weeks\n            .map(w => w.development_milestones_mom)\n            .filter((change, index, arr) => arr.indexOf(change) === index)\n            .slice(0, 3);\n\n          const phase = getPregnancyPhase(Math.floor((range.start + range.end) / 2));\n\n          resolve({\n            trimester,\n            weeks,\n            keyMilestones,\n            motherChanges,\n            phase\n          });\n        }, 150);\n      });\n    },\n    staleTime: 10 * 60 * 1000,\n  });\n}\n\n// Hook para obter comparações de tamanho\nexport function useBabySizeComparisons() {\n  return useQuery({\n    queryKey: ['baby-size-comparisons'],\n    queryFn: () => {\n      const comparisons = [\n        { weeks: [1, 4], object: \"🔸\", name: \"Ponto microscópico\", size: \"0.1mm\" },\n        { weeks: [4, 8], object: \"🫘\", name: \"Semente\", size: \"4mm\" },\n        { weeks: [8, 12], object: \"🫐\", name: \"Framboesa\", size: \"1.6cm\" },\n        { weeks: [12, 16], object: \"🍋\", name: \"Limão\", size: \"5.4cm\" },\n        { weeks: [16, 20], object: \"🥑\", name: \"Abacate\", size: \"11.6cm\" },\n        { weeks: [20, 24], object: \"🍌\", name: \"Banana\", size: \"16.4cm\" },\n        { weeks: [24, 28], object: \"🌽\", name: \"Espiga de milho\", size: \"21cm\" },\n        { weeks: [28, 32], object: \"🍆\", name: \"Berinjela\", size: \"25cm\" },\n        { weeks: [32, 36], object: \"🥥\", name: \"Coco\", size: \"28cm\" },\n        { weeks: [36, 40], object: \"🥭\", name: \"Papaia\", size: \"32cm\" },\n        { weeks: [40], object: \"🍉\", name: \"Melancia pequena\", size: \"36cm\" },\n      ];\n      \n      return Promise.resolve(comparisons);\n    },\n    staleTime: Infinity,\n  });\n}","size_bytes":5178},"server/baby-development-seed.ts":{"content":"// Dados de exemplo para desenvolvimento do bebê\nexport const babyDevelopmentSeedData = [\n  {\n    week: 8,\n    size: \"1,6 cm\",\n    weight: \"1 g\",\n    fruit_comparison: \"framboesa\",\n    development_milestones_baby: \"Os braços e pernas do bebê começam a se formar; O coração bate rapidamente; Os dedos das mãos e dos pés começam a aparecer; O sistema nervoso se desenvolve\",\n    development_milestones_mom: \"Possíveis náuseas matinais; Seios podem estar sensíveis; Pequeno ganho de peso; Mudanças hormonais podem causar fadiga\",\n    baby_description: \"Nesta semana, seu bebê está crescendo rapidamente e desenvolvendo características mais humanas.\",\n    mom_description: \"Você pode estar experimentando os primeiros sinais da gravidez de forma mais intensa.\"\n  },\n  {\n    week: 12,\n    size: \"5,4 cm\",\n    weight: \"14 g\",\n    fruit_comparison: \"lima\",\n    development_milestones_baby: \"Órgãos principais estão formados; O bebê pode fazer pequenos movimentos; Unhas começam a crescer; O sistema digestivo começa a funcionar\",\n    development_milestones_mom: \"Náuseas podem diminuir; Energia pode retornar; Cintura começa a expandir; Risco de aborto diminui significativamente\",\n    baby_description: \"Seu bebê agora tem traços faciais mais definidos e pode até fazer pequenos movimentos.\",\n    mom_description: \"O fim do primeiro trimestre traz alívio para muitos sintomas iniciais da gravidez.\"\n  },\n  {\n    week: 20,\n    size: \"16,4 cm\",\n    weight: \"300 g\",\n    fruit_comparison: \"banana\",\n    development_milestones_baby: \"Você pode sentir os primeiros movimentos; Os órgãos sexuais estão desenvolvidos; O bebê pode ouvir sons; Cabelo e sobrancelhas crescem\",\n    development_milestones_mom: \"Barriga claramente visível; Possível dor nas costas; Sono pode ser mais difícil; Ultrassom morfológico é realizado\",\n    baby_description: \"Esta é uma semana emocionante - você pode começar a sentir os primeiros chutes do seu bebê!\",\n    mom_description: \"Sua barriga está crescendo e você realmente se sente grávida agora.\"\n  },\n  {\n    week: 24,\n    size: \"21 cm\",\n    weight: \"630 g\",\n    fruit_comparison: \"milho\",\n    development_milestones_baby: \"Pulmões estão se desenvolvendo; O bebê responde a sons; Impressões digitais se formam; Pode sobreviver com cuidados médicos intensivos\",\n    development_milestones_mom: \"Teste de diabetes gestacional; Possível azia; Varizes podem aparecer; Movimentos do bebê são mais fortes\",\n    baby_description: \"Seu bebê está atingindo a viabilidade fetal - um marco importante no desenvolvimento.\",\n    mom_description: \"Você está na metade da gravidez e pode notar mudanças significativas no seu corpo.\"\n  },\n  {\n    week: 28,\n    size: \"25 cm\",\n    weight: \"1 kg\",\n    fruit_comparison: \"berinjela\",\n    development_milestones_baby: \"Pálpebras se abrem e fecham; O cérebro se desenvolve rapidamente; Pode sonhar; Ossos endurecem\",\n    development_milestones_mom: \"Terceiro trimestre começa; Falta de ar pode ocorrer; Consultas médicas mais frequentes; Possível síndrome do túnel do carpo\",\n    baby_description: \"Seu bebê está cada vez mais ativo e seus sentidos estão se aprimorando rapidamente.\",\n    mom_description: \"Bem-vinda ao terceiro trimestre! Seu corpo está trabalhando duro para sustentar seu bebê em crescimento.\"\n  },\n  {\n    week: 32,\n    size: \"28 cm\",\n    weight: \"1,7 kg\",\n    fruit_comparison: \"coco\",\n    development_milestones_baby: \"Ganho de peso acelerado; Pulmões quase maduros; Unhas crescem; Movimentos podem ser menos frequentes por falta de espaço\",\n    development_milestones_mom: \"Dificuldade para dormir; Micção mais frequente; Possível inchação nos pés; Preparação para o parto\",\n    baby_description: \"Seu bebê está ganhando peso rapidamente e se preparando para a vida fora do útero.\",\n    mom_description: \"O espaço está ficando apertado e você pode sentir mais desconforto conforme o bebê cresce.\"\n  },\n  {\n    week: 36,\n    size: \"32 cm\",\n    weight: \"2,6 kg\",\n    fruit_comparison: \"abacaxi\",\n    development_milestones_baby: \"Considerado a termo precoce; Pulmões maduros; Ganha cerca de 30g por dia; Sistema imunológico se fortalece\",\n    development_milestones_mom: \"Respiração pode melhorar se o bebê descer; Contrações de Braxton Hicks; Preparação final para o parto; Exames de grupo B estreptococo\",\n    baby_description: \"Seu bebê está quase pronto para nascer e está ganhando os últimos quilos importantes.\",\n    mom_description: \"Você está na reta final! Seu corpo está se preparando ativamente para o trabalho de parto.\"\n  },\n  {\n    week: 39,\n    size: \"35 cm\",\n    weight: \"3,2 kg\",\n    fruit_comparison: \"melancia pequena\",\n    development_milestones_baby: \"Totalmente desenvolvido; Pronto para nascer a qualquer momento; Continua ganhando peso; Sistema nervoso amadurecendo\",\n    development_milestones_mom: \"Pode sentir mais energia (nesting instinct); Colo do útero pode começar a dilatar; Sintomas de trabalho de parto podem começar; Ansiedade sobre o parto\",\n    baby_description: \"Seu bebê está completamente desenvolvido e pronto para conhecer você!\",\n    mom_description: \"Você pode sentir uma explosão de energia e o desejo de preparar tudo para a chegada do bebê.\"\n  },\n  {\n    week: 40,\n    size: \"36 cm\",\n    weight: \"3,4 kg\",\n    fruit_comparison: \"melancia\",\n    development_milestones_baby: \"Completamente maduro; Pronto para a vida extrauterina; Pode nascer a qualquer momento; Continuará crescendo após o nascimento\",\n    development_milestones_mom: \"Data prevista do parto; Sinais de trabalho de parto; Contrações regulares podem começar; Emoção e ansiedade sobre conhecer o bebê\",\n    baby_description: \"Parabéns! Seu bebê chegou ao termo completo e está pronto para vir ao mundo!\",\n    mom_description: \"Este é o momento que você esperou por 9 meses. Seu corpo sabe o que fazer - confie nele!\"\n  }\n];","size_bytes":5934},"client/src/pages/setup.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { ObjectUploader } from \"@/components/ObjectUploader\";\nimport { ArrowLeft, Camera, User, Heart } from \"lucide-react\";\nimport type { UploadResult } from \"@uppy/core\";\n\nexport default function Setup() {\n  const [, setLocation] = useLocation();\n  const [profilePhoto, setProfilePhoto] = useState<string | null>(null);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (profileData: { profilePhotoUrl?: string }) => {\n      const response = await apiRequest(\"PATCH\", \"/api/auth/profile\", profileData);\n      if (!response.ok) {\n        throw new Error(\"Failed to update profile\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n      toast({\n        title: \"Sucesso!\",\n        description: \"Perfil atualizado com sucesso!\",\n      });\n      setLocation(\"/\");\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao atualizar perfil. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleGetUploadParameters = async () => {\n    const response = await apiRequest(\"POST\", \"/api/uploads/profile-photo\", {});\n    const data = await response.json();\n    return {\n      method: \"PUT\" as const,\n      url: data.uploadURL,\n    };\n  };\n\n  const handleUploadComplete = (result: UploadResult<Record<string, unknown>, Record<string, unknown>>) => {\n    if (result.successful && result.successful.length > 0) {\n      const uploadedFile = result.successful[0];\n      setProfilePhoto(uploadedFile.uploadURL as string);\n      toast({\n        title: \"Sucesso!\",\n        description: \"Foto de perfil carregada com sucesso!\",\n      });\n    }\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    updateProfileMutation.mutate({\n      profilePhotoUrl: profilePhoto || undefined,\n    });\n  };\n\n  const handleSkip = () => {\n    setLocation(\"/\");\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col items-center justify-center p-6 gradient-bg\">\n      <Card className=\"w-full max-w-md glass-effect shadow-2xl\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex items-center justify-between\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => setLocation(\"/pregnancy-setup\")}\n              className=\"text-gray-600 hover:text-gray-800\"\n              data-testid=\"button-back\"\n            >\n              <ArrowLeft className=\"h-5 w-5\" />\n            </Button>\n            <CardTitle className=\"text-2xl font-bold text-charcoal flex-1\">\n              Seus Dados Pessoais\n            </CardTitle>\n            <div className=\"w-10\" /> {/* Spacer para centralizar título */}\n          </div>\n          <p className=\"text-gray-600 mt-2\">\n            Vamos começar com algumas informações sobre você\n          </p>\n        </CardHeader>\n\n        <CardContent className=\"p-6\">\n          <form onSubmit={handleSubmit} className=\"space-y-6\" data-testid=\"form-profile-setup\">\n            <div className=\"text-center\">\n              <Avatar className=\"w-32 h-32 mx-auto mb-6\">\n                <AvatarImage src={profilePhoto || undefined} />\n                <AvatarFallback className=\"bg-baby-pink text-baby-pink-dark text-4xl\">\n                  <User className=\"w-16 h-16\" />\n                </AvatarFallback>\n              </Avatar>\n              \n              <ObjectUploader\n                maxNumberOfFiles={1}\n                maxFileSize={5242880} // 5MB\n                onGetUploadParameters={handleGetUploadParameters}\n                onComplete={handleUploadComplete}\n                buttonClassName=\"w-full mb-4\"\n              >\n                <Camera className=\"mr-2 h-4 w-4\" />\n                {profilePhoto ? \"Alterar Foto\" : \"Adicionar Foto de Perfil\"}\n              </ObjectUploader>\n              <p className=\"text-xs text-gray-500\">Opcional - você pode adicionar depois</p>\n            </div>\n\n            <div className=\"flex gap-3\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={handleSkip}\n                className=\"flex-1\"\n                data-testid=\"button-skip\"\n              >\n                Pular\n              </Button>\n              <Button \n                type=\"submit\" \n                className=\"flex-1 bg-gradient-to-r from-baby-pink-dark to-baby-blue-dark hover:opacity-90\"\n                disabled={updateProfileMutation.isPending}\n                data-testid=\"button-continue\"\n              >\n                <Heart className=\"mr-2 h-4 w-4\" />\n                Continuar\n              </Button>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":5281},"client/src/components/Baby3D.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { getInterpolatedBabyData, getPregnancyPhase } from '@/lib/baby-data';\n\n// Importar as imagens 3D geradas\nimport baby8weeks from '@assets/generated_images/8-week_fetus_3D_realistic_b436f945.png';\nimport baby12weeks from '@assets/generated_images/12-week_fetus_3D_realistic_52fbd5db.png';\nimport baby16weeks from '@assets/generated_images/16-week_fetus_3D_realistic_9c0a57bb.png';\nimport baby20weeks from '@assets/generated_images/20-week_fetus_3D_realistic_87f5a187.png';\nimport baby28weeks from '@assets/generated_images/28-week_fetus_3D_realistic_1158e5df.png';\nimport baby36weeks from '@assets/generated_images/36-week_fetus_3D_realistic_e9a2b0f5.png';\n// Imagens personalizadas\nimport baby2weeks from '@assets/2_1757176256170.jpeg';\nimport baby3weeks from '@assets/3_1757174102100.png';\n\ninterface Baby3DProps {\n  week: number;\n  size?: 'small' | 'medium' | 'large';\n  className?: string;\n  showInfo?: boolean;\n  interactive?: boolean;\n  animate?: boolean;\n}\n\nconst BABY_IMAGES = {\n  1: baby8weeks,  // Para semanas muito iniciais\n  2: baby2weeks,  // Imagem personalizada da semana 2\n  3: baby3weeks,  // Imagem personalizada da semana 3\n  4: baby8weeks,\n  8: baby8weeks,\n  12: baby12weeks,\n  16: baby16weeks,\n  20: baby20weeks,\n  24: baby20weeks,\n  28: baby28weeks,\n  32: baby28weeks,\n  36: baby36weeks,\n  40: baby36weeks,\n};\n\nexport default function Baby3D({ \n  week, \n  size = 'medium',\n  className = \"\",\n  showInfo = true,\n  interactive = false,\n  animate = true\n}: Baby3DProps) {\n  const [currentImage, setCurrentImage] = useState<string>('');\n  const [imageError, setImageError] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isHovered, setIsHovered] = useState(false);\n  const [animationPhase, setAnimationPhase] = useState(0);\n  \n  const babyData = getInterpolatedBabyData(week);\n  const pregnancyPhase = getPregnancyPhase(week);\n\n  useEffect(() => {\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`🖼️ Carregando imagem para semana ${week}`);\n    }\n    \n    // Usar imagens importadas diretamente baseadas na semana\n    let selectedImage = baby8weeks;\n\n    if (week === 2) {\n      if (process.env.NODE_ENV === 'development') {\n        console.log(`🖼️ Usando baby2weeks para semana 2`);\n      }\n      selectedImage = baby2weeks;\n    } else if (week === 3) {\n      if (process.env.NODE_ENV === 'development') {\n        console.log(`🖼️ Usando baby3weeks para semana 3`);\n      }\n      selectedImage = baby3weeks;\n    } else if (week >= 36) {\n      selectedImage = baby36weeks;\n    } else if (week >= 28) {\n      selectedImage = baby28weeks;\n    } else if (week >= 20) {\n      selectedImage = baby20weeks;\n    } else if (week >= 16) {\n      selectedImage = baby16weeks;\n    } else if (week >= 12) {\n      selectedImage = baby12weeks;\n    } else {\n      selectedImage = baby8weeks;\n    }\n\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`🖼️ Imagem selecionada:`, selectedImage);\n    }\n    setCurrentImage(selectedImage);\n    setImageError(false);\n    setIsLoading(false);\n  }, [week]);\n\n  useEffect(() => {\n    if (!animate) return;\n    \n    // Animação de pulsação sutil para simular batimento cardíaco\n    const heartbeatInterval = setInterval(() => {\n      setAnimationPhase(prev => (prev + 1) % 4);\n    }, 1200);\n\n    return () => clearInterval(heartbeatInterval);\n  }, [animate]);\n\n  const getSizeClasses = () => {\n    switch (size) {\n      case 'small':\n        return 'w-32 h-32';\n      case 'medium':\n        return 'w-48 h-48';\n      case 'large':\n        return 'w-64 h-64 lg:w-80 lg:h-80';\n      default:\n        return 'w-48 h-48';\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div \n        className={`flex items-center justify-center ${getSizeClasses()} ${className}`}\n        data-testid={`baby-3d-loading-week-${week}`}\n      >\n        <div className=\"relative\">\n          {/* Loading animation com batimento cardíaco */}\n          <div className=\"w-16 h-16 rounded-full bg-gradient-to-br from-pink-200 to-blue-200 animate-pulse\"></div>\n          <div className=\"absolute inset-0 w-16 h-16 rounded-full border-4 border-pink-300 border-t-transparent animate-spin\"></div>\n          <div className=\"absolute inset-2 w-12 h-12 rounded-full bg-gradient-to-br from-pink-100 to-blue-100 animate-bounce\"></div>\n          \n          {/* Heart icon no centro */}\n          <div className=\"absolute inset-0 flex items-center justify-center\">\n            <div className=\"text-pink-500 animate-pulse\">💖</div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div \n      className={`relative ${getSizeClasses()} ${className} group`}\n      onMouseEnter={() => interactive && setIsHovered(true)}\n      onMouseLeave={() => interactive && setIsHovered(false)}\n      data-testid={`baby-3d-component-week-${week}`}\n    >\n      <div className={`\n        relative overflow-hidden rounded-3xl bg-gradient-to-br \n        ${pregnancyPhase.phase === 'Primeiro Trimestre' ? 'from-pink-100/30 to-rose-100/30' : \n          pregnancyPhase.phase === 'Segundo Trimestre' ? 'from-blue-100/30 to-sky-100/30' :\n          'from-purple-100/30 to-violet-100/30'}\n        backdrop-blur-sm transition-all duration-500\n        ${interactive ? 'hover:scale-105 cursor-pointer' : ''}\n        ${animate && animationPhase % 2 === 0 ? 'scale-[1.02]' : 'scale-100'}\n      `}>\n        {/* Imagem principal do bebê */}\n        {currentImage && !imageError ? (\n          <img \n            src={currentImage}\n            alt={`Bebê na semana ${week} de desenvolvimento`}\n            className={`\n              w-full h-full object-cover rounded-full transition-all duration-700\n              ${animate ? 'animate-pulse-slow' : ''}\n              ${isHovered ? 'scale-110' : 'scale-100'}\n            `}\n            style={{\n              filter: `\n                drop-shadow(0 15px 35px rgba(0,0,0,0.15)) \n                brightness(${isHovered ? '1.1' : '1'}) \n                contrast(${isHovered ? '1.1' : '1'})\n              `\n            }}\n            onError={() => setImageError(true)}\n            data-testid={`baby-image-week-${week}`}\n          />\n        ) : (\n          <div \n            className={`\n              w-full h-full rounded-full bg-gradient-to-br from-pink-200 to-blue-200 \n              flex items-center justify-center transition-all duration-700\n              ${animate ? 'animate-pulse-slow' : ''}\n              ${isHovered ? 'scale-110' : 'scale-100'}\n            `}\n            data-testid={`baby-fallback-week-${week}`}\n          >\n            <div className=\"text-4xl opacity-60\">👶</div>\n          </div>\n        )}\n        \n        {/* Efeito de brilho animado */}\n        <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/15 to-transparent animate-shimmer\"></div>\n        \n        {/* Partículas flutuantes */}\n        {animate && (\n          <>\n            <div className=\"absolute top-4 left-4 w-2 h-2 bg-pink-300/50 rounded-full animate-bounce\" style={{ animationDelay: '0s' }}></div>\n            <div className=\"absolute top-8 right-8 w-1 h-1 bg-blue-300/50 rounded-full animate-bounce\" style={{ animationDelay: '0.5s' }}></div>\n            <div className=\"absolute bottom-8 left-8 w-1.5 h-1.5 bg-purple-300/50 rounded-full animate-bounce\" style={{ animationDelay: '1s' }}></div>\n          </>\n        )}\n        \n        {/* Informações do bebê */}\n        {showInfo && babyData && (\n          <div className=\"absolute bottom-2 left-2 right-2 text-center\">\n            <div className=\"text-xs font-medium text-white/90 bg-black/30 rounded-full px-2 py-1 backdrop-blur-sm\">\n              {babyData.size} • {babyData.weight}\n            </div>\n          </div>\n        )}\n\n        {/* Indicador de fase da gravidez */}\n        <div \n          className={`absolute top-4 left-4 w-3 h-3 rounded-full ${\n            pregnancyPhase.phase === 'Primeiro Trimestre' ? 'bg-pink-400' :\n            pregnancyPhase.phase === 'Segundo Trimestre' ? 'bg-blue-400' : \n            'bg-purple-400'\n          } animate-pulse`} \n          title={pregnancyPhase.phase}\n          data-testid={`pregnancy-phase-indicator-${pregnancyPhase.phase.toLowerCase().replace(/\\s+/g, '-')}`}\n        ></div>\n\n        {/* Efeito de batimento cardíaco */}\n        {animate && week >= 8 && (\n          <div className=\"absolute top-6 left-6\">\n            <div className={`\n              text-red-400 transition-all duration-200 \n              ${animationPhase === 0 ? 'scale-125 opacity-100' : 'scale-100 opacity-60'}\n            `}>\n              💓\n            </div>\n          </div>\n        )}\n\n        {/* Overlay interativo */}\n        {interactive && isHovered && (\n          <div \n            className=\"absolute inset-0 bg-gradient-to-br from-pink-200/10 to-blue-200/10 rounded-3xl flex items-center justify-center\"\n            data-testid=\"interactive-overlay\"\n          >\n            <div \n              className=\"text-white/80 text-sm font-medium bg-black/20 rounded-full px-4 py-2 backdrop-blur-sm\"\n              data-testid=\"interactive-overlay-text\"\n            >\n              Clique para mais detalhes\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Informações estendidas para componentes maiores */}\n      {size === 'large' && showInfo && (\n        <div className=\"mt-4 text-center\">\n          <div className={`text-lg font-semibold mb-1 ${pregnancyPhase.color}`}>\n            {pregnancyPhase.phase}\n          </div>\n          <div className=\"text-gray-600 text-sm\">\n            {pregnancyPhase.description}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":9710},"server/seed-baby-development.ts":{"content":"import { db } from \"./storage\";\nimport { babyDevelopment } from \"../shared/schema\";\nimport { babyDevelopmentSeedData } from \"./baby-development-seed\";\n\nexport async function seedBabyDevelopment() {\n  try {\n    console.log(\"🌱 Populando tabela baby_development com dados reais...\");\n    \n    // Inserir todos os dados seed na tabela\n    for (const data of babyDevelopmentSeedData) {\n      try {\n        await db.insert(babyDevelopment).values({\n          week: data.week,\n          size: data.size,\n          weight: data.weight,\n          fruit_comparison: data.fruit_comparison,\n          development_milestones_baby: data.development_milestones_baby,\n          development_milestones_mom: data.development_milestones_mom,\n          baby_description: data.baby_description || \"\",\n          mom_description: data.mom_description || \"\"\n        }).onConflictDoUpdate({\n          target: babyDevelopment.week,\n          set: {\n            size: data.size,\n            weight: data.weight,\n            fruit_comparison: data.fruit_comparison,\n            development_milestones_baby: data.development_milestones_baby,\n            development_milestones_mom: data.development_milestones_mom,\n            baby_description: data.baby_description || \"\",\n            mom_description: data.mom_description || \"\"\n          }\n        });\n        console.log(`✓ Dados da semana ${data.week} inseridos/atualizados`);\n      } catch (error: any) {\n        console.log(`⚠️ Erro ao inserir dados da semana ${data.week}:`, error.message);\n      }\n    }\n    \n    console.log(\"✅ Tabela baby_development populada com sucesso!\");\n    return true;\n  } catch (error: any) {\n    console.error(\"❌ Erro ao popular tabela baby_development:\", error.message);\n    return false;\n  }\n}","size_bytes":1764},"server/seed-baby-data-with-measurements.ts":{"content":"// Script para popular dados reais de desenvolvimento do bebê com medidas\nimport { storage } from './storage';\n\nconst babyDevelopmentData = [\n  {\n    week: 1,\n    size: \"0.1 mm\",\n    weight: \"< 1g\", \n    fruit_comparison: \"Como uma semente\",\n    length_cm: 0.1,\n    weight_grams: 0.1,\n    development_milestones_baby: \"Fertilização acontece. O óvulo fertilizado se implanta no útero.\",\n    development_milestones_mom: \"Você pode não saber que está grávida ainda. Últimos dias da menstruação.\"\n  },\n  {\n    week: 4, \n    size: \"2 mm\",\n    weight: \"< 1g\",\n    fruit_comparison: \"Como uma semente de papoula\", \n    length_cm: 0.2,\n    weight_grams: 0.1,\n    development_milestones_baby: \"O embrião tem cerca de 2mm. Coração primitivo começa a se formar.\",\n    development_milestones_mom: \"Período menstrual em atraso. Hormônios da gravidez começam a circular.\"\n  },\n  {\n    week: 8,\n    size: \"1.6 cm\", \n    weight: \"1g\",\n    fruit_comparison: \"Como um feijão\",\n    length_cm: 1.6,\n    weight_grams: 1,\n    development_milestones_baby: \"Braços e pernas estão se desenvolvendo. Coração bate cerca de 150 vezes por minuto. Dedos dos pés e das mãos começam a se formar.\",\n    development_milestones_mom: \"Náuseas matinais podem começar. Seios ficam mais sensíveis. Pode sentir mais cansaço que o normal.\"\n  },\n  {\n    week: 12,\n    size: \"5.4 cm\",\n    weight: \"14g\", \n    fruit_comparison: \"Como uma ameixa\",\n    length_cm: 5.4,\n    weight_grams: 14,\n    development_milestones_baby: \"Órgãos vitais estão funcionando. Pode sugar o polegar. Unhas dos pés e das mãos estão se desenvolvendo.\",\n    development_milestones_mom: \"Náuseas podem diminuir. Útero cresce além da pelve. Pode começar a 'mostrar' a barriga.\"\n  },\n  {\n    week: 16,\n    size: \"11.6 cm\",\n    weight: \"100g\",\n    fruit_comparison: \"Como um abacate\",\n    length_cm: 11.6, \n    weight_grams: 100,\n    development_milestones_baby: \"Pode ouvir sua voz. Movimentos coordenados dos braços e pernas. Cabelo e sobrancelhas estão crescendo.\",\n    development_milestones_mom: \"Pode sentir os primeiros movimentos do bebê. Energia volta. Pele pode ficar mais brilhante.\"\n  },\n  {\n    week: 20,\n    size: \"16.4 cm\", \n    weight: \"300g\",\n    fruit_comparison: \"Como uma banana\",\n    length_cm: 16.4,\n    weight_grams: 300,\n    development_milestones_baby: \"Pode ouvir sons externos. Cabelo, sobrancelhas e cílios estão visíveis. Sistema digestivo está funcionando.\",\n    development_milestones_mom: \"Meio da gravidez! Ultrassom morfológico pode revelar o sexo. Movimentos do bebê ficam mais fortes.\"\n  },\n  {\n    week: 24,\n    size: \"21 cm\",\n    weight: \"630g\", \n    fruit_comparison: \"Como uma espiga de milho\",\n    length_cm: 21,\n    weight_grams: 630,\n    development_milestones_baby: \"Pulmões estão se desenvolvendo. Pode responder à luz e som. Impressões digitais estão se formando.\",\n    development_milestones_mom: \"Barriga está crescendo rapidamente. Pode ter azia ou indigestão. Teste de diabetes gestacional.\"\n  },\n  {\n    week: 28,\n    size: \"25 cm\",\n    weight: \"1000g\",\n    fruit_comparison: \"Como uma berinjela\",\n    length_cm: 25,\n    weight_grams: 1000,\n    development_milestones_baby: \"Pode abrir e fechar os olhos. Cérebro está desenvolvendo rapidamente. Padrões de sono mais regulares.\",\n    development_milestones_mom: \"Terceiro trimestre! Pode sentir contrações de Braxton Hicks. Consultas pré-natais ficam mais frequentes.\"\n  },\n  {\n    week: 32,\n    size: \"28 cm\",\n    weight: \"1700g\", \n    fruit_comparison: \"Como uma jaca\",\n    length_cm: 28,\n    weight_grams: 1700,\n    development_milestones_baby: \"Ossos estão endurecendo. Pode virar de cabeça para baixo. Unhas estão crescendo.\",\n    development_milestones_mom: \"Falta de ar pode aumentar. Barriga está bem grande. Pode ter dificuldade para dormir.\"\n  },\n  {\n    week: 36,\n    size: \"32.2 cm\",\n    weight: \"2600g\",\n    fruit_comparison: \"Como um melão cantalupo\",\n    length_cm: 32.2,\n    weight_grams: 2600, \n    development_milestones_baby: \"Considerado quase a termo. Pulmões estão quase maduros. Ganha cerca de 200g por semana.\",\n    development_milestones_mom: \"Consultas semanais começam. Bebê pode 'encaixar'. Bolsa hospitalar deve estar pronta.\"\n  },\n  {\n    week: 40,\n    size: \"36.2 cm\", \n    weight: \"3400g\",\n    fruit_comparison: \"Como uma melancia pequena\",\n    length_cm: 36.2,\n    weight_grams: 3400,\n    development_milestones_baby: \"Totalmente desenvolvido e pronto para nascer. Intestinos cheios de mecônio. Crânio ainda mole para facilitar o parto.\",\n    development_milestones_mom: \"Data provável do parto! Sinais de trabalho de parto podem começar. Ansiedade e expectativa para conhecer o bebê.\"\n  }\n];\n\nexport async function seedBabyDataWithMeasurements() {\n  console.log('🌱 Populando dados de desenvolvimento com medidas...');\n\n  for (const data of babyDevelopmentData) {\n    try {\n      console.log(`📝 Inserindo dados da semana ${data.week}...`);\n      \n      await storage.createBabyDevelopment({\n        week: data.week,\n        size: data.size,\n        weight: data.weight,\n        fruit_comparison: data.fruit_comparison,\n        development_milestones_baby: data.development_milestones_baby,\n        development_milestones_mom: data.development_milestones_mom,\n        baby_description: \"\",\n        mom_description: \"\",\n        length_cm: data.length_cm,\n        weight_grams: data.weight_grams,\n      });\n      \n      console.log(`✅ Semana ${data.week} inserida com sucesso!`);\n    } catch (error) {\n      console.log(`⚠️ Semana ${data.week} já existe ou erro:`, error);\n    }\n  }\n\n  console.log('✅ Processo de inserção concluído!');\n}\n\n// Executar se chamado diretamente\nif (require.main === module) {\n  seedBabyDataWithMeasurements().then(() => {\n    console.log('🎉 Dados populados com sucesso!');\n    process.exit(0);\n  }).catch((error) => {\n    console.error('❌ Erro ao popular dados:', error);\n    process.exit(1);\n  });\n}","size_bytes":5986},"client/src/components/Layout.tsx":{"content":"import { useLocation } from 'wouter';\nimport { cn } from '@/lib/utils';\nimport { useAuth } from '@/hooks/useAuth';\nimport { authManager } from '@/lib/auth';\nimport BottomNavigation from '@/components/layout/bottom-navigation';\n\ninterface LayoutProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\nexport function Layout({ children, className }: LayoutProps) {\n  const [location] = useLocation();\n  const { user, isLoading } = useAuth();\n  \n  // Páginas que não devem ter layout (login, setup, etc.)\n  const noLayoutPages = ['/login', '/reset-password', '/forgot-password', '/setup', '/pregnancy-setup'];\n  const shouldHideLayout = noLayoutPages.some(page => location.startsWith(page));\n  \n  // Se está carregando, mostrar loading\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-pink-50 to-blue-50\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-2 border-pink-300 border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Carregando...</p>\n        </div>\n      </div>\n    );\n  }\n  \n  // Se não está logado e não está em página pública, redirecionar para login\n  if (!user && !shouldHideLayout) {\n    console.log(\"🔄 Redirecting to login - user not authenticated\");\n    // Forçar redirecionamento imediato sem cache\n    window.location.replace('/login');\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-pink-50 to-blue-50\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-2 border-pink-300 border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Redirecionando...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (shouldHideLayout) {\n    return <>{children}</>;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-pink-50/50 via-white to-blue-50/50\">\n      {/* Conteúdo principal - sem sidebar lateral */}\n      <div className=\"min-h-screen\">\n        <main className={cn(\n          'min-h-screen pb-20', // Adicionar padding-bottom para navegação\n          className\n        )}>\n          {children}\n        </main>\n        \n        {/* Navegação inferior */}\n        <BottomNavigation />\n      </div>\n    </div>\n  );\n}\n\nexport default Layout;","size_bytes":2382},"client/src/components/Navigation.tsx":{"content":"import { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\nimport {\n  Home,\n  Baby,\n  Activity,\n  Calendar,\n  ShoppingCart,\n  Camera,\n  BookOpen,\n  Dumbbell,\n  ChefHat,\n  FileText,\n  Pill,\n  Users,\n  TrendingUp,\n  Heart,\n  Settings,\n  LogOut,\n  Menu,\n  X,\n  Sparkles,\n  Apple,\n  Weight\n} from 'lucide-react';\n\ninterface NavigationItem {\n  id: string;\n  label: string;\n  path: string;\n  icon: any;\n  color: string;\n  description: string;\n}\n\nconst navigationItems: NavigationItem[] = [\n  { id: 'home', label: 'Dashboard', path: '/', icon: Home, color: 'text-pink-500', description: 'Visão geral da gravidez' },\n  { id: 'baby', label: 'Bebê 3D', path: '/baby-development', icon: Baby, color: 'text-blue-500', description: 'Desenvolvimento semana a semana' },\n  { id: 'kicks', label: 'Chutinhos', path: '/kick-counter', icon: Activity, color: 'text-green-500', description: 'Contador de movimentos' },\n  { id: 'weight', label: 'Peso', path: '/weight-tracking', icon: Weight, color: 'text-purple-500', description: 'Controle de peso' },\n  { id: 'progress', label: 'Progresso', path: '/progress', icon: TrendingUp, color: 'text-orange-500', description: 'Gráficos e estatísticas' },\n  { id: 'consultations', label: 'Consultas', path: '/consultations', icon: Calendar, color: 'text-teal-500', description: 'Agendamentos médicos' },\n  { id: 'shopping', label: 'Compras', path: '/shopping-list', icon: ShoppingCart, color: 'text-indigo-500', description: 'Lista de enxoval' },\n  { id: 'photos', label: 'Fotos', path: '/photo-album', icon: Camera, color: 'text-pink-600', description: 'Álbum da barriga' },\n  { id: 'diary', label: 'Diário', path: '/diary', icon: BookOpen, color: 'text-violet-500', description: 'Diário da gestação' },\n  { id: 'birth-plan', label: 'Plano de Parto', path: '/birth-plan', icon: FileText, color: 'text-rose-500', description: 'Planejamento do parto' },\n  { id: 'exercises', label: 'Exercícios', path: '/exercises', icon: Dumbbell, color: 'text-blue-600', description: 'Atividades físicas' },\n  { id: 'recipes', label: 'Receitas', path: '/recipes', icon: ChefHat, color: 'text-green-600', description: 'Receitas saudáveis' },\n  { id: 'symptoms', label: 'Sintomas', path: '/symptoms', icon: Heart, color: 'text-red-500', description: 'Acompanhamento de sintomas' },\n  { id: 'medications', label: 'Medicamentos', path: '/medications', icon: Pill, color: 'text-yellow-600', description: 'Controle de medicações' },\n  { id: 'community', label: 'Comunidade', path: '/community', icon: Users, color: 'text-cyan-500', description: 'Rede de mães' }\n];\n\nexport function Sidebar() {\n  const [location, setLocation] = useLocation();\n  const { user, logout } = useAuth();\n  const [isCollapsed, setIsCollapsed] = useState(false);\n\n  const handleLogout = async () => {\n    try {\n      await logout();\n      setLocation('/login');\n    } catch (error) {\n      console.error('Erro ao fazer logout:', error);\n    }\n  };\n\n  const isActive = (path: string) => {\n    if (path === '/' && location === '/') return true;\n    if (path !== '/' && location.startsWith(path)) return true;\n    return false;\n  };\n\n  return (\n    <div className={cn(\n      'hidden lg:flex lg:flex-col lg:h-screen lg:bg-gradient-to-b lg:from-pink-50/80 lg:to-blue-50/80 lg:border-r lg:border-pink-200/30 lg:backdrop-blur-sm transition-all duration-300',\n      isCollapsed ? 'lg:w-20' : 'lg:w-72'\n    )}>\n      {/* Header da Sidebar */}\n      <div className=\"p-6 border-b border-pink-200/30\">\n        <div className=\"flex items-center justify-between\">\n          {!isCollapsed && (\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 rounded-full bg-gradient-to-br from-pink-400 to-blue-400 flex items-center justify-center\">\n                <Baby className=\"w-5 h-5 text-white\" />\n              </div>\n              <div>\n                <h2 className=\"text-lg font-bold text-gray-800\">Mama Care</h2>\n                <p className=\"text-sm text-gray-500\">Cuidando de você e seu bebê</p>\n              </div>\n            </div>\n          )}\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setIsCollapsed(!isCollapsed)}\n            className=\"shrink-0\"\n          >\n            {isCollapsed ? <Menu className=\"w-4 h-4\" /> : <X className=\"w-4 h-4\" />}\n          </Button>\n        </div>\n      </div>\n\n      {/* Navigation Items */}\n      <div className=\"flex-1 py-6 px-3 space-y-2 overflow-y-auto\">\n        {navigationItems.map((item) => {\n          const Icon = item.icon;\n          const active = isActive(item.path);\n          \n          return (\n            <Button\n              key={item.id}\n              onClick={() => setLocation(item.path)}\n              variant=\"ghost\"\n              className={cn(\n                'w-full flex items-center space-x-3 px-3 py-3 rounded-xl transition-all duration-200 group',\n                active \n                  ? 'bg-white/80 shadow-sm border border-pink-200/30 text-gray-800' \n                  : 'text-gray-600 hover:bg-white/50 hover:text-gray-800',\n                isCollapsed ? 'justify-center' : 'justify-start'\n              )}\n              data-testid={`nav-${item.id}`}\n            >\n              <Icon className={cn('w-5 h-5 shrink-0', active ? item.color : 'text-gray-500 group-hover:text-gray-700')} />\n              {!isCollapsed && (\n                <div className=\"flex-1 text-left\">\n                  <div className=\"font-medium text-sm\">{item.label}</div>\n                  <div className=\"text-xs text-gray-500 group-hover:text-gray-600\">{item.description}</div>\n                </div>\n              )}\n            </Button>\n          );\n        })}\n      </div>\n\n      {/* User Section */}\n      <div className=\"p-4 border-t border-pink-200/30 bg-white/30\">\n        {!isCollapsed && user && (\n          <div className=\"flex items-center space-x-3 mb-4\">\n            <div className=\"w-10 h-10 rounded-full bg-gradient-to-br from-pink-400 to-blue-400 flex items-center justify-center\">\n              <span className=\"text-white font-medium text-sm\">\n                {user.name?.charAt(0).toUpperCase() || 'U'}\n              </span>\n            </div>\n            <div className=\"flex-1\">\n              <div className=\"font-medium text-sm text-gray-800\">{user.name}</div>\n              <div className=\"text-xs text-gray-500\">{user.email}</div>\n            </div>\n          </div>\n        )}\n        \n        <div className={cn('flex gap-2', isCollapsed ? 'flex-col' : 'flex-row')}>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setLocation('/profile')}\n            className={cn('flex-1 border-pink-200', isCollapsed ? 'px-2' : '')}\n            data-testid=\"nav-profile\"\n          >\n            <Settings className=\"w-4 h-4\" />\n            {!isCollapsed && <span className=\"ml-2\">Perfil</span>}\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={handleLogout}\n            className={cn('flex-1 border-pink-200 text-red-600 hover:text-red-700', isCollapsed ? 'px-2' : '')}\n            data-testid=\"nav-logout\"\n          >\n            <LogOut className=\"w-4 h-4\" />\n            {!isCollapsed && <span className=\"ml-2\">Sair</span>}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport function BottomNavigation() {\n  const [location, setLocation] = useLocation();\n\n  const mainItems = navigationItems.slice(0, 4); // Primeiras 4 funcionalidades principais\n  \n  const isActive = (path: string) => {\n    if (path === '/' && location === '/') return true;\n    if (path !== '/' && location.startsWith(path)) return true;\n    return false;\n  };\n\n  return (\n    <div className=\"lg:hidden fixed bottom-0 left-0 right-0 bg-white/95 backdrop-blur-sm border-t border-pink-200/30 z-50\">\n      <div className=\"flex items-center justify-around py-2 px-4\">\n        {mainItems.map((item) => {\n          const Icon = item.icon;\n          const active = isActive(item.path);\n          \n          return (\n            <Button\n              key={item.id}\n              onClick={() => setLocation(item.path)}\n              variant=\"ghost\"\n              className={cn(\n                'flex flex-col items-center space-y-1 px-3 py-2 rounded-lg transition-all duration-200',\n                active ? 'bg-pink-50' : 'hover:bg-pink-50/50'\n              )}\n              data-testid={`mobile-nav-${item.id}`}\n            >\n              <Icon className={cn('w-5 h-5', active ? item.color : 'text-gray-500')} />\n              <span className={cn('text-xs font-medium', active ? 'text-gray-800' : 'text-gray-500')}>\n                {item.label}\n              </span>\n            </Button>\n          );\n        })}\n        \n        {/* Menu button for more options */}\n        <Button\n          onClick={() => setLocation('/menu')}\n          variant=\"ghost\"\n          className={cn(\n            'flex flex-col items-center space-y-1 px-3 py-2 rounded-lg transition-all duration-200',\n            location === '/menu' ? 'bg-pink-50' : 'hover:bg-pink-50/50'\n          )}\n          data-testid=\"mobile-nav-menu\"\n        >\n          <Menu className={cn('w-5 h-5', location === '/menu' ? 'text-pink-500' : 'text-gray-500')} />\n          <span className={cn('text-xs font-medium', location === '/menu' ? 'text-gray-800' : 'text-gray-500')}>\n            Menu\n          </span>\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport function MobileMenu() {\n  const [location, setLocation] = useLocation();\n  const { user, logout } = useAuth();\n\n  const handleLogout = async () => {\n    try {\n      await logout();\n      setLocation('/login');\n    } catch (error) {\n      console.error('Erro ao fazer logout:', error);\n    }\n  };\n\n  const isActive = (path: string) => {\n    if (path === '/' && location === '/') return true;\n    if (path !== '/' && location.startsWith(path)) return true;\n    return false;\n  };\n\n  const additionalItems = navigationItems.slice(4); // Itens restantes\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-pink-50 to-blue-50 pb-20\">\n      {/* Header */}\n      <div className=\"bg-white/80 backdrop-blur-sm border-b border-pink-200/30 p-6\">\n        <div className=\"flex items-center space-x-3 mb-4\">\n          <div className=\"w-12 h-12 rounded-full bg-gradient-to-br from-pink-400 to-blue-400 flex items-center justify-center\">\n            <Baby className=\"w-6 h-6 text-white\" />\n          </div>\n          <div>\n            <h1 className=\"text-xl font-bold text-gray-800\">Mama Care</h1>\n            <p className=\"text-sm text-gray-600\">Todas as funcionalidades</p>\n          </div>\n        </div>\n        \n        {user && (\n          <div className=\"flex items-center space-x-3 p-3 bg-pink-50/50 rounded-xl\">\n            <div className=\"w-10 h-10 rounded-full bg-gradient-to-br from-pink-400 to-blue-400 flex items-center justify-center\">\n              <span className=\"text-white font-medium text-sm\">\n                {user.name?.charAt(0).toUpperCase() || 'U'}\n              </span>\n            </div>\n            <div className=\"flex-1\">\n              <div className=\"font-medium text-sm text-gray-800\">{user.name}</div>\n              <div className=\"text-xs text-gray-500\">{user.email}</div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Navigation Grid */}\n      <div className=\"p-6\">\n        <div className=\"grid grid-cols-2 gap-4\">\n          {additionalItems.map((item) => {\n            const Icon = item.icon;\n            const active = isActive(item.path);\n            \n            return (\n              <Button\n                key={item.id}\n                onClick={() => setLocation(item.path)}\n                variant=\"ghost\"\n                className={cn(\n                  'h-24 flex flex-col items-center space-y-2 p-4 rounded-xl transition-all duration-200',\n                  active \n                    ? 'bg-white shadow-sm border border-pink-200/30' \n                    : 'bg-white/50 hover:bg-white/80'\n                )}\n                data-testid={`menu-${item.id}`}\n              >\n                <Icon className={cn('w-6 h-6', active ? item.color : 'text-gray-600')} />\n                <div className=\"text-center\">\n                  <div className=\"font-medium text-sm text-gray-800\">{item.label}</div>\n                  <div className=\"text-xs text-gray-500\">{item.description}</div>\n                </div>\n              </Button>\n            );\n          })}\n        </div>\n        \n        {/* Action Buttons */}\n        <div className=\"mt-8 space-y-3\">\n          <Button\n            onClick={() => setLocation('/profile')}\n            variant=\"outline\"\n            className=\"w-full py-3 border-pink-200\"\n            data-testid=\"menu-profile\"\n          >\n            <Settings className=\"w-5 h-5 mr-3\" />\n            Configurações e Perfil\n          </Button>\n          \n          <Button\n            onClick={handleLogout}\n            variant=\"outline\"\n            className=\"w-full py-3 border-red-200 text-red-600 hover:text-red-700\"\n            data-testid=\"menu-logout\"\n          >\n            <LogOut className=\"w-5 h-5 mr-3\" />\n            Sair da Conta\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":13412},"client/src/pages/progress.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { LoadingSpinner } from '@/components/ui/loading-spinner';\nimport ProgressCircle from '@/components/progress-circle';\nimport WeightChart from '@/components/weight-chart';\nimport Baby3D from '@/components/Baby3D';\nimport { usePregnancy } from '@/hooks/use-pregnancy';\nimport { useBabyDevelopmentLocal, useBabyDevelopmentRange, useBabySizeComparisons } from '@/hooks/use-baby-development';\nimport { \n  TrendingUp, \n  Baby, \n  Scale, \n  Ruler,\n  Heart,\n  Calendar,\n  Target,\n  Activity,\n  ArrowUp,\n  ArrowDown,\n  Sparkles,\n  ChevronLeft,\n  ChevronRight\n} from 'lucide-react';\nimport { \n  AreaChart, \n  Area, \n  LineChart, \n  Line, \n  XAxis, \n  YAxis, \n  CartesianGrid, \n  Tooltip, \n  ResponsiveContainer,\n  BarChart,\n  Bar,\n  PieChart,\n  Pie,\n  Cell\n} from 'recharts';\n\nexport function Progress() {\n  const [selectedWeek, setSelectedWeek] = useState<number>(20);\n  const { pregnancy, weekInfo } = usePregnancy();\n  const currentWeek = weekInfo?.week || 20;\n  \n  const { data: currentBabyData, isLoading: currentBabyLoading } = useBabyDevelopmentLocal(currentWeek);\n  const { data: weekRangeData, isLoading: rangeLoading } = useBabyDevelopmentRange(1, 40);\n  const { data: sizeComparisons, isLoading: comparisonsLoading } = useBabySizeComparisons();\n\n  // Mock data para gráfico de peso (em uma implementação real, viria da API)\n  const { data: weightData } = useQuery({\n    queryKey: ['weight-records'],\n    queryFn: () => {\n      const mockWeightData = Array.from({ length: currentWeek }, (_, i) => {\n        const week = i + 1;\n        const baseWeight = 65; // peso inicial\n        const weightGain = Math.min(12, (week / 40) * 12 + Math.random() * 2 - 1); // ganho gradual com variação\n        return {\n          id: `week-${week}`,\n          weight: (baseWeight + weightGain).toFixed(1),\n          date: new Date(Date.now() - (40 - week) * 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n          notes: `Semana ${week}`\n        };\n      });\n      return mockWeightData;\n    }\n  });\n\n  // Dados para gráfico de crescimento do bebê\n  const babyGrowthData = weekRangeData?.map(data => ({\n    week: data.week,\n    length_cm: data.length_cm || 0,\n    weight_grams: (data.weight_grams || 0) / 1000, // converter para kg para melhor visualização\n    comparison: data.fruit_comparison,\n  })) || [];\n\n  // Dados do progresso por trimestre\n  const trimesterData = [\n    {\n      name: '1º Trimestre',\n      weeks: 12,\n      completed: Math.min(currentWeek, 12),\n      color: '#EC4899',\n      milestones: ['Formação de órgãos', 'Primeiro batimento', 'Reflexos básicos']\n    },\n    {\n      name: '2º Trimestre', \n      weeks: 15,\n      completed: Math.max(0, Math.min(currentWeek - 12, 15)),\n      color: '#3B82F6',\n      milestones: ['Movimentos', 'Audição', 'Sexo definido']\n    },\n    {\n      name: '3º Trimestre',\n      weeks: 13, \n      completed: Math.max(0, Math.min(currentWeek - 27, 13)),\n      color: '#8B5CF6',\n      milestones: ['Preparação nascimento', 'Pulmões maduros', 'Ganho de peso']\n    }\n  ];\n\n  if (currentBabyLoading || rangeLoading || comparisonsLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-pink-50 via-white to-blue-50 flex items-center justify-center\">\n        <LoadingSpinner size=\"lg\" />\n      </div>\n    );\n  }\n\n  const progressPercentage = Math.round((currentWeek / 40) * 100);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-pink-50 via-white to-blue-50 p-4 lg:p-6\">\n      <div className=\"max-w-7xl mx-auto space-y-6\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-4xl font-bold text-gray-800 mb-3 flex items-center justify-center\">\n            <TrendingUp className=\"w-10 h-10 mr-3 text-pink-500\" />\n            Progresso da Gestação\n          </h1>\n          <p className=\"text-gray-600 text-lg\">\n            Acompanhe o desenvolvimento do seu bebê e sua jornada\n          </p>\n          \n          {currentBabyData && (\n            <Badge variant=\"secondary\" className=\"mt-3 bg-gradient-to-r from-pink-100 to-blue-100 text-gray-700 px-4 py-2 text-base\">\n              <Baby className=\"w-4 h-4 mr-2\" />\n              Semana {currentWeek} • {currentBabyData.fruit_comparison}\n            </Badge>\n          )}\n        </div>\n\n        {/* Cards de Resumo */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <Card className=\"text-center border-pink-200/30 hover:shadow-lg transition-shadow\">\n            <CardContent className=\"pt-6\">\n              <div className=\"relative mb-4\">\n                <ProgressCircle percentage={progressPercentage} size={80} strokeWidth={6} />\n              </div>\n              <h3 className=\"font-semibold text-gray-800\">Progresso Total</h3>\n              <p className=\"text-sm text-gray-600\">{currentWeek} de 40 semanas</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-blue-200/30 hover:shadow-lg transition-shadow\">\n            <CardContent className=\"pt-6 text-center\">\n              <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-3\">\n                <Ruler className=\"w-6 h-6 text-blue-600\" />\n              </div>\n              <h3 className=\"font-semibold text-gray-800\">Tamanho do Bebê</h3>\n              <p className=\"text-lg font-bold text-blue-600\">{currentBabyData?.length_cm || 0}cm</p>\n              <p className=\"text-sm text-gray-600\">Comprimento</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-purple-200/30 hover:shadow-lg transition-shadow\">\n            <CardContent className=\"pt-6 text-center\">\n              <div className=\"w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-3\">\n                <Scale className=\"w-6 h-6 text-purple-600\" />\n              </div>\n              <h3 className=\"font-semibold text-gray-800\">Peso do Bebê</h3>\n              <p className=\"text-lg font-bold text-purple-600\">{currentBabyData?.weight_grams || 0}g</p>\n              <p className=\"text-sm text-gray-600\">Peso estimado</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-green-200/30 hover:shadow-lg transition-shadow\">\n            <CardContent className=\"pt-6 text-center\">\n              <div className=\"w-12 h-12 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-3\">\n                <Heart className=\"w-6 h-6 text-green-600\" />\n              </div>\n              <h3 className=\"font-semibold text-gray-800\">Trimestre</h3>\n              <p className=\"text-lg font-bold text-green-600\">\n                {currentWeek <= 12 ? '1º' : currentWeek <= 27 ? '2º' : '3º'}\n              </p>\n              <p className=\"text-sm text-gray-600\">\n                {currentWeek <= 12 ? 'Formação' : currentWeek <= 27 ? 'Crescimento' : 'Preparação'}\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Tabs de Gráficos */}\n        <Tabs defaultValue=\"timeline\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-1 lg:grid-cols-4 mb-6 h-auto\">\n            <TabsTrigger value=\"timeline\" className=\"flex items-center py-3\">\n              <Calendar className=\"w-4 h-4 mr-2\" />\n              Timeline\n            </TabsTrigger>\n            <TabsTrigger value=\"growth\" className=\"flex items-center py-3\">\n              <TrendingUp className=\"w-4 h-4 mr-2\" />\n              Crescimento\n            </TabsTrigger>\n            <TabsTrigger value=\"weight\" className=\"flex items-center py-3\">\n              <Scale className=\"w-4 h-4 mr-2\" />\n              Peso\n            </TabsTrigger>\n            <TabsTrigger value=\"comparison\" className=\"flex items-center py-3\">\n              <Target className=\"w-4 h-4 mr-2\" />\n              Comparações\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Timeline Tab */}\n          <TabsContent value=\"timeline\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Calendar className=\"w-5 h-5 mr-2 text-pink-500\" />\n                  Timeline da Gravidez\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-6\">\n                  {/* Timeline visual */}\n                  <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                    {trimesterData.map((trimester, index) => (\n                      <Card key={index} className=\"relative overflow-hidden\">\n                        <CardContent className=\"pt-6\">\n                          <div className=\"text-center mb-4\">\n                            <h3 className=\"font-semibold text-lg\" style={{ color: trimester.color }}>\n                              {trimester.name}\n                            </h3>\n                            <p className=\"text-sm text-gray-600\">\n                              {trimester.completed} de {trimester.weeks} semanas\n                            </p>\n                          </div>\n                          \n                          <ProgressCircle \n                            percentage={Math.round((trimester.completed / trimester.weeks) * 100)} \n                            size={100}\n                            className=\"mx-auto mb-4\"\n                          />\n                          \n                          <div className=\"space-y-2\">\n                            {trimester.milestones.map((milestone, idx) => (\n                              <div key={idx} className=\"flex items-center text-sm\">\n                                <Sparkles className=\"w-3 h-3 mr-2\" style={{ color: trimester.color }} />\n                                {milestone}\n                              </div>\n                            ))}\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n\n                  {/* Baby 3D Viewer */}\n                  <Card className=\"mt-6\">\n                    <CardContent className=\"pt-6\">\n                      <div className=\"text-center mb-6\">\n                        <h3 className=\"text-xl font-semibold mb-2\">Seu Bebê na Semana {selectedWeek}</h3>\n                        <div className=\"flex items-center justify-center space-x-4\">\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\" \n                            onClick={() => setSelectedWeek(Math.max(1, selectedWeek - 1))}\n                            disabled={selectedWeek <= 1}\n                          >\n                            <ChevronLeft className=\"w-4 h-4\" />\n                          </Button>\n                          <span className=\"min-w-20 text-center font-medium\">\n                            Semana {selectedWeek}\n                          </span>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\" \n                            onClick={() => setSelectedWeek(Math.min(40, selectedWeek + 1))}\n                            disabled={selectedWeek >= 40}\n                          >\n                            <ChevronRight className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex justify-center\">\n                        <Baby3D \n                          week={selectedWeek} \n                          size=\"large\" \n                          interactive={true}\n                          animate={true}\n                          showInfo={true}\n                          className=\"max-w-md\"\n                        />\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Growth Tab */}\n          <TabsContent value=\"growth\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <TrendingUp className=\"w-5 h-5 mr-2 text-blue-500\" />\n                  Crescimento do Bebê\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                  {/* Gráfico de Comprimento */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-base flex items-center\">\n                        <Ruler className=\"w-4 h-4 mr-2\" />\n                        Comprimento (cm)\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"h-64\">\n                        <ResponsiveContainer width=\"100%\" height=\"100%\">\n                          <AreaChart data={babyGrowthData.slice(0, currentWeek)}>\n                            <defs>\n                              <linearGradient id=\"lengthGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                                <stop offset=\"5%\" stopColor=\"#3B82F6\" stopOpacity={0.8}/>\n                                <stop offset=\"95%\" stopColor=\"#3B82F6\" stopOpacity={0.1}/>\n                              </linearGradient>\n                            </defs>\n                            <XAxis dataKey=\"week\" />\n                            <YAxis />\n                            <CartesianGrid strokeDasharray=\"3 3\" />\n                            <Tooltip \n                              formatter={(value: number) => [`${value}cm`, 'Comprimento']}\n                              labelFormatter={(week) => `Semana ${week}`}\n                            />\n                            <Area \n                              type=\"monotone\" \n                              dataKey=\"length_cm\" \n                              stroke=\"#3B82F6\" \n                              fillOpacity={1} \n                              fill=\"url(#lengthGradient)\" \n                            />\n                          </AreaChart>\n                        </ResponsiveContainer>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  {/* Gráfico de Peso */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-base flex items-center\">\n                        <Scale className=\"w-4 h-4 mr-2\" />\n                        Peso (kg)\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"h-64\">\n                        <ResponsiveContainer width=\"100%\" height=\"100%\">\n                          <AreaChart data={babyGrowthData.slice(0, currentWeek)}>\n                            <defs>\n                              <linearGradient id=\"weightGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                                <stop offset=\"5%\" stopColor=\"#8B5CF6\" stopOpacity={0.8}/>\n                                <stop offset=\"95%\" stopColor=\"#8B5CF6\" stopOpacity={0.1}/>\n                              </linearGradient>\n                            </defs>\n                            <XAxis dataKey=\"week\" />\n                            <YAxis />\n                            <CartesianGrid strokeDasharray=\"3 3\" />\n                            <Tooltip \n                              formatter={(value: number) => [`${(value * 1000).toFixed(0)}g`, 'Peso']}\n                              labelFormatter={(week) => `Semana ${week}`}\n                            />\n                            <Area \n                              type=\"monotone\" \n                              dataKey=\"weight_grams\" \n                              stroke=\"#8B5CF6\" \n                              fillOpacity={1} \n                              fill=\"url(#weightGradient)\" \n                            />\n                          </AreaChart>\n                        </ResponsiveContainer>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Weight Tab */}\n          <TabsContent value=\"weight\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Scale className=\"w-5 h-5 mr-2 text-green-500\" />\n                  Acompanhamento de Peso Materno\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {weightData && <WeightChart records={weightData} />}\n                <div className=\"mt-6 grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <Card className=\"text-center\">\n                    <CardContent className=\"pt-4\">\n                      <div className=\"flex items-center justify-center mb-2\">\n                        <ArrowUp className=\"w-5 h-5 text-green-500 mr-1\" />\n                        <span className=\"text-lg font-semibold\">+8.5kg</span>\n                      </div>\n                      <p className=\"text-sm text-gray-600\">Ganho total</p>\n                    </CardContent>\n                  </Card>\n                  \n                  <Card className=\"text-center\">\n                    <CardContent className=\"pt-4\">\n                      <div className=\"flex items-center justify-center mb-2\">\n                        <Activity className=\"w-5 h-5 text-blue-500 mr-1\" />\n                        <span className=\"text-lg font-semibold\">73.5kg</span>\n                      </div>\n                      <p className=\"text-sm text-gray-600\">Peso atual</p>\n                    </CardContent>\n                  </Card>\n                  \n                  <Card className=\"text-center\">\n                    <CardContent className=\"pt-4\">\n                      <div className=\"flex items-center justify-center mb-2\">\n                        <Target className=\"w-5 h-5 text-orange-500 mr-1\" />\n                        <span className=\"text-lg font-semibold\">11-16kg</span>\n                      </div>\n                      <p className=\"text-sm text-gray-600\">Meta recomendada</p>\n                    </CardContent>\n                  </Card>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Comparison Tab */}\n          <TabsContent value=\"comparison\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Target className=\"w-5 h-5 mr-2 text-orange-500\" />\n                  Comparações de Tamanho\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {sizeComparisons?.map((comparison, index) => (\n                    <Card key={index} className={`text-center transition-all hover:shadow-md ${\n                      comparison.weeks.includes(currentWeek) ? 'ring-2 ring-pink-300 bg-pink-50' : ''\n                    }`}>\n                      <CardContent className=\"pt-4\">\n                        <div className=\"text-4xl mb-2\">{comparison.object}</div>\n                        <h3 className=\"font-semibold\">{comparison.name}</h3>\n                        <p className=\"text-sm text-gray-600 mb-2\">{comparison.size}</p>\n                        <Badge variant=\"secondary\" className=\"text-xs\">\n                          Semana {comparison.weeks.join(' - ')}\n                        </Badge>\n                        {comparison.weeks.includes(currentWeek) && (\n                          <Badge variant=\"default\" className=\"ml-2 bg-pink-500 text-xs\">\n                            Atual\n                          </Badge>\n                        )}\n                      </CardContent>\n                    </Card>\n                  )) || []}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":20452},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"client/src/components/PWAInstallPrompt.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { X, Download, Smartphone } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\n\ninterface BeforeInstallPromptEvent extends Event {\n  prompt(): Promise<void>;\n  userChoice: Promise<{ outcome: \"accepted\" | \"dismissed\" }>;\n}\n\nexport function PWAInstallPrompt() {\n  const [deferredPrompt, setDeferredPrompt] = useState<BeforeInstallPromptEvent | null>(null);\n  const [showInstallPrompt, setShowInstallPrompt] = useState(false);\n  const [isStandalone, setIsStandalone] = useState(false);\n\n  useEffect(() => {\n    console.log('🔧 PWA Install Prompt: Iniciando verificações...');\n    \n    // Para depuração - sempre limpar o localStorage\n    localStorage.removeItem('pwa-prompt-dismissed');\n    console.log('🧹 localStorage limpo para depuração');\n    \n    // Verificar se foi dispensado recentemente (TEMPORARIAMENTE DESABILITADO)\n    // const dismissed = localStorage.getItem('pwa-prompt-dismissed');\n    // if (dismissed) {\n    //   const dismissedTime = parseInt(dismissed);\n    //   const now = Date.now();\n    //   const twentyFourHours = 24 * 60 * 60 * 1000;\n    //   \n    //   if (now - dismissedTime < twentyFourHours) {\n    //     console.log('⏰ PWA Prompt dispensado há menos de 24h');\n    //     return; // Não mostrar se foi dispensado há menos de 24 horas\n    //   }\n    // }\n\n    // Verificar se já está instalado como PWA\n    const isInStandaloneMode = window.matchMedia('(display-mode: standalone)').matches;\n    const isIOSStandalone = (window.navigator as any).standalone === true;\n    setIsStandalone(isInStandaloneMode || isIOSStandalone);\n\n    console.log('📱 PWA Status:', {\n      isInStandaloneMode,\n      isIOSStandalone,\n      userAgent: navigator.userAgent,\n      isIOS: /iPad|iPhone|iPod/.test(navigator.userAgent)\n    });\n\n    // Se já estiver instalado, não mostrar\n    if (isInStandaloneMode || isIOSStandalone) {\n      console.log('✅ PWA já instalado - não mostrar prompt');\n      return;\n    }\n\n    // Listener para o evento de instalação (Android/Chrome)\n    const handleBeforeInstallPrompt = (e: Event) => {\n      console.log('🎯 beforeinstallprompt capturado!', e);\n      e.preventDefault();\n      setDeferredPrompt(e as BeforeInstallPromptEvent);\n      \n      // Mostrar o prompt após 3 segundos\n      setTimeout(() => {\n        console.log('📲 Mostrando prompt de instalação...');\n        setShowInstallPrompt(true);\n      }, 3000);\n    };\n\n    // Para dispositivos que suportam PWA nativo\n    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n    console.log('👂 Listener beforeinstallprompt adicionado');\n\n    // Para iOS e outros navegadores, mostrar após 3 segundos\n    const timer = setTimeout(() => {\n      if (!isInStandaloneMode && !isIOSStandalone) {\n        console.log('⏳ Timer ativado - mostrando prompt (sem beforeinstallprompt)');\n        setShowInstallPrompt(true);\n      }\n    }, 3000);\n\n    return () => {\n      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n      clearTimeout(timer);\n      console.log('🧹 PWA listeners removidos');\n    };\n  }, []);\n\n  const handleInstallClick = async () => {\n    console.log('🎯 handleInstallClick chamado, deferredPrompt:', deferredPrompt);\n    if (!deferredPrompt) {\n      console.log('❌ Nenhum deferredPrompt disponível');\n      return;\n    }\n\n    try {\n      console.log('📲 Chamando deferredPrompt.prompt()...');\n      await deferredPrompt.prompt();\n      const { outcome } = await deferredPrompt.userChoice;\n      \n      console.log('👤 Escolha do usuário:', outcome);\n      if (outcome === 'accepted') {\n        console.log('✅ PWA instalado com sucesso');\n      } else {\n        console.log('❌ Usuário recusou instalar PWA');\n      }\n      \n      setDeferredPrompt(null);\n      setShowInstallPrompt(false);\n    } catch (error) {\n      console.error('💥 Erro ao instalar PWA:', error);\n    }\n  };\n\n  const handleDismiss = () => {\n    setShowInstallPrompt(false);\n    // Não mostrar novamente por 24 horas\n    localStorage.setItem('pwa-prompt-dismissed', Date.now().toString());\n  };\n\n  // Detectar iOS para instruções especiais\n  const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);\n\n  console.log('🔍 Render PWAInstallPrompt:', {\n    isStandalone,\n    showInstallPrompt,\n    deferredPrompt: !!deferredPrompt,\n    isIOS,\n    willShow: !isStandalone && showInstallPrompt\n  });\n\n  if (isStandalone || !showInstallPrompt) {\n    return null;\n  }\n\n  return (\n    <Dialog open={showInstallPrompt} onOpenChange={setShowInstallPrompt}>\n      <DialogContent className=\"sm:max-w-md mx-4\">\n        <DialogHeader>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-12 h-12 bg-pink-100 dark:bg-pink-900 rounded-full flex items-center justify-center\">\n                <Smartphone className=\"w-6 h-6 text-pink-600 dark:text-pink-400\" />\n              </div>\n              <div>\n                <DialogTitle className=\"text-left\">Instalar Mama Care</DialogTitle>\n                <DialogDescription className=\"text-left text-sm\">\n                  Acesse rapidamente do seu celular\n                </DialogDescription>\n              </div>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleDismiss}\n              className=\"h-8 w-8 p-0\"\n              data-testid=\"button-dismiss-install\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </DialogHeader>\n        \n        <div className=\"space-y-4\">\n          <div className=\"text-sm text-muted-foreground\">\n            <p>Instale o Mama Care no seu celular para:</p>\n            <ul className=\"mt-2 space-y-1 list-disc list-inside\">\n              <li>Acesso rápido da tela inicial</li>\n              <li>Funciona sem internet</li>\n              <li>Notificações importantes</li>\n              <li>Experiência como app nativo</li>\n            </ul>\n          </div>\n\n          {/* Instruções para iOS */}\n          {isIOS && (\n            <div className=\"bg-blue-50 dark:bg-blue-950 p-3 rounded-lg text-sm\">\n              <p className=\"font-medium text-blue-900 dark:text-blue-100 mb-2\">\n                Para instalar no iOS:\n              </p>\n              <ol className=\"space-y-1 text-blue-800 dark:text-blue-200 text-xs\">\n                <li>1. Toque no ícone de compartilhar ↗️</li>\n                <li>2. Role para baixo e toque em \"Adicionar à Tela de Início\"</li>\n                <li>3. Toque em \"Adicionar\"</li>\n              </ol>\n            </div>\n          )}\n\n          {/* Botões */}\n          <div className=\"flex gap-2\">\n            {/* TEMPORÁRIO: Sempre mostrar botão instalar para depuração */}\n            {!isIOS && (\n              <Button \n                onClick={deferredPrompt ? handleInstallClick : () => {\n                  console.log('⚠️ Prompt manual - beforeinstallprompt não disponível');\n                  console.log('🔧 Possíveis problemas: manifest.json, service worker ou critérios PWA não atendidos');\n                  alert('PWA não pode ser instalada automaticamente. Verifique se atende aos critérios PWA.');\n                }}\n                className=\"flex-1 bg-pink-600 hover:bg-pink-700\"\n                data-testid=\"button-install-pwa\"\n              >\n                <Download className=\"w-4 h-4 mr-2\" />\n                {deferredPrompt ? 'Instalar App' : 'Debug PWA'}\n              </Button>\n            )}\n            <Button \n              variant=\"outline\" \n              onClick={handleDismiss}\n              className={!isIOS ? \"flex-1\" : \"w-full\"}\n              data-testid=\"button-maybe-later\"\n            >\n              Agora não\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":8081},"client/src/hooks/useUserTracking.ts":{"content":"import { useEffect, useRef, useCallback } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport interface TrackingConfig {\n  trackPageViews?: boolean;\n  trackClicks?: boolean;\n  trackTime?: boolean;\n  sessionId?: string;\n}\n\nexport function useUserTracking(config: TrackingConfig = {}) {\n  const { user } = useAuth();\n  const {\n    trackPageViews = true,\n    trackClicks = true,\n    trackTime = true\n  } = config;\n\n  const pageStartTime = useRef<number>(Date.now());\n  const currentPage = useRef<string>(window.location.pathname);\n  const sessionId = useRef<string>(`session-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`);\n\n  // Rastrear visita de página\n  const trackPageVisit = useCallback(async (page: string, duration?: number) => {\n    if (!user?.id || !trackPageViews) return;\n    \n    try {\n      await apiRequest(\"POST\", `/api/analytics/page-visit`, {\n        page,\n        duration: duration || 0\n      });\n    } catch (error) {\n      console.log(\"Tracking falhou:\", error);\n    }\n  }, [user?.id, trackPageViews]);\n\n  // Rastrear ação do usuário\n  const trackAction = useCallback(async (action: string, element?: string) => {\n    if (!user?.id || !trackClicks) return;\n    \n    try {\n      await apiRequest(\"POST\", `/api/analytics/action`, {\n        action,\n        page: window.location.pathname,\n        element\n      });\n    } catch (error) {\n      console.log(\"Tracking de ação falhou:\", error);\n    }\n  }, [user?.id, trackClicks]);\n\n  // Configurar listeners automáticos\n  useEffect(() => {\n    if (!user?.id) return;\n\n    const startTime = Date.now();\n    pageStartTime.current = startTime;\n    currentPage.current = window.location.pathname;\n\n    // Rastrear entrada na página\n    trackPageVisit(window.location.pathname);\n\n    // Listener para mudanças de página\n    const handlePopState = () => {\n      if (trackTime) {\n        const duration = Date.now() - pageStartTime.current;\n        trackPageVisit(currentPage.current, duration);\n      }\n      \n      pageStartTime.current = Date.now();\n      currentPage.current = window.location.pathname;\n      trackPageVisit(window.location.pathname);\n    };\n\n    // Listener para cliques (tracking automático)\n    const handleClick = (event: MouseEvent) => {\n      if (!trackClicks) return;\n      \n      const target = event.target as HTMLElement;\n      const elementId = target.id || target.className || target.tagName;\n      const action = target.tagName === 'BUTTON' ? 'button_click' : \n                    target.tagName === 'A' ? 'link_click' : 'click';\n      \n      trackAction(action, elementId);\n    };\n\n    // Rastrear quando o usuário sai da página\n    const handleBeforeUnload = () => {\n      if (trackTime) {\n        const duration = Date.now() - pageStartTime.current;\n        trackPageVisit(currentPage.current, duration);\n      }\n    };\n\n    // Rastrear quando a janela perde/ganha foco\n    const handleVisibilityChange = () => {\n      if (document.visibilityState === 'hidden' && trackTime) {\n        const duration = Date.now() - pageStartTime.current;\n        trackPageVisit(currentPage.current, duration);\n      } else if (document.visibilityState === 'visible') {\n        pageStartTime.current = Date.now();\n      }\n    };\n\n    // Adicionar listeners\n    window.addEventListener('popstate', handlePopState);\n    document.addEventListener('click', handleClick);\n    window.addEventListener('beforeunload', handleBeforeUnload);\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n\n    return () => {\n      // Cleanup e rastrear tempo final na página\n      if (trackTime) {\n        const duration = Date.now() - pageStartTime.current;\n        trackPageVisit(currentPage.current, duration);\n      }\n      \n      window.removeEventListener('popstate', handlePopState);\n      document.removeEventListener('click', handleClick);\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n    };\n  }, [user?.id, trackPageVisit, trackAction, trackTime, trackClicks]);\n\n  return {\n    trackPageVisit,\n    trackAction,\n    sessionId: sessionId.current\n  };\n}","size_bytes":4227},"client/src/pages/analytics.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ArrowLeft, Activity, Clock, MousePointer, Eye } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport LoadingSpinner from \"@/components/ui/loading-spinner\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\ninterface AnalyticsData {\n  id: string;\n  action: string;\n  page: string;\n  element?: string;\n  duration?: number;\n  timestamp: string;\n}\n\nexport default function Analytics() {\n  const [, setLocation] = useLocation();\n  const { user } = useAuth();\n\n  const { data: analyticsData, isLoading } = useQuery<{ analytics: AnalyticsData[] }>({\n    queryKey: [\"/api/analytics/user\"],\n    enabled: !!user,\n    refetchInterval: 5000 // Atualizar a cada 5 segundos\n  });\n\n  if (!user) {\n    setLocation(\"/login\");\n    return null;\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <LoadingSpinner size=\"lg\" />\n      </div>\n    );\n  }\n\n  const analytics = analyticsData?.analytics || [];\n  \n  // Estatísticas do usuário\n  const pageViews = analytics.filter(item => item.action === 'page_view').length;\n  const clicks = analytics.filter(item => item.action.includes('click')).length;\n  const totalDuration = analytics\n    .filter(item => item.duration)\n    .reduce((sum, item) => sum + (item.duration || 0), 0);\n\n  // Páginas mais visitadas\n  const pageVisits = analytics\n    .filter(item => item.action === 'page_view')\n    .reduce((acc, item) => {\n      acc[item.page] = (acc[item.page] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n\n  const topPages = Object.entries(pageVisits)\n    .sort(([,a], [,b]) => b - a)\n    .slice(0, 5);\n\n  // Atividades recentes (últimas 20)\n  const recentActivity = analytics\n    .sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())\n    .slice(0, 20);\n\n  const formatPageName = (path: string) => {\n    const pathMap: Record<string, string> = {\n      '/': 'Dashboard',\n      '/kick-counter': 'Contador de Chutes',\n      '/weight-tracking': 'Controle de Peso',\n      '/diary': 'Diário',\n      '/photo-album': 'Álbum de Fotos',\n      '/baby-development': 'Desenvolvimento do Bebê',\n      '/birth-plan': 'Plano de Parto',\n      '/community': 'Comunidade',\n      '/profile': 'Perfil'\n    };\n    return pathMap[path] || path;\n  };\n\n  const formatTime = (timestamp: string) => {\n    return new Date(timestamp).toLocaleString('pt-BR');\n  };\n\n  const formatDuration = (ms: number) => {\n    const seconds = Math.floor(ms / 1000);\n    const minutes = Math.floor(seconds / 60);\n    \n    if (minutes > 0) {\n      return `${minutes}m ${seconds % 60}s`;\n    }\n    return `${seconds}s`;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-cream pb-20\">\n      <div className=\"p-4 pt-12\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <Button \n            variant=\"ghost\" \n            size=\"icon\"\n            className=\"rounded-full bg-white shadow-lg\"\n            onClick={() => setLocation(\"/\")}\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"h-5 w-5 text-charcoal\" />\n          </Button>\n          <h2 className=\"text-xl font-bold text-charcoal\" data-testid=\"text-page-title\">\n            Analytics do Usuário\n          </h2>\n          <div className=\"w-10\" />\n        </div>\n\n        {/* Estatísticas gerais */}\n        <div className=\"grid grid-cols-2 gap-4 mb-6\">\n          <Card className=\"bg-white shadow-sm\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"p-2 bg-blue-100 rounded-full\">\n                  <Eye className=\"h-4 w-4 text-blue-600\" />\n                </div>\n                <div>\n                  <p className=\"text-2xl font-bold text-charcoal\">{pageViews}</p>\n                  <p className=\"text-xs text-gray-600\">Visualizações</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white shadow-sm\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"p-2 bg-green-100 rounded-full\">\n                  <MousePointer className=\"h-4 w-4 text-green-600\" />\n                </div>\n                <div>\n                  <p className=\"text-2xl font-bold text-charcoal\">{clicks}</p>\n                  <p className=\"text-xs text-gray-600\">Cliques</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white shadow-sm col-span-2\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"p-2 bg-purple-100 rounded-full\">\n                  <Clock className=\"h-4 w-4 text-purple-600\" />\n                </div>\n                <div>\n                  <p className=\"text-2xl font-bold text-charcoal\">{formatDuration(totalDuration)}</p>\n                  <p className=\"text-xs text-gray-600\">Tempo total navegando</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Páginas mais visitadas */}\n        <Card className=\"bg-white shadow-sm mb-6\">\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Páginas Mais Visitadas</CardTitle>\n            <CardDescription>Suas páginas favoritas do app</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {topPages.map(([page, count]) => (\n                <div key={page} className=\"flex items-center justify-between\">\n                  <span className=\"text-sm font-medium\">{formatPageName(page)}</span>\n                  <span className=\"bg-baby-pink-light text-baby-pink-dark px-2 py-1 rounded-full text-xs\">\n                    {count} visitas\n                  </span>\n                </div>\n              ))}\n              {topPages.length === 0 && (\n                <p className=\"text-gray-500 text-center\">Nenhuma página visitada ainda</p>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Atividade recente */}\n        <Card className=\"bg-white shadow-sm\">\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Atividade Recente</CardTitle>\n            <CardDescription>Suas últimas interações no app</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3 max-h-80 overflow-y-auto\">\n              {recentActivity.map((activity) => (\n                <div key={activity.id} className=\"flex items-center gap-3 p-2 bg-gray-50 rounded-lg\">\n                  <div className=\"flex-shrink-0\">\n                    {activity.action === 'page_view' ? (\n                      <Eye className=\"h-4 w-4 text-blue-500\" />\n                    ) : (\n                      <MousePointer className=\"h-4 w-4 text-green-500\" />\n                    )}\n                  </div>\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium\">\n                      {activity.action === 'page_view' ? 'Visitou' : 'Clicou em'} {formatPageName(activity.page)}\n                    </p>\n                    {activity.element && (\n                      <p className=\"text-xs text-gray-600\">Elemento: {activity.element}</p>\n                    )}\n                    {activity.duration && activity.duration > 0 && (\n                      <p className=\"text-xs text-gray-600\">Duração: {formatDuration(activity.duration)}</p>\n                    )}\n                    <p className=\"text-xs text-gray-500\">{formatTime(activity.timestamp)}</p>\n                  </div>\n                </div>\n              ))}\n              {recentActivity.length === 0 && (\n                <p className=\"text-gray-500 text-center\">Nenhuma atividade registrada</p>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":8195},"client/src/pages/audit-logs.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Calendar, Filter, Activity, Database, Eye } from 'lucide-react';\n\ninterface AuditLog {\n  id: string;\n  userId: string;\n  sessionId: string;\n  tableName: string;\n  recordId: string;\n  action: 'create' | 'update' | 'delete';\n  oldValues: Record<string, any> | null;\n  newValues: Record<string, any> | null;\n  changedFields: string[] | null;\n  ipAddress: string;\n  userAgent: string;\n  timestamp: string;\n}\n\nexport default function AuditLogsPage() {\n  const [filters, setFilters] = useState({\n    tableName: '',\n    recordId: '',\n    limit: '50'\n  });\n\n  const { data: auditData, isLoading, refetch } = useQuery({\n    queryKey: ['/api/audit-logs', filters],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (filters.tableName) params.append('tableName', filters.tableName);\n      if (filters.recordId) params.append('recordId', filters.recordId);\n      params.append('limit', filters.limit);\n      \n      const response = await fetch(`/api/audit-logs?${params}`);\n      if (!response.ok) throw new Error('Failed to fetch audit logs');\n      return response.json();\n    }\n  });\n\n  const getActionBadge = (action: string) => {\n    const variants = {\n      create: 'default',\n      update: 'secondary', \n      delete: 'destructive'\n    } as const;\n    \n    const colors = {\n      create: '🆕',\n      update: '✏️',\n      delete: '🗑️'\n    } as const;\n\n    return (\n      <Badge variant={variants[action as keyof typeof variants] || 'outline'}>\n        {colors[action as keyof typeof colors]} {action.toUpperCase()}\n      </Badge>\n    );\n  };\n\n  const formatTimestamp = (timestamp: string) => {\n    return new Intl.DateTimeFormat('pt-BR', {\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit'\n    }).format(new Date(timestamp));\n  };\n\n  const getTableIcon = (tableName: string) => {\n    const icons = {\n      birth_plans: '👶',\n      kick_counts: '🦵',\n      weight_entries: '⚖️',\n      photos: '📸',\n      diary_entries: '📔',\n      symptoms: '🏥',\n      consultations: '👩‍⚕️',\n      default: '📊'\n    } as const;\n    \n    return icons[tableName as keyof typeof icons] || icons.default;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-pink-50 to-purple-50 p-4\">\n      <div className=\"max-w-7xl mx-auto space-y-6\">\n        {/* Header */}\n        <Card className=\"bg-white/80 backdrop-blur-sm border-pink-200\">\n          <CardHeader className=\"text-center\">\n            <div className=\"mx-auto w-16 h-16 bg-gradient-to-br from-pink-500 to-purple-600 rounded-full flex items-center justify-center mb-4\">\n              <Activity className=\"w-8 h-8 text-white\" />\n            </div>\n            <CardTitle className=\"text-2xl font-bold bg-gradient-to-r from-pink-600 to-purple-600 bg-clip-text text-transparent\">\n              Logs de Auditoria Completa\n            </CardTitle>\n            <CardDescription className=\"text-gray-600\">\n              Acompanhe todas as modificações de dados em tempo real\n            </CardDescription>\n          </CardHeader>\n        </Card>\n\n        {/* Filtros */}\n        <Card className=\"bg-white/80 backdrop-blur-sm border-pink-200\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Filter className=\"w-5 h-5\" />\n              Filtros\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">Tabela</label>\n                <Select value={filters.tableName} onValueChange={(value) => setFilters({...filters, tableName: value})}>\n                  <SelectTrigger data-testid=\"select-table-filter\">\n                    <SelectValue placeholder=\"Todas as tabelas\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"\">Todas</SelectItem>\n                    <SelectItem value=\"birth_plans\">👶 Planos de Parto</SelectItem>\n                    <SelectItem value=\"kick_counts\">🦵 Contagem de Chutes</SelectItem>\n                    <SelectItem value=\"weight_entries\">⚖️ Registros de Peso</SelectItem>\n                    <SelectItem value=\"photos\">📸 Fotos</SelectItem>\n                    <SelectItem value=\"diary_entries\">📔 Diário</SelectItem>\n                    <SelectItem value=\"symptoms\">🏥 Sintomas</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">ID do Registro</label>\n                <Input \n                  placeholder=\"ID específico (opcional)\"\n                  value={filters.recordId}\n                  onChange={(e) => setFilters({...filters, recordId: e.target.value})}\n                  data-testid=\"input-record-id-filter\"\n                />\n              </div>\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">Limite</label>\n                <Select value={filters.limit} onValueChange={(value) => setFilters({...filters, limit: value})}>\n                  <SelectTrigger data-testid=\"select-limit-filter\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"25\">25 registros</SelectItem>\n                    <SelectItem value=\"50\">50 registros</SelectItem>\n                    <SelectItem value=\"100\">100 registros</SelectItem>\n                    <SelectItem value=\"200\">200 registros</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n            <div className=\"mt-4\">\n              <Button onClick={() => refetch()} className=\"bg-pink-500 hover:bg-pink-600\" data-testid=\"button-refresh-logs\">\n                Atualizar Logs\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Logs */}\n        <Card className=\"bg-white/80 backdrop-blur-sm border-pink-200\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Database className=\"w-5 h-5\" />\n              Histórico de Modificações ({auditData?.count || 0})\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"text-center py-12\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-pink-500 mx-auto\"></div>\n                <p className=\"mt-2 text-gray-600\">Carregando logs...</p>\n              </div>\n            ) : (\n              <ScrollArea className=\"h-[600px]\">\n                <div className=\"space-y-4\">\n                  {auditData?.auditLogs?.map((log: AuditLog) => (\n                    <Card key={log.id} className=\"border-l-4 border-l-pink-500\">\n                      <CardContent className=\"pt-4\">\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center gap-2 mb-2\">\n                              {getActionBadge(log.action)}\n                              <Badge variant=\"outline\" className=\"bg-purple-50\">\n                                {getTableIcon(log.tableName)} {log.tableName}\n                              </Badge>\n                              <Badge variant=\"outline\" className=\"font-mono text-xs\">\n                                {log.recordId.substring(0, 8)}...\n                              </Badge>\n                            </div>\n                            \n                            <div className=\"text-sm text-gray-600 mb-3\">\n                              <p className=\"flex items-center gap-1\">\n                                <Calendar className=\"w-4 h-4\" />\n                                {formatTimestamp(log.timestamp)}\n                              </p>\n                              {log.ipAddress && (\n                                <p className=\"text-xs text-gray-500 mt-1\">\n                                  IP: {log.ipAddress} | Sessão: {log.sessionId?.substring(0, 8)}...\n                                </p>\n                              )}\n                            </div>\n\n                            {log.changedFields && log.changedFields.length > 0 && (\n                              <div className=\"mb-3\">\n                                <p className=\"text-sm font-medium text-gray-700 mb-1\">\n                                  Campos alterados:\n                                </p>\n                                <div className=\"flex flex-wrap gap-1\">\n                                  {log.changedFields.map((field) => (\n                                    <Badge key={field} variant=\"secondary\" className=\"text-xs\">\n                                      {field}\n                                    </Badge>\n                                  ))}\n                                </div>\n                              </div>\n                            )}\n\n                            {log.oldValues && Object.keys(log.oldValues).length > 0 && (\n                              <div className=\"bg-red-50 p-3 rounded-lg mb-2\">\n                                <p className=\"text-sm font-medium text-red-800 mb-1\">Valores anteriores:</p>\n                                <pre className=\"text-xs text-red-700 overflow-x-auto\">\n                                  {JSON.stringify(log.oldValues, null, 2)}\n                                </pre>\n                              </div>\n                            )}\n\n                            {log.newValues && Object.keys(log.newValues).length > 0 && (\n                              <div className=\"bg-green-50 p-3 rounded-lg\">\n                                <p className=\"text-sm font-medium text-green-800 mb-1\">Novos valores:</p>\n                                <pre className=\"text-xs text-green-700 overflow-x-auto\">\n                                  {JSON.stringify(log.newValues, null, 2)}\n                                </pre>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                  \n                  {auditData?.auditLogs?.length === 0 && (\n                    <div className=\"text-center py-12\">\n                      <Eye className=\"w-16 h-16 text-gray-300 mx-auto mb-4\" />\n                      <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Nenhum log encontrado</h3>\n                      <p className=\"text-gray-600\">\n                        Ainda não há registros de auditoria para os filtros selecionados.\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </ScrollArea>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":11614},"client/src/hooks/useAuth.ts":{"content":"import { useState, useEffect } from \"react\";\nimport { authManager, type User } from \"@/lib/auth\";\n\nexport function useAuth() {\n  const [user, setUser] = useState<User | null>(authManager.getUser());\n  const [isLoading, setIsLoading] = useState<boolean>(authManager.getIsLoading());\n\n  useEffect(() => {\n    const unsubscribe = authManager.subscribe(() => {\n      setUser(authManager.getUser());\n      setIsLoading(authManager.getIsLoading());\n    });\n\n    return unsubscribe;\n  }, []);\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n    login: authManager.login.bind(authManager),\n    register: authManager.register.bind(authManager),\n    logout: authManager.logout.bind(authManager),\n  };\n}","size_bytes":710},"client/src/lib/auth.ts":{"content":"// Gerenciador de autenticação sem React Context\nexport interface User {\n  id: string;\n  email: string;\n  name: string;\n  profilePhotoUrl?: string;\n}\n\nclass AuthManager {\n  private user: User | null = null;\n  private isLoading: boolean = true;\n  private listeners: Set<() => void> = new Set();\n\n  constructor() {\n    this.checkAuth();\n  }\n\n  private async checkAuth() {\n    try {\n      console.log(\"🔍 Checking authentication...\");\n      const response = await fetch(\"/api/auth/me\", {\n        credentials: \"include\",\n        cache: \"no-cache\",\n        headers: {\n          'Cache-Control': 'no-cache, no-store, must-revalidate',\n          'Pragma': 'no-cache',\n          'Expires': '0'\n        }\n      });\n      \n      if (response.ok) {\n        const data = await response.json();\n        console.log(\"✅ User authenticated:\", data);\n        this.user = data;\n      } else {\n        console.log(\"❌ User not authenticated\");\n        this.user = null;\n      }\n    } catch (error) {\n      console.log(\"❌ Auth check failed:\", error);\n      this.user = null;\n    } finally {\n      this.isLoading = false;\n      this.notifyListeners();\n    }\n  }\n\n  async login(email: string, password: string): Promise<void> {\n    const response = await fetch(\"/api/auth/login\", {\n      method: \"POST\",\n      headers: { \n        \"Content-Type\": \"application/json\",\n        'Cache-Control': 'no-cache, no-store, must-revalidate'\n      },\n      credentials: \"include\",\n      body: JSON.stringify({ email, password }),\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || \"Login failed\");\n    }\n\n    const data = await response.json();\n    this.user = data.user;\n    this.notifyListeners();\n    \n    console.log(\"✅ Login successful, user:\", this.user);\n    // Redirecionar para dashboard diretamente\n    setTimeout(() => {\n      window.location.href = \"/\";\n    }, 200);\n  }\n\n  async register(email: string, password: string, name: string): Promise<void> {\n    const response = await fetch(\"/api/auth/register\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      credentials: \"include\",\n      body: JSON.stringify({ email, password, name }),\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || \"Registration failed\");\n    }\n\n    const data = await response.json();\n    this.user = data.user;\n    this.notifyListeners();\n    window.location.href = \"/pregnancy-setup\";\n  }\n\n  async logout(): Promise<void> {\n    await fetch(\"/api/auth/logout\", {\n      method: \"POST\",\n      credentials: \"include\",\n      headers: {\n        'Cache-Control': 'no-cache, no-store, must-revalidate'\n      }\n    });\n\n    this.user = null;\n    this.notifyListeners();\n    // Limpar cache e forçar reload completo\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.getRegistrations().then(registrations => {\n        registrations.forEach(registration => registration.unregister());\n      });\n    }\n    setTimeout(() => {\n      window.location.href = \"/login\";\n      window.location.reload();\n    }, 100);\n  }\n\n  getUser(): User | null {\n    return this.user;\n  }\n\n  getIsLoading(): boolean {\n    return this.isLoading;\n  }\n\n  isAuthenticated(): boolean {\n    return !!this.user;\n  }\n\n  subscribe(listener: () => void): () => void {\n    this.listeners.add(listener);\n    return () => {\n      this.listeners.delete(listener);\n    };\n  }\n\n  private notifyListeners() {\n    this.listeners.forEach(listener => listener());\n  }\n}\n\nexport const authManager = new AuthManager();","size_bytes":3605},"client/src/components/NextConsultationCard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n// import { Badge } from \"@/components/ui/badge\"; // Temporarily comment out if component doesn't exist\nimport { Calendar, Clock, MapPin, User } from \"lucide-react\";\nimport { format, differenceInDays } from \"date-fns\";\nimport { ptBR } from \"date-fns/locale\";\n\nexport function NextConsultationCard() {\n  const { data, isLoading } = useQuery({\n    queryKey: ['/api/consultations/next/user'],\n    refetchInterval: 30000, // Atualizar a cada 30 segundos\n  });\n\n  if (isLoading) {\n    return (\n      <Card className=\"bg-gradient-to-r from-blue-50 to-purple-50 border-blue-200\">\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"flex items-center gap-2 text-blue-800\">\n            <Calendar className=\"w-5 h-5\" />\n            Próxima Consulta\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"animate-pulse\">\n            <div className=\"h-4 bg-blue-200 rounded mb-2\"></div>\n            <div className=\"h-3 bg-blue-200 rounded w-2/3\"></div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const consultation = data?.nextConsultation;\n\n  if (!consultation) {\n    return (\n      <Card className=\"bg-gradient-to-r from-gray-50 to-blue-50 border-gray-200\">\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"flex items-center gap-2 text-gray-700\">\n            <Calendar className=\"w-5 h-5\" />\n            Próxima Consulta\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-gray-600 text-sm\">\n            Nenhuma consulta agendada\n          </p>\n          <p className=\"text-xs text-gray-500 mt-1\">\n            Agende sua próxima consulta na aba Consultas\n          </p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const consultationDate = new Date(consultation.date);\n  const daysUntil = differenceInDays(consultationDate, new Date());\n  const isToday = daysUntil === 0;\n  const isTomorrow = daysUntil === 1;\n\n  let timeText = \"\";\n  if (isToday) {\n    timeText = \"Hoje\";\n  } else if (isTomorrow) {\n    timeText = \"Amanhã\";\n  } else if (daysUntil > 0) {\n    timeText = `Em ${daysUntil} dias`;\n  } else {\n    timeText = \"Vencida\";\n  }\n\n  const badgeVariant = isToday ? \"destructive\" : isTomorrow ? \"default\" : \"secondary\";\n\n  return (\n    <Card className=\"bg-gradient-to-r from-blue-50 to-purple-50 border-blue-200 hover:shadow-md transition-shadow\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center gap-2 text-blue-800\">\n            <Calendar className=\"w-5 h-5\" />\n            Próxima Consulta\n          </CardTitle>\n          <div className={`px-2 py-1 rounded-full text-xs font-medium ${\n            isToday ? \"bg-red-100 text-red-800\" : \n            isTomorrow ? \"bg-blue-100 text-blue-800\" : \n            \"bg-gray-100 text-gray-800\"\n          }`}>\n            {timeText}\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-3\">\n        <div>\n          <h4 className=\"font-semibold text-gray-900 mb-1\">\n            {consultation.title}\n          </h4>\n          <div className=\"flex items-center gap-4 text-sm text-gray-600\">\n            <div className=\"flex items-center gap-1\">\n              <Clock className=\"w-4 h-4\" />\n              {format(consultationDate, \"dd/MM/yyyy 'às' HH:mm\", { locale: ptBR })}\n            </div>\n          </div>\n        </div>\n\n        {consultation.location && (\n          <div className=\"flex items-center gap-1 text-sm text-gray-600\">\n            <MapPin className=\"w-4 h-4\" />\n            {consultation.location}\n          </div>\n        )}\n\n        {consultation.doctorName && (\n          <div className=\"flex items-center gap-1 text-sm text-gray-600\">\n            <User className=\"w-4 h-4\" />\n            Dr(a). {consultation.doctorName}\n          </div>\n        )}\n\n        {consultation.notes && (\n          <div className=\"mt-2 p-2 bg-blue-50 rounded-lg\">\n            <p className=\"text-xs text-gray-700\">{consultation.notes}</p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default NextConsultationCard;","size_bytes":4293},"client/src/pages/medical-articles.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { ArrowLeft, Clock, ExternalLink, RefreshCw, Stethoscope, BookOpen, Heart, Activity, Utensils, Dumbbell } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useUserTracking } from \"@/hooks/useUserTracking\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n// import ReactMarkdown from \"react-markdown\"; // Removido temporariamente\n\ninterface MedicalArticle {\n  id: string;\n  week: number;\n  title: string;\n  summary: string;\n  content: string;\n  source: string;\n  sourceUrl?: string;\n  category: string;\n  importance: string;\n  readingTime: number;\n  tags: string[];\n  isActive: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\nconst categoryIcons = {\n  nutrition: Utensils,\n  exercise: Dumbbell,\n  health: Heart,\n  preparation: BookOpen,\n  symptoms: Activity\n};\n\nconst categoryColors = {\n  nutrition: \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\",\n  exercise: \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\", \n  health: \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\",\n  preparation: \"bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200\",\n  symptoms: \"bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200\"\n};\n\nconst importanceColors = {\n  low: \"bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-200\",\n  medium: \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\",\n  high: \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\"\n};\n\nexport default function MedicalArticles() {\n  const [, setLocation] = useLocation();\n  const { user } = useAuth();\n  const trackUserAction = useUserTracking();\n  const { toast } = useToast();\n  const [selectedArticle, setSelectedArticle] = useState<MedicalArticle | null>(null);\n  const [currentWeek, setCurrentWeek] = useState<number>(20); // Semana padrão\n\n  // Calcular semana gestacional se houver gravidez ativa\n  const { data: pregnancyData } = useQuery({\n    queryKey: [\"/api/pregnancies\", user?.id],\n    enabled: !!user?.id,\n  }) as { data?: { pregnancy?: { currentWeek: number } } };\n\n  const pregnancyWeek = pregnancyData?.pregnancy?.currentWeek || currentWeek;\n\n  // Buscar artigos médicos por semana\n  const { data: articlesData, isLoading: articlesLoading } = useQuery({\n    queryKey: [\"/api/medical-articles/week\", pregnancyWeek],\n    enabled: !!pregnancyWeek,\n  }) as { data?: { articles?: MedicalArticle[] }, isLoading: boolean };\n\n  // Mutation para popular artigos médicos (para admin/desenvolvimento)\n  const seedArticlesMutation = useMutation({\n    mutationFn: () => apiRequest(\"/api/medical-articles/seed\", \"POST\", {}),\n    onSuccess: () => {\n      toast({\n        title: \"Sucesso!\",\n        description: \"Artigos médicos populados com sucesso!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/medical-articles/week\"] });\n    },\n    onError: (error) => {\n      console.error(\"Erro ao popular artigos:\", error);\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao popular artigos médicos.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleArticleClick = (article: MedicalArticle) => {\n    setSelectedArticle(article);\n    trackUserAction(\"article_view\", \"medical-articles\", `article-${article.id}`, {\n      articleTitle: article.title,\n      week: article.week,\n      category: article.category\n    });\n  };\n\n  const handleBackToList = () => {\n    setSelectedArticle(null);\n    trackUserAction(\"article_list_view\", \"medical-articles\", \"back-button\");\n  };\n\n  const handleSeedArticles = () => {\n    seedArticlesMutation.mutate();\n    trackUserAction(\"seed_articles\", \"medical-articles\", \"seed-button\");\n  };\n\n  if (selectedArticle) {\n    const CategoryIcon = categoryIcons[selectedArticle.category as keyof typeof categoryIcons] || Stethoscope;\n    \n    return (\n      <div className=\"container mx-auto px-4 py-6 max-w-4xl\">\n        <Button\n          variant=\"ghost\"\n          onClick={handleBackToList}\n          className=\"mb-4\"\n          data-testid=\"button-back-to-list\"\n        >\n          <ArrowLeft className=\"mr-2 h-4 w-4\" />\n          Voltar aos artigos\n        </Button>\n\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <div className=\"flex items-center gap-2 mb-2\">\n              <CategoryIcon className=\"h-5 w-5\" />\n              <Badge className={categoryColors[selectedArticle.category as keyof typeof categoryColors]}>\n                {selectedArticle.category === 'nutrition' ? 'Nutrição' :\n                 selectedArticle.category === 'exercise' ? 'Exercícios' :\n                 selectedArticle.category === 'health' ? 'Saúde' :\n                 selectedArticle.category === 'preparation' ? 'Preparação' :\n                 'Sintomas'}\n              </Badge>\n              <Badge className={importanceColors[selectedArticle.importance as keyof typeof importanceColors]}>\n                {selectedArticle.importance === 'high' ? 'Alta importância' :\n                 selectedArticle.importance === 'medium' ? 'Média importância' :\n                 'Baixa importância'}\n              </Badge>\n            </div>\n            <CardTitle className=\"text-2xl text-pink-600 dark:text-pink-400\" data-testid=\"text-article-title\">\n              {selectedArticle.title}\n            </CardTitle>\n            <CardDescription className=\"text-lg\" data-testid=\"text-article-summary\">\n              {selectedArticle.summary}\n            </CardDescription>\n            <div className=\"flex items-center gap-4 mt-4 text-sm text-gray-600 dark:text-gray-400\">\n              <div className=\"flex items-center gap-1\">\n                <Clock className=\"h-4 w-4\" />\n                <span>{selectedArticle.readingTime} min de leitura</span>\n              </div>\n              <div>Semana {selectedArticle.week}</div>\n              <div>Por {selectedArticle.source}</div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"prose prose-pink dark:prose-invert max-w-none whitespace-pre-wrap\">\n              {selectedArticle.content}\n            </div>\n            \n            {selectedArticle.sourceUrl && (\n              <div className=\"mt-6 pt-4 border-t\">\n                <a\n                  href={selectedArticle.sourceUrl}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"inline-flex items-center gap-2 text-pink-600 dark:text-pink-400 hover:underline\"\n                  data-testid=\"link-source-url\"\n                >\n                  <ExternalLink className=\"h-4 w-4\" />\n                  Ver fonte completa\n                </a>\n              </div>\n            )}\n\n            {selectedArticle.tags && selectedArticle.tags.length > 0 && (\n              <div className=\"mt-4\">\n                <div className=\"flex flex-wrap gap-2\">\n                  {selectedArticle.tags.map((tag, index) => (\n                    <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                      {tag}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-pink-600 dark:text-pink-400 mb-2\" data-testid=\"text-page-title\">\n            Artigos Médicos\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            Informações médicas especializadas para a sua semana gestacional\n          </p>\n        </div>\n        <Button\n          onClick={handleSeedArticles}\n          disabled={seedArticlesMutation.isPending}\n          variant=\"outline\"\n          size=\"sm\"\n          data-testid=\"button-seed-articles\"\n        >\n          {seedArticlesMutation.isPending ? (\n            <RefreshCw className=\"mr-2 h-4 w-4 animate-spin\" />\n          ) : (\n            <RefreshCw className=\"mr-2 h-4 w-4\" />\n          )}\n          Popular Artigos\n        </Button>\n      </div>\n\n      <div className=\"mb-6\">\n        <Card className=\"bg-gradient-to-r from-pink-50 to-purple-50 dark:from-pink-950 dark:to-purple-950 border-pink-200 dark:border-pink-800\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center gap-3\">\n              <Stethoscope className=\"h-6 w-6 text-pink-600 dark:text-pink-400\" />\n              <div>\n                <h2 className=\"font-semibold text-pink-700 dark:text-pink-300\">\n                  Você está na {pregnancyWeek}ª semana de gestação\n                </h2>\n                <p className=\"text-sm text-pink-600 dark:text-pink-400\">\n                  Veja artigos médicos especializados para esta fase da sua gravidez\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {articlesLoading ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          {[...Array(4)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardHeader>\n                <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-3/4\"></div>\n                <div className=\"h-3 bg-gray-200 dark:bg-gray-700 rounded w-1/2\"></div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-3 bg-gray-200 dark:bg-gray-700 rounded mb-2\"></div>\n                <div className=\"h-3 bg-gray-200 dark:bg-gray-700 rounded w-2/3\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : articlesData?.articles?.length > 0 ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          {articlesData.articles.map((article: MedicalArticle) => {\n            const CategoryIcon = categoryIcons[article.category as keyof typeof categoryIcons] || Stethoscope;\n            \n            return (\n              <Card\n                key={article.id}\n                className=\"cursor-pointer hover:shadow-lg transition-shadow duration-200 border-l-4 border-l-pink-300 dark:border-l-pink-600\"\n                onClick={() => handleArticleClick(article)}\n                data-testid={`card-article-${article.id}`}\n              >\n                <CardHeader>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <CategoryIcon className=\"h-4 w-4\" />\n                      <Badge className={categoryColors[article.category as keyof typeof categoryColors]}>\n                        {article.category === 'nutrition' ? 'Nutrição' :\n                         article.category === 'exercise' ? 'Exercícios' :\n                         article.category === 'health' ? 'Saúde' :\n                         article.category === 'preparation' ? 'Preparação' :\n                         'Sintomas'}\n                      </Badge>\n                    </div>\n                    <Badge className={importanceColors[article.importance as keyof typeof importanceColors]}>\n                      {article.importance === 'high' ? 'Alta' :\n                       article.importance === 'medium' ? 'Média' :\n                       'Baixa'}\n                    </Badge>\n                  </div>\n                  <CardTitle className=\"text-lg text-pink-600 dark:text-pink-400 line-clamp-2\">\n                    {article.title}\n                  </CardTitle>\n                  <CardDescription className=\"line-clamp-3\">\n                    {article.summary}\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"flex items-center justify-between text-sm text-gray-600 dark:text-gray-400\">\n                    <div className=\"flex items-center gap-1\">\n                      <Clock className=\"h-3 w-3\" />\n                      <span>{article.readingTime} min</span>\n                    </div>\n                    <div>{article.source}</div>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      ) : (\n        <Card className=\"text-center py-12\">\n          <CardContent>\n            <Stethoscope className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold text-gray-600 dark:text-gray-400 mb-2\">\n              Nenhum artigo disponível\n            </h3>\n            <p className=\"text-gray-500 dark:text-gray-500 mb-4\">\n              Não há artigos médicos disponíveis para a semana {pregnancyWeek} ainda.\n            </p>\n            <Button\n              onClick={handleSeedArticles}\n              disabled={seedArticlesMutation.isPending}\n              data-testid=\"button-seed-articles-empty\"\n            >\n              {seedArticlesMutation.isPending ? (\n                <RefreshCw className=\"mr-2 h-4 w-4 animate-spin\" />\n              ) : (\n                <RefreshCw className=\"mr-2 h-4 w-4\" />\n              )}\n              Popular Artigos\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":13596},"server/populate-main-articles.ts":{"content":"import { db } from \"./storage\";\nimport { medicalArticles } from \"@shared/schema\";\n\n// Artigos principais que devem aparecer na tela principal\nconst mainArticlesData = [\n  {\n    week: 8,\n    title: \"Alimentação Saudável na Gravidez\",\n    summary: \"Dicas essenciais de nutrição para o desenvolvimento saudável do bebê.\",\n    content: `# Alimentação Saudável na Gravidez\n\n**Nutrientes Essenciais:**\n- Ácido Fólico: 400-800mcg diariamente\n- Ferro: Para prevenir anemia\n- Cálcio: Para formação dos ossos\n- Proteínas: Para crescimento celular\n\n**Alimentos Recomendados:**\n- Vegetais verdes escuros\n- Frutas cítricas\n- Carnes magras e peixes\n- Laticínios\n- Cereais integrais\n\n**Evite:**\n- Peixes com mercúrio\n- Carnes cruas\n- Álcool\n- Cafeína em excesso`,\n    source: \"Hospital Albert Einstein\",\n    sourceUrl: \"https://www.einstein.br\",\n    category: \"nutrition\",\n    importance: \"high\",\n    readingTime: 5,\n    tags: JSON.stringify([\"nutrição\", \"alimentação\", \"saúde\"])\n  },\n  {\n    week: 12,\n    title: \"Exercícios Seguros na Gravidez\",\n    summary: \"Atividades físicas recomendadas para cada trimestre da gestação.\",\n    content: `# Exercícios Seguros na Gravidez\n\n**Benefícios:**\n- Melhora o bem-estar\n- Reduz dores nas costas\n- Prepara para o parto\n- Controla o peso\n\n**Exercícios Recomendados:**\n- Caminhada (30 min/dia)\n- Natação\n- Yoga pré-natal\n- Pilates adaptado\n\n**Sinais de Alerta:**\n- Sangramento\n- Tontura\n- Dor no peito\n- Contrações\n\nSempre consulte seu médico antes de iniciar qualquer atividade física.`,\n    source: \"Hospital Sírio-Libanês\",\n    sourceUrl: \"https://www.hospitalsiriolibanes.org.br\",\n    category: \"exercise\",\n    importance: \"high\",\n    readingTime: 4,\n    tags: JSON.stringify([\"exercícios\", \"atividade física\", \"bem-estar\"])\n  },\n  {\n    week: 16,\n    title: \"Desenvolvimento do Bebê no 2º Trimestre\",\n    summary: \"Marcos importantes do desenvolvimento fetal entre 12-24 semanas.\",\n    content: `# Desenvolvimento do Bebê no 2º Trimestre\n\n**Semana 16-20:**\n- Formação completa dos órgãos\n- Movimentos mais perceptíveis\n- Desenvolvimento do sistema nervoso\n- Início da audição\n\n**Semana 20-24:**\n- Pele mais desenvolvida\n- Cabelo e unhas crescendo\n- Padrões de sono definidos\n- Resposta a estímulos externos\n\n**Exames Importantes:**\n- Ultrassom morfológico\n- Exames de sangue\n- Teste de tolerância à glicose\n\nEste é um período de grande crescimento e desenvolvimento!`,\n    source: \"Hospital das Clínicas\",\n    sourceUrl: \"https://www.hc.fm.usp.br\",\n    category: \"development\",\n    importance: \"high\",\n    readingTime: 4,\n    tags: JSON.stringify([\"desenvolvimento\", \"ultrassom\", \"segundo trimestre\"])\n  },\n  {\n    week: 20,\n    title: \"Preparação para o Parto\",\n    summary: \"Como se preparar física e emocionalmente para o nascimento do bebê.\",\n    content: `# Preparação para o Parto\n\n**Preparação Física:**\n- Exercícios de respiração\n- Fortalecimento do assoalho pélvico\n- Massagem perineal\n- Posições para o trabalho de parto\n\n**Preparação Emocional:**\n- Curso de gestantes\n- Plano de parto\n- Apoio do parceiro\n- Técnicas de relaxamento\n\n**Sinais do Trabalho de Parto:**\n- Contrações regulares\n- Perda do tampão mucoso\n- Ruptura da bolsa\n- Pressão pélvica\n\n**Quando ir para o hospital:**\n- Contrações a cada 5 minutos\n- Sangramento intenso\n- Ruptura da bolsa amniótica`,\n    source: \"Maternidade Santa Joana\",\n    sourceUrl: \"https://www.santajoana.com.br\",\n    category: \"birth\",\n    importance: \"high\",\n    readingTime: 6,\n    tags: JSON.stringify([\"parto\", \"preparação\", \"trabalho de parto\"])\n  },\n  {\n    week: 24,\n    title: \"Diabetes Gestacional: Prevenção e Cuidados\",\n    summary: \"Informações importantes sobre diabetes na gravidez e como prevenir.\",\n    content: `# Diabetes Gestacional\n\n**O que é:**\n- Aumento da glicose no sangue durante a gravidez\n- Afeta 7-25% das gestantes\n- Geralmente aparece após 20 semanas\n\n**Fatores de Risco:**\n- Sobrepeso\n- Histórico familiar\n- Idade superior a 35 anos\n- Gravidez anterior com diabetes\n\n**Prevenção:**\n- Dieta equilibrada\n- Exercícios regulares\n- Controle do peso\n- Acompanhamento médico\n\n**Tratamento:**\n- Dieta específica\n- Monitoramento da glicose\n- Exercícios orientados\n- Medicação se necessário\n\nO diagnóstico precoce é fundamental para a saúde da mãe e do bebê.`,\n    source: \"Hospital Israelita Albert Einstein\",\n    sourceUrl: \"https://www.einstein.br/diabetes-gestacional\",\n    category: \"health\",\n    importance: \"high\",\n    readingTime: 5,\n    tags: JSON.stringify([\"diabetes\", \"glicose\", \"prevenção\"])\n  }\n];\n\nexport async function populateMainArticles(): Promise<boolean> {\n  try {\n    console.log(\"📝 Inserindo artigos principais no banco de dados...\");\n    \n    for (const article of mainArticlesData) {\n      await db.insert(medicalArticles).values(article).onConflictDoNothing();\n    }\n    \n    console.log(\"✅ Artigos principais inseridos com sucesso!\");\n    return true;\n  } catch (error) {\n    console.error(\"❌ Erro ao inserir artigos principais:\", error);\n    return false;\n  }\n}","size_bytes":5114},"server/seed-medical-articles.ts":{"content":"import { storage } from \"./storage\";\n\nconst medicalArticlesData = [\n  // Semana 4\n  {\n    week: 4,\n    title: \"Primeiros Sinais da Gravidez\",\n    summary: \"Conheça os primeiros sinais que indicam uma gravidez e quando procurar orientação médica.\",\n    content: `\n# Primeiros Sinais da Gravidez\n\nNa 4ª semana de gravidez, você pode começar a notar alguns sinais iniciais. É importante estar atenta aos seguintes sintomas:\n\n## Principais Sinais:\n- Atraso menstrual (se o ciclo é regular)\n- Sensibilidade nos seios\n- Náuseas matinais (podem ocorrer a qualquer hora do dia)\n- Fadiga e cansaço excessivo\n- Mudanças no olfato e paladar\n\n## O que está acontecendo:\nO embrião está se implantando no útero e começando a produzir o hormônio hCG, responsável pela maioria dos sintomas iniciais da gravidez.\n\n## Quando procurar o médico:\n- Confirme a gravidez com teste\n- Agende sua primeira consulta de pré-natal\n- Comece a tomar ácido fólico se ainda não iniciou\n\nLembre-se: cada mulher é única e pode experimentar sintomas diferentes.\n    `,\n    source: \"Hospital Albert Einstein\",\n    sourceUrl: \"https://www.einstein.br/gravidez\",\n    category: \"health\",\n    importance: \"high\",\n    readingTime: 3,\n    tags: [\"sintomas\", \"diagnóstico\", \"primeiro trimestre\"]\n  },\n\n  // Semana 8\n  {\n    week: 8,\n    title: \"Alimentação Saudável no Primeiro Trimestre\",\n    summary: \"Dicas essenciais de nutrição para garantir o desenvolvimento saudável do bebê.\",\n    content: `\n# Alimentação Saudável no Primeiro Trimestre\n\nNa 8ª semana, a alimentação adequada é fundamental para o desenvolvimento do seu bebê.\n\n## Nutrientes Essenciais:\n- **Ácido Fólico**: 400-800mcg diariamente\n- **Ferro**: Para prevenir anemia\n- **Cálcio**: Para formação dos ossos do bebê\n- **Proteínas**: Para crescimento celular\n\n## Alimentos Recomendados:\n- Vegetais verdes escuros (espinafre, brócolis)\n- Frutas cítricas (laranja, limão)\n- Carnes magras e peixes\n- Laticínios com baixo teor de gordura\n- Cereais integrais\n\n## Alimentos a Evitar:\n- Peixes com alto teor de mercúrio\n- Carnes cruas ou mal passadas\n- Queijos não pasteurizados\n- Álcool e cafeína em excesso\n\n## Dica Importante:\nSe estiver com náuseas, faça pequenas refeições frequentes e mantenha-se hidratada.\n    `,\n    source: \"Hospital Sírio-Libanês\",\n    sourceUrl: \"https://www.hospitalsiriolibanes.org.br\",\n    category: \"nutrition\",\n    importance: \"high\",\n    readingTime: 4,\n    tags: [\"nutrição\", \"alimentação\", \"vitaminas\"]\n  },\n\n  // Semana 12\n  {\n    week: 12,\n    title: \"Exames do Primeiro Trimestre\",\n    summary: \"Entenda a importância dos exames realizados nas primeiras 12 semanas de gravidez.\",\n    content: `\n# Exames do Primeiro Trimestre\n\nAos 3 meses de gravidez, diversos exames são essenciais para monitorar sua saúde e do bebê.\n\n## Exames de Sangue:\n- **Hemograma completo**: Detecta anemia e infecções\n- **Glicemia**: Verifica diabetes gestacional\n- **Tipagem sanguínea**: Importante para o parto\n- **Sorologias**: HIV, sífilis, hepatite B, toxoplasmose, rubéola\n\n## Ultrassom:\n- Confirma idade gestacional\n- Verifica batimentos cardíacos\n- Detecta possíveis malformações\n- Avalia placenta e líquido amniótico\n\n## Translucência Nucal:\n- Realizado entre 11-14 semanas\n- Rastreamento de cromossomopatias\n- Pode ser combinado com exame de sangue\n\n## Preparação:\n- Jejum pode ser necessário para alguns exames\n- Leve todos os exames anteriores\n- Prepare suas dúvidas para o médico\n\nTodos os exames são importantes para garantir uma gravidez saudável.\n    `,\n    source: \"Maternidade Pro Matre\",\n    category: \"health\",\n    importance: \"high\",\n    readingTime: 5,\n    tags: [\"exames\", \"ultrassom\", \"pré-natal\"]\n  },\n\n  // Semana 16\n  {\n    week: 16,\n    title: \"Exercícios Seguros na Gravidez\",\n    summary: \"Atividades físicas recomendadas para manter-se ativa e saudável durante a gestação.\",\n    content: `\n# Exercícios Seguros na Gravidez\n\nNo segundo trimestre, manter-se ativa traz benefícios para você e seu bebê.\n\n## Benefícios dos Exercícios:\n- Melhora o humor e reduz ansiedade\n- Fortalece músculos para o parto\n- Controla o ganho de peso\n- Melhora a qualidade do sono\n- Reduz dores nas costas\n\n## Exercícios Recomendados:\n- **Caminhada**: 30 minutos diários\n- **Natação**: Exercício completo e seguro\n- **Yoga pré-natal**: Flexibilidade e relaxamento\n- **Pilates**: Fortalecimento do core\n- **Exercícios de Kegel**: Fortalecimento do assoalho pélvico\n\n## Cuidados Importantes:\n- Mantenha-se hidratada\n- Evite exercícios em posição supina após 16 semanas\n- Pare se sentir tonturas, falta de ar ou dor\n- Use roupas confortáveis e tênis adequado\n\n## Exercícios a Evitar:\n- Esportes de contato\n- Exercícios com risco de queda\n- Mergulho\n- Exercícios em altitude elevada\n\nSempre consulte seu médico antes de iniciar qualquer atividade física.\n    `,\n    source: \"Hospital e Maternidade Santa Joana\",\n    category: \"exercise\",\n    importance: \"medium\",\n    readingTime: 4,\n    tags: [\"exercícios\", \"atividade física\", \"bem-estar\"]\n  },\n\n  // Semana 20\n  {\n    week: 20,\n    title: \"Ultrassom Morfológico: O que Esperar\",\n    summary: \"Tudo sobre o ultrassom morfológico realizado na metade da gravidez.\",\n    content: `\n# Ultrassom Morfológico: O que Esperar\n\nO ultrassom morfológico é um dos exames mais aguardados da gravidez!\n\n## O que é Avaliado:\n- **Anatomia fetal**: Todos os órgãos são examinados\n- **Crescimento**: Peso e tamanho estimados\n- **Sexo do bebê**: Determinação com maior precisão\n- **Placenta**: Posição e funcionamento\n- **Líquido amniótico**: Quantidade adequada\n\n## Principais Estruturas Examinadas:\n- Sistema nervoso central\n- Coração e grandes vasos\n- Face e lábios\n- Coluna vertebral\n- Membros superiores e inferiores\n- Órgãos internos\n\n## Como se Preparar:\n- Beba água antes do exame\n- Vista roupas confortáveis\n- Leve acompanhante\n- Reserve tempo suficiente (30-45 minutos)\n\n## Momento Especial:\n- Muitos pais descobrem o sexo do bebê\n- Primeira oportunidade de ver detalhes do rosto\n- Imagens mais nítidas devido ao tamanho do bebê\n\n## Após o Exame:\n- Discuta os resultados com seu médico\n- Guarde as imagens como lembrança\n- Continue o pré-natal regularmente\n\nÉ um momento mágico para conhecer melhor seu bebê!\n    `,\n    source: \"Clínica de Diagnóstico por Imagem (CDPI)\",\n    category: \"health\",\n    importance: \"high\",\n    readingTime: 4,\n    tags: [\"ultrassom\", \"morfológico\", \"anatomia fetal\"]\n  },\n\n  // Semana 24\n  {\n    week: 24,\n    title: \"Diabetes Gestacional: Prevenção e Controle\",\n    summary: \"Informações importantes sobre diabetes gestacional e como prevenir complicações.\",\n    content: `\n# Diabetes Gestacional: Prevenção e Controle\n\nA diabetes gestacional afeta cerca de 7% das gestantes e requer atenção especial.\n\n## O que é:\nElevação da glicose no sangue que se desenvolve durante a gravidez, geralmente após a 20ª semana.\n\n## Fatores de Risco:\n- Idade superior a 25 anos\n- Sobrepeso ou obesidade\n- Histórico familiar de diabetes\n- Diabetes gestacional em gravidez anterior\n- Bebês anteriores com mais de 4kg\n\n## Sintomas:\n- Sede excessiva\n- Fome constante\n- Micção frequente\n- Fadiga\n- Visão embaçada\n\n## Diagnóstico:\n- **Teste de tolerância à glicose**: Entre 24-28 semanas\n- **Glicemia de jejum**: Pode ser solicitada em qualquer período\n\n## Tratamento:\n- **Dieta balanceada**: Rica em fibras, pobre em açúcares simples\n- **Exercícios**: Caminhadas após as refeições\n- **Monitoramento**: Controle da glicemia\n- **Medicação**: Se necessário, conforme orientação médica\n\n## Prevenção:\n- Mantenha peso adequado\n- Pratique exercícios regularmente\n- Alimente-se de forma equilibrada\n- Faça acompanhamento médico regular\n\nO controle adequado protege você e seu bebê de complicações.\n    `,\n    source: \"Hospital das Clínicas da USP\",\n    category: \"health\",\n    importance: \"high\",\n    readingTime: 5,\n    tags: [\"diabetes\", \"glicemia\", \"complicações\"]\n  },\n\n  // Semana 28\n  {\n    week: 28,\n    title: \"Preparação para a Amamentação\",\n    summary: \"Como se preparar desde o terceiro trimestre para uma amamentação bem-sucedida.\",\n    content: `\n# Preparação para a Amamentação\n\nO terceiro trimestre é o momento ideal para se preparar para amamentar.\n\n## Benefícios da Amamentação:\n- **Para o bebê**: Nutrição completa, proteção contra infecções\n- **Para a mãe**: Recuperação mais rápida, prevenção de doenças\n\n## Preparação dos Seios:\n- **Massagem**: Movimentos circulares suaves\n- **Hidratação**: Use cremes específicos para mamilos\n- **Sutiãs adequados**: Sem bojo, com sustentação\n- **Exposição ao sol**: 15 minutos diários nos mamilos\n\n## Conhecimento Importante:\n- **Pega correta**: Bebê deve abocanhar toda a aréola\n- **Posições**: Várias posições para amamentar\n- **Frequência**: Demanda livre, não por horário rígido\n- **Sinais de fome**: Choro é sinal tardio\n\n## Preparação Emocional:\n- Converse com mães experientes\n- Participe de grupos de apoio\n- Leia sobre amamentação\n- Tenha paciência - é um aprendizado\n\n## Suporte Necessário:\n- Apoio da família\n- Orientação profissional\n- Ambiente tranquilo\n- Tempo para se adaptar\n\n## Primeiro Momento:\n- Amamentação na primeira hora após o parto\n- Colostro é o primeiro alimento do bebê\n- Contato pele a pele fortalece o vínculo\n\nA amamentação é natural, mas requer preparo e apoio.\n    `,\n    source: \"Instituto da Criança do Hospital das Clínicas\",\n    category: \"preparation\",\n    importance: \"high\",\n    readingTime: 6,\n    tags: [\"amamentação\", \"preparação\", \"terceiro trimestre\"]\n  },\n\n  // Semana 32\n  {\n    week: 32,\n    title: \"Sinais de Trabalho de Parto Prematuro\",\n    summary: \"Reconheça os sinais de alerta do trabalho de parto prematuro e saiba quando procurar ajuda.\",\n    content: `\n# Sinais de Trabalho de Parto Prematuro\n\nÉ importante conhecer os sinais de trabalho de parto antes das 37 semanas.\n\n## Sinais de Alerta:\n- **Contrações regulares**: Mais de 4 em uma hora\n- **Dor lombar**: Constante e intensa\n- **Pressão pélvica**: Sensação de peso\n- **Mudança no corrimento**: Aumento ou presença de sangue\n- **Ruptura da bolsa**: Vazamento de líquido amniótico\n\n## Quando Procurar Ajuda Imediatamente:\n- Contrações a cada 10 minutos ou menos\n- Sangramento vaginal\n- Perda de líquido amniótico\n- Diminuição dos movimentos fetais\n- Febre ou calafrios\n\n## Fatores de Risco:\n- Gravidez múltipla (gêmeos, trigêmeos)\n- Infecções urinárias não tratadas\n- Histórico de parto prematuro\n- Problemas na placenta ou útero\n- Estresse extremo\n\n## Prevenção:\n- **Hidratação adequada**: Beba bastante água\n- **Repouso**: Evite atividades extenuantes\n- **Controle de infecções**: Trate infecções rapidamente\n- **Acompanhamento médico**: Consultas regulares\n\n## O que Fazer:\n1. **Pare suas atividades** e descanse\n2. **Beba água** - desidratação pode causar contrações\n3. **Conte as contrações** por uma hora\n4. **Entre em contato** com seu médico\n5. **Vá ao hospital** se os sintomas persistirem\n\n## Lembretes Importantes:\n- Nem toda contração significa trabalho de parto\n- Contrações de Braxton Hicks são normais\n- Na dúvida, sempre procure orientação médica\n\nO reconhecimento precoce pode fazer toda a diferença.\n    `,\n    source: \"Maternidade Escola da UFRJ\",\n    category: \"health\",\n    importance: \"high\",\n    readingTime: 4,\n    tags: [\"parto prematuro\", \"contrações\", \"sinais de alerta\"]\n  },\n\n  // Semana 36\n  {\n    week: 36,\n    title: \"Preparando a Mala da Maternidade\",\n    summary: \"Lista completa do que levar para a maternidade no momento do parto.\",\n    content: `\n# Preparando a Mala da Maternidade\n\nA partir da 36ª semana, mantenha sua mala pronta para o grande dia!\n\n## Para a Mamãe:\n\n### Documentos:\n- Cartão de pré-natal\n- Carteira de identidade\n- CPF e carteira do convênio\n- Exames recentes\n\n### Roupas:\n- 3-4 camisolas que abrem na frente\n- 2-3 sutiãs de amamentação\n- Calcinhas descartáveis\n- Roupão ou robe\n- Chinelos antiderrapantes\n- Roupa para a alta\n\n### Higiene:\n- Shampoo, condicionador e sabonete\n- Escova e pasta de dente\n- Desodorante\n- Absorventes pós-parto\n- Pomada para mamilos\n\n## Para o Bebê:\n\n### Roupas:\n- 4-6 bodies de manga longa (RN e P)\n- 4-6 macacões com pé (RN e P)\n- 2-3 casacos de lã\n- 6-8 pares de meias\n- 2-3 toucas\n- 2-3 luvas\n\n### Higiene:\n- Fraldas descartáveis RN\n- Lenços umedecidos\n- Pomada para assadura\n- Sabonete neutro\n- Shampoo infantil\n\n## Para o Acompanhante:\n- Documentos pessoais\n- Roupas para 2-3 dias\n- Artigos de higiene\n- Travesseiro e cobertor\n- Chinelos\n\n## Itens Extras:\n- Câmera ou celular carregado\n- Carregadores\n- Almofada de amamentação\n- Lista de telefones importantes\n- Dinheiro para emergências\n\n## Dicas Importantes:\n- Prepare duas malas: uma menor para o trabalho de parto\n- Deixe tudo organizado e de fácil acesso\n- Informe onde está para familiares\n- Verifique o que a maternidade fornece\n\nTer tudo preparado traz tranquilidade para esse momento especial!\n    `,\n    source: \"Hospital e Maternidade Pro Matre\",\n    category: \"preparation\",\n    importance: \"high\",\n    readingTime: 5,\n    tags: [\"mala maternidade\", \"preparação\", \"parto\"]\n  },\n\n  // Semana 40\n  {\n    week: 40,\n    title: \"Chegou a Hora: Reconhecendo o Trabalho de Parto\",\n    summary: \"Como identificar quando chegou o momento de ir para a maternidade.\",\n    content: `\n# Chegou a Hora: Reconhecendo o Trabalho de Parto\n\nNa 40ª semana, é fundamental saber identificar os sinais do trabalho de parto real.\n\n## Sinais do Trabalho de Parto Verdadeiro:\n\n### Contrações Regulares:\n- **Frequência**: A cada 3-5 minutos\n- **Duração**: 45-60 segundos\n- **Intensidade**: Aumenta progressivamente\n- **Persistência**: Não param com repouso\n\n### Outros Sinais:\n- **Tampão mucoso**: Perda de muco com sangue\n- **Ruptura da bolsa**: Vazamento contínuo de líquido\n- **Dor lombar**: Intensa e constante\n- **Pressão retal**: Vontade de evacuar\n\n## Diferenciando Trabalho de Parto Real:\n\n### Trabalho de Parto Real:\n- Contrações regulares e intensas\n- Dor não alivia com mudança de posição\n- Colo do útero dilata\n- Apresentação fetal desce\n\n### Falso Trabalho de Parto:\n- Contrações irregulares\n- Dor alivia com repouso\n- Sem dilatação cervical\n- Sem descida fetal\n\n## Quando Ir para a Maternidade:\n\n### Primeira Gestação:\n- Contrações a cada 5 minutos por 1 hora\n- Ruptura da bolsa amniótica\n- Sangramento vermelho vivo\n- Diminuição dos movimentos fetais\n\n### Gestações Anteriores:\n- Contrações a cada 7-10 minutos\n- Qualquer sangramento\n- Ruptura da bolsa\n- Sensação de que \"é a hora\"\n\n## Fases do Trabalho de Parto:\n\n### Fase Latente (0-3cm):\n- Contrações espaçadas\n- Pode durar horas ou dias\n- Possível ficar em casa\n\n### Fase Ativa (4-7cm):\n- Contrações mais intensas e frequentes\n- Momento de ir para maternidade\n- Dilatação mais rápida\n\n### Transição (8-10cm):\n- Contrações muito intensas\n- Dilatação completa\n- Preparação para nascimento\n\n## O que Levar:\n- Mala já preparada\n- Documentos importantes\n- Plano de parto (se houver)\n- Acompanhante escolhido\n\n## Lembre-se:\n- Cada trabalho de parto é único\n- Confie em seus instintos\n- Mantenha-se calma\n- Sua equipe médica está preparada\n\nEste é o momento que você esperou por 9 meses - você está pronta!\n    `,\n    source: \"Maternidade Perinatal\",\n    category: \"preparation\",\n    importance: \"high\",\n    readingTime: 6,\n    tags: [\"trabalho de parto\", \"contrações\", \"nascimento\"]\n  }\n];\n\nexport async function seedMedicalArticles(): Promise<boolean> {\n  try {\n    console.log(\"🌱 Iniciando população de artigos médicos...\");\n\n    for (const article of medicalArticlesData) {\n      try {\n        await storage.createMedicalArticle(article);\n        console.log(`✅ Artigo criado: ${article.title} (Semana ${article.week})`);\n      } catch (error) {\n        console.log(`⚠️  Artigo já existe: ${article.title} (Semana ${article.week})`);\n      }\n    }\n\n    console.log(\"🎉 População de artigos médicos concluída com sucesso!\");\n    return true;\n  } catch (error) {\n    console.error(\"❌ Erro ao popular artigos médicos:\", error);\n    return false;\n  }\n}","size_bytes":16350},"COMO-INSERIR-IMAGENS.md":{"content":"# 📸 Como Inserir Imagens do Bebê por Semana\n\nVocê pode inserir imagens do desenvolvimento do bebê para qualquer semana (1 a 40) de forma independente, sem precisar me enviar uma por uma.\n\n## 🚀 Método 1: Script Automatizado (Mais Fácil)\n\n### Passo 1: Coloque sua imagem\n1. Salve sua imagem na pasta `attached_assets/`\n2. Anote o nome do arquivo (ex: `semana5_bebe.png`)\n\n### Passo 2: Execute o comando\n```bash\nnode scripts/insert-week-image.js SEMANA NOME_DA_IMAGEM\n```\n\n**Exemplos:**\n```bash\n# Para inserir imagem da semana 5\nnode scripts/insert-week-image.js 5 semana5_bebe.png\n\n# Para inserir imagem da semana 12\nnode scripts/insert-week-image.js 12 semana12_limao.png\n\n# Para inserir imagem da semana 20\nnode scripts/insert-week-image.js 20 semana20_manga.png\n```\n\n## 🔧 Método 2: Requisição Direta (Para Desenvolvedores)\n\n### Via cURL:\n```bash\ncurl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"week\": 5, \"imageUrl\": \"@assets/semana5_bebe.png\"}' \\\n  http://localhost:5000/api/baby-development/insert-image\n```\n\n### Via navegador/Postman:\n- **URL:** `POST http://localhost:5000/api/baby-development/insert-image`\n- **Body (JSON):**\n```json\n{\n  \"week\": 5,\n  \"imageUrl\": \"@assets/semana5_bebe.png\"\n}\n```\n\n## 📋 Instruções Detalhadas\n\n### 1. Prepare suas imagens\n- Formatos aceitos: PNG, JPG, JPEG\n- Tamanho recomendado: até 500KB\n- Coloque na pasta `attached_assets/`\n\n### 2. Nomeação sugerida\n- `semana1_graao_areia.png`\n- `semana5_feijao.png` \n- `semana12_limao.png`\n- `semana20_manga.png`\n- etc...\n\n### 3. Execute para cada semana\n```bash\nnode scripts/insert-week-image.js 1 semana1_graao_areia.png\nnode scripts/insert-week-image.js 5 semana5_feijao.png\nnode scripts/insert-week-image.js 12 semana12_limao.png\nnode scripts/insert-week-image.js 20 semana20_manga.png\n```\n\n## ✅ Verificar se funcionou\n\nPara ver todas as imagens inseridas:\n```bash\ncurl http://localhost:5000/api/baby-development/all-comparisons\n```\n\nOu acesse no navegador: `http://localhost:5000/api/baby-development/all-comparisons`\n\n## 📊 Status Atual\n- ✅ Semana 1: Grão de areia\n- ✅ Semana 2: Ponta de alfinete  \n- ✅ Semana 3: Seu bebê microscópico (inserido!)\n- ⚪ Semanas 4-40: Aguardando suas imagens\n\n## 🆘 Problemas Comuns\n\n**Erro \"Semana não encontrada\":** \n- Verifique se o número da semana está entre 1 e 40\n\n**Erro \"arquivo não encontrado\":**\n- Confirme que a imagem está na pasta `attached_assets/`\n- Verifique se o nome do arquivo está correto (com extensão)\n\n**Servidor não responde:**\n- Verifique se o servidor está rodando (`npm run dev`)\n- Teste se `http://localhost:5000` está acessível\n\n## 💡 Dica\nVocê pode inserir quantas imagens quiser, quando quiser! O sistema atualiza automaticamente e as imagens aparecerão no app imediatamente.","size_bytes":2790},"scripts/insert-week-image.js":{"content":"// Script para inserir imagens do bebê por semana\n// Como usar:\n// 1. Coloque sua imagem na pasta attached_assets/\n// 2. Execute: node scripts/insert-week-image.js SEMANA NOME_DA_IMAGEM\n// Exemplo: node scripts/insert-week-image.js 5 minha_imagem_semana5.png\n\nimport { exec } from 'child_process';\n\n// Pegar argumentos da linha de comando\nconst week = process.argv[2];\nconst imageName = process.argv[3];\n\nif (!week || !imageName) {\n  console.log('❌ Uso: node scripts/insert-week-image.js SEMANA NOME_DA_IMAGEM');\n  console.log('📝 Exemplo: node scripts/insert-week-image.js 5 minha_imagem_semana5.png');\n  process.exit(1);\n}\n\n// Validar semana\nconst weekNum = parseInt(week);\nif (isNaN(weekNum) || weekNum < 1 || weekNum > 40) {\n  console.log('❌ Semana deve ser um número entre 1 e 40');\n  process.exit(1);\n}\n\n// Criar o caminho da imagem no formato que o sistema espera\nconst imagePath = `@assets/${imageName}`;\n\nconsole.log(`🖼️ Inserindo imagem da semana ${week}: ${imageName}`);\n\n// Fazer requisição para o endpoint correto (baby_image_url)\nconst command = `curl -X POST -H \"Content-Type: application/json\" -d '{\"week\": ${week}, \"imageUrl\": \"${imagePath}\"}' http://localhost:5000/api/baby-development/insert-baby-image`;\n\nexec(command, (error, stdout, stderr) => {\n  if (error) {\n    console.error('❌ Erro ao executar comando:', error);\n    return;\n  }\n  \n  try {\n    const response = JSON.parse(stdout);\n    if (response.success) {\n      console.log(`✅ Sucesso! Imagem da semana ${week} inserida no banco de dados`);\n      console.log(`🔗 URL: ${response.imageUrl}`);\n    } else {\n      console.log('❌ Erro:', response.error || response.message);\n    }\n  } catch (e) {\n    console.log('📝 Resposta:', stdout);\n  }\n});","size_bytes":1746},"client/src/hooks/use-articles.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { Article } from \"@shared/schema\";\n\ninterface ArticlesResponse {\n  success: boolean;\n  week: number;\n  articles: Article[];\n}\n\nexport function useArticles(week: number) {\n  return useQuery<ArticlesResponse>({\n    queryKey: [\"/api/articles/week\", week],\n    enabled: !!week && week > 0,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n}","size_bytes":398},"client/src/pages/dashboard-backup.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { usePregnancy } from \"@/hooks/use-pregnancy\";\nimport { useBabyDevelopment } from \"@/hooks/use-baby-development\";\nimport { useArticles } from \"@/hooks/use-articles\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { LoadingSpinner } from \"@/components/ui/loading-spinner\";\nimport { \n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { NextConsultationCard } from \"@/components/NextConsultationCard\";\nimport Baby3D from \"@/components/Baby3D\";\nimport { \n  Bell, \n  Baby, \n  Heart, \n  Ruler, \n  Weight, \n  Apple,\n  Activity,\n  User,\n  Calendar,\n  Info,\n  Book,\n  Settings,\n  LogOut,\n  ChevronDown,\n  Sparkles,\n  TrendingUp,\n  Stethoscope,\n  ChevronLeft,\n  ChevronRight\n} from \"lucide-react\";\n\nexport default function Dashboard() {\n  const { user, isLoading: authLoading, logout } = useAuth();\n  const { pregnancy, weekInfo, isLoading: pregnancyLoading } = usePregnancy();\n  const [viewingWeek, setViewingWeek] = useState<number | null>(null); // Semana que está sendo visualizada\n  const currentWeek = viewingWeek || weekInfo?.week || 0;\n  const { data: developmentData, isLoading: developmentLoading } = useBabyDevelopment(currentWeek);\n  const { data: articlesData, isLoading: isArticlesLoading, error: articlesError } = useArticles(currentWeek);\n  const [activeTab, setActiveTab] = useState(\"baby\");\n  const [, setLocation] = useLocation();\n\n  // Extrair dados do desenvolvimento para usar no dashboard\n  const development = developmentData?.developmentData;\n\n  // Funções de navegação entre semanas\n  const goToPreviousWeek = () => {\n    const targetWeek = currentWeek - 1;\n    if (targetWeek >= 1) {\n      setViewingWeek(targetWeek);\n    }\n  };\n\n  const goToNextWeek = () => {\n    const targetWeek = currentWeek + 1;\n    if (targetWeek <= 42) {\n      setViewingWeek(targetWeek);\n    }\n  };\n\n  const backToCurrentWeek = () => {\n    setViewingWeek(null);\n  };\n\n  // Função para mapear fruit_comparison para emojis\n  const getFruitEmoji = (fruitComparison: string) => {\n    const fruitMap: Record<string, string> = {\n      'Semente de papoula': '🌺',\n      'Semente': '🌱',\n      'Grão de arroz': '🌾',\n      'Lentilha': '🌿',\n      'Ervilha': '🟢',\n      'Mirtilo': '🫐',\n      'Framboesa': '🫐',\n      'Morango': '🍓',\n      'Lima': '🟢',\n      'Limão': '🍋',\n      'Ameixa': '🟣',\n      'Abacate': '🥑',\n      'Cebola': '🧅',\n      'Banana': '🍌',\n      'Espiga de milho': '🌽',\n      'Cenoura': '🥕',\n      'Berinjela': '🍆',\n      'Abobrinha': '🥒',\n      'Coco': '🥥',\n      'Repolho': '🥬',\n      'Melancia': '🍉',\n      'Abóbora': '🎃'\n    };\n    return fruitMap[fruitComparison] || '🍎';\n  };\n\n  const handleLogout = async () => {\n    try {\n      await logout();\n      setLocation(\"/login\");\n    } catch (error) {\n      console.error(\"Error during logout:\", error);\n    }\n  };\n\n  const isLoading = authLoading || pregnancyLoading || developmentLoading;\n\n  if (authLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-b from-pink-50 via-purple-50 to-blue-50\">\n        <LoadingSpinner size=\"lg\" />\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null; // Layout já faz o redirecionamento\n  }\n\n  if (pregnancyLoading || developmentLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-b from-pink-50 via-purple-50 to-blue-50\">\n        <LoadingSpinner size=\"lg\" />\n      </div>\n    );\n  }\n\n  if (!pregnancy) {\n    setLocation(\"/setup\");\n    return null;\n  }\n\n  if (!weekInfo) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-b from-pink-50 via-purple-50 to-blue-50\">\n        <div className=\"text-center p-6\">\n          <Baby className=\"mx-auto h-12 w-12 text-pink-400 mb-4\" />\n          <h2 className=\"text-xl font-semibold text-gray-800 mb-2\">\n            Erro ao calcular semana\n          </h2>\n          <p className=\"text-gray-600 mb-4\">\n            Verifique os dados da sua gravidez\n          </p>\n          <Button onClick={() => setLocation(\"/setup\")} variant=\"outline\">\n            Configurar\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  // Processar informações como texto corrido\n  const getBabyText = (text: string | string[]): string => {\n    if (Array.isArray(text)) {\n      return text.join(' ');\n    }\n    return typeof text === 'string' ? text : '';\n  };\n\n  const getMomText = (text: string | string[]): string => {\n    if (Array.isArray(text)) {\n      return text.join(' ');\n    }\n    return typeof text === 'string' ? text : '';\n  };\n\n  const babyText = development ? getBabyText(development.development_milestones_baby) : '';\n  const momText = development ? getMomText(development.development_milestones_mom) : '';\n\n  return (\n    <div className=\"min-h-screen gradient-bg relative overflow-hidden\">\n      {/* Background decorative elements - same as login */}\n      <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n        {/* Corações flutuantes */}\n        {[...Array(8)].map((_, i) => (\n          <Heart\n            key={`heart-${i}`}\n            className={`absolute text-pink-300/30 animate-float-${i % 4 + 1}`}\n            size={20 + (i % 3) * 10}\n            style={{\n              left: `${10 + (i * 12) % 80}%`,\n              top: `${15 + (i * 15) % 70}%`,\n              animationDelay: `${i * 0.7}s`,\n              animationDuration: `${3 + (i % 3)}s`\n            }}\n          />\n        ))}\n        \n        {/* Bolinhas flutuantes */}\n        {[...Array(12)].map((_, i) => (\n          <div\n            key={`bubble-${i}`}\n            className={`absolute rounded-full bg-gradient-to-r from-pink-200/20 to-blue-200/20 animate-bounce`}\n            style={{\n              width: `${8 + (i % 4) * 6}px`,\n              height: `${8 + (i % 4) * 6}px`,\n              left: `${5 + (i * 8) % 90}%`,\n              top: `${10 + (i * 8) % 80}%`,\n              animationDelay: `${i * 0.5}s`,\n              animationDuration: `${4 + (i % 3)}s`\n            }}\n          />\n        ))}\n        \n        {/* Estrelas piscantes */}\n        {[...Array(6)].map((_, i) => (\n          <div\n            key={`star-${i}`}\n            className={`absolute w-2 h-2 bg-yellow-300/40 animate-pulse`}\n            style={{\n              left: `${20 + (i * 15) % 60}%`,\n              top: `${20 + (i * 12) % 60}%`,\n              animationDelay: `${i * 1.2}s`,\n              clipPath: 'polygon(50% 0%, 61% 35%, 98% 35%, 68% 57%, 79% 91%, 50% 70%, 21% 91%, 32% 57%, 2% 35%, 39% 35%)'\n            }}\n          />\n        ))}\n      </div>\n      \n      {/* Header Section */}\n      <div className=\"relative z-10 px-4 pt-safe pb-4\">\n        <div className=\"flex items-center justify-end mb-2\">\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <button className=\"flex items-center space-x-3 text-right hover:bg-white/10 rounded-lg p-2 transition-colors\">\n                <div className=\"text-right\">\n                  <h1 className=\"text-2xl font-bold text-gray-800\" data-testid=\"text-greeting\">\n                    Olá, Mamãe!\n                  </h1>\n                  <p className=\"text-gray-600 text-lg\" data-testid=\"text-pregnancy-week\">\n                    Semana {weekInfo.week} de gestação\n                  </p>\n                </div>\n                <div className=\"w-16 h-16 bg-pink-200/50 rounded-full flex items-center justify-center\">\n                  {user.profilePhotoUrl ? (\n                    <img \n                      src={user.profilePhotoUrl} \n                      alt={user.name} \n                      className=\"w-full h-full rounded-full object-cover\"\n                    />\n                  ) : (\n                    <User className=\"h-8 w-8 text-gray-600\" />\n                  )}\n                </div>\n                <ChevronDown className=\"h-4 w-4 text-gray-600\" />\n              </button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\" className=\"w-48\">\n              <DropdownMenuItem onClick={() => setLocation(\"/profile\")} className=\"cursor-pointer\">\n                <Settings className=\"h-4 w-4 mr-2\" />\n                Perfil\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={handleLogout} className=\"cursor-pointer text-red-600\">\n                <LogOut className=\"h-4 w-4 mr-2\" />\n                Sair\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n\n        {/* Hero Section com navegação nas bordas */}\n        <div className=\"mb-8 relative\">\n          <div className=\"flex items-center justify-center mb-6 px-4 relative\">\n            {/* Botão semana anterior - CANTO ESQUERDO NA ALTURA DA IMAGEM */}\n            <button\n              onClick={goToPreviousWeek}\n              disabled={currentWeek <= 1}\n              className={`absolute left-4 top-1/2 transform -translate-y-1/2 z-20 p-3 rounded-full transition-all bg-white/90 backdrop-blur-sm border border-gray-200 shadow-lg ${\n                currentWeek <= 1 \n                  ? 'opacity-30 cursor-not-allowed' \n                  : 'hover:bg-white hover:shadow-xl active:scale-95'\n              }`}\n              data-testid=\"button-previous-week\"\n            >\n              <ChevronLeft className=\"w-6 h-6 text-gray-700\" />\n            </button>\n\n            {/* Botão próxima semana - CANTO DIREITO NA ALTURA DA IMAGEM */}\n            <button\n              onClick={goToNextWeek}\n              disabled={currentWeek >= 42}\n              className={`absolute right-4 top-1/2 transform -translate-y-1/2 z-20 p-3 rounded-full transition-all bg-white/90 backdrop-blur-sm border border-gray-200 shadow-lg ${\n                currentWeek >= 42 \n                  ? 'opacity-30 cursor-not-allowed' \n                  : 'hover:bg-white hover:shadow-xl active:scale-95'\n              }`}\n              data-testid=\"button-next-week\"\n            >\n              <ChevronRight className=\"w-6 h-6 text-gray-700\" />\n            </button>\n\n            {/* Baby 3D Component - TAMANHO MENOR E PERFEITAMENTE REDONDO */}\n            <div className=\"w-48 h-48 mx-4 rounded-full overflow-hidden border-4 border-white/30 shadow-2xl\">\n              <Baby3D week={currentWeek} className=\"w-full h-full rounded-full\" />\n            </div>\n            \n            {/* Progress Ring ao lado da imagem - MAIOR */}\n            <div className=\"relative ml-8\">\n              <svg className=\"w-32 h-32\" viewBox=\"0 0 120 120\">\n                <circle\n                  cx=\"60\"\n                  cy=\"60\"\n                  r=\"50\"\n                  fill=\"none\"\n                  stroke=\"rgba(156, 163, 175, 0.3)\"\n                  strokeWidth=\"8\"\n                />\n                <circle\n                  cx=\"60\"\n                  cy=\"60\"\n                  r=\"50\"\n                  fill=\"none\"\n                  stroke=\"url(#gradient)\"\n                  strokeWidth=\"8\"\n                  strokeLinecap=\"round\"\n                  strokeDasharray={`${Math.round((weekInfo.week / 40) * 314)} 314`}\n                  className=\"progress-ring animate-pulse\"\n                  style={{ transform: 'rotate(-90deg)', transformOrigin: 'center' }}\n                />\n                <defs>\n                  <linearGradient id=\"gradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                    <stop offset=\"0%\" stopColor=\"#ec4899\" />\n                    <stop offset=\"100%\" stopColor=\"#8b5cf6\" />\n                  </linearGradient>\n                </defs>\n              </svg>\n              <div className=\"absolute inset-0 flex items-center justify-center\">\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-gray-800\">\n                    {Math.round((weekInfo.week / 40) * 100)}%\n                  </div>\n                  <div className=\"text-gray-600 text-xs\">\n                    Concluído\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          {/* Informações da gestação - LADO A LADO */}\n          <div className=\"glass-effect rounded-2xl p-6 mx-4 backdrop-blur-md bg-white/80 mb-4\">\n            <div className=\"grid grid-cols-2 gap-6\">\n              {/* Semana atual */}\n              <div className=\"text-center\">\n                <p className=\"text-gray-700 text-lg mb-2 flex items-center justify-center gap-2\">\n                  <Calendar className=\"h-5 w-5\" />\n                  {viewingWeek && viewingWeek !== weekInfo.week ? 'Visualizando a' : 'Você está na'}\n                </p>\n                <p className=\"text-3xl font-bold text-gray-800 mb-2\">\n                  {currentWeek}ª semana\n                </p>\n                <p className=\"text-gray-600 text-sm\">\n                  {viewingWeek && viewingWeek !== weekInfo.week ? (\n                    <div className=\"flex flex-col items-center gap-2\">\n                      <span>de desenvolvimento</span>\n                      <button \n                        onClick={backToCurrentWeek}\n                        className=\"px-3 py-1 bg-blue-500 hover:bg-blue-600 text-white text-xs rounded-full transition-colors duration-200 shadow-sm\"\n                        data-testid=\"button-back-to-current-week\"\n                      >\n                        Voltar para semana atual ({weekInfo.week})\n                      </button>\n                    </div>\n                  ) : 'da sua gestação'}\n                </p>\n              </div>\n              \n              {/* Semanas restantes */}\n              <div className=\"text-center\">\n                <p className=\"text-gray-700 text-lg mb-2 flex items-center justify-center gap-2\">\n                  <Sparkles className=\"h-5 w-5\" />\n                  Faltam aproximadamente\n                </p>\n                <p className=\"text-3xl font-bold text-gray-800 mb-2\">\n                  {40 - currentWeek} semanas\n                </p>\n                <p className=\"text-gray-600 text-sm\">\n                  para conhecer seu bebê!\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n          \n        {/* Informações do bebê - horizontal */}\n        {development && (\n          <div className=\"glass-effect rounded-2xl p-4 mx-4 backdrop-blur-md bg-white/80\">\n            <div className=\"bg-gradient-to-r from-pink-50 to-blue-50 rounded-xl p-4 flex items-center justify-around\">\n              <div className=\"text-center\">\n                <Ruler className=\"h-6 w-6 mx-auto mb-1 text-blue-600\" />\n                <p className=\"text-xs text-gray-500 mb-1\">Tamanho</p>\n                <p className=\"font-semibold text-gray-800\">\n                  {development.length_cm ? `${development.length_cm} cm` : development.size || \"Calculando...\"}\n                </p>\n              </div>\n              <div className=\"text-center\">\n                <Weight className=\"h-6 w-6 mx-auto mb-1 text-pink-600\" />\n                <p className=\"text-xs text-gray-500 mb-1\">Peso</p>\n                <p className=\"font-semibold text-gray-800\">\n                  {development.weight_grams && Number(development.weight_grams) > 0 \n                    ? `${development.weight_grams}g` \n                    : development.weight || \"< 1g\"}\n                </p>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl mb-1\">{getFruitEmoji(development.fruit_comparison)}</div>\n                <p className=\"text-xs text-gray-500 mb-1\">Como</p>\n                <p className=\"font-semibold text-gray-800 text-sm\">{development.fruit_comparison || \"Calculando...\"}</p>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Seção de Conteúdos de Especialistas */}\n        <div className=\"glass-effect rounded-2xl p-5 mx-4 mt-6 backdrop-blur-md bg-white/80\">\n          <div className=\"flex items-center gap-2 mb-4\">\n            <div className=\"w-8 h-8 bg-gradient-to-br from-purple-500 to-pink-500 rounded-lg flex items-center justify-center\">\n              <span className=\"text-white text-sm\">👩‍⚕️</span>\n            </div>\n            <h3 className=\"text-lg font-semibold text-gray-800\">\n              Conteúdos para Você - Semana {currentWeek}\n            </h3>\n          </div>\n          \n          {/* Loading state */}\n          {isArticlesLoading && (\n            <div className=\"flex items-center justify-center py-8\">\n              <LoadingSpinner />\n              <span className=\"ml-2 text-gray-600\">Carregando conteúdos...</span>\n            </div>\n          )}\n\n          {/* Error state */}\n          {articlesError && (\n            <div className=\"text-center py-8\">\n              <p className=\"text-gray-500\">Nenhum conteúdo encontrado para esta semana.</p>\n            </div>\n          )}\n\n          {/* Articles */}\n          {articlesData && articlesData.articles && articlesData.articles.length > 0 && (\n            <div className=\"grid grid-cols-1 gap-4\">\n              {articlesData.articles.map((article, index) => (\n                <div \n                  key={article.id}\n                  className=\"p-4 rounded-xl border-l-4 border-blue-400 bg-blue-50\"\n                  data-testid={`article-content-${index + 1}`}\n                >\n                  <div className=\"flex items-start gap-3\">\n                    {/* Article Image or Icon */}\n                    <div className=\"w-12 h-12 rounded-lg bg-blue-100 flex items-center justify-center flex-shrink-0\">\n                      {article.image ? (\n                        <img \n                          src={article.image.startsWith('@assets/') \n                            ? article.image.replace('@assets/', '/src/assets/') \n                            : article.image\n                          }\n                          alt={article.title}\n                          className=\"w-full h-full object-cover rounded-lg\"\n                          onError={(e) => {\n                            const target = e.target as HTMLImageElement;\n                            target.style.display = 'none';\n                            const parent = target.parentElement;\n                            if (parent) {\n                              parent.innerHTML = '<span class=\"text-2xl\">📖</span>';\n                            }\n                          }}\n                        />\n                      ) : (\n                        <span className=\"text-2xl\">\n                          {article.video_url ? '🎥' : '📖'}\n                        </span>\n                      )}\n                    </div>\n                    \n                    <div className=\"flex-1\">\n                      <h4 className=\"font-semibold text-gray-800 text-sm mb-2\">\n                        {article.title}\n                      </h4>\n                      \n                      {/* Video Player */}\n                      {article.video_url && (\n                        <div className=\"mb-3\">\n                          <div className=\"relative w-full h-48 bg-gray-100 rounded-lg overflow-hidden\">\n                            {article.video_url.includes('youtube.com') || article.video_url.includes('youtu.be') ? (\n                              <iframe\n                                src={article.video_url.replace('watch?v=', 'embed/').replace('youtu.be/', 'youtube.com/embed/')}\n                                className=\"w-full h-full\"\n                                frameBorder=\"0\"\n                                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                                allowFullScreen\n                                title={article.title}\n                              ></iframe>\n                            ) : (\n                              <video \n                                controls \n                                className=\"w-full h-full\"\n                                poster={article.image || undefined}\n                              >\n                                <source src={article.video_url} type=\"video/mp4\" />\n                                Seu navegador não suporta vídeos.\n                              </video>\n                            )}\n                          </div>\n                        </div>\n                      )}\n                      \n                      {/* Description */}\n                      {article.description && (\n                        <p className=\"text-gray-600 text-sm leading-relaxed\">\n                          {article.description}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n\n          {/* Fallback to static content if no articles found */}\n          {articlesData && (!articlesData.articles || articlesData.articles.length === 0) && !isArticlesLoading && (\n            <div className=\"grid grid-cols-1 gap-4\">\n              {currentWeek === 1 && (\n              <>\n                <div className=\"p-4 rounded-xl border-l-4 border-green-400 bg-green-50\" data-testid=\"expert-content-1\">\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"w-8 h-8 rounded-full bg-green-100 flex items-center justify-center flex-shrink-0 mt-1\">\n                      <span className=\"text-sm\">💊</span>\n                    </div>\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-semibold text-gray-800 text-sm mb-2\">Ácido Fólico é Essencial</h4>\n                      <p className=\"text-gray-600 text-sm leading-relaxed\">\n                        Inicie a suplementação com ácido fólico (400-800mcg/dia) para prevenir defeitos do tubo neural. Continue mesmo antes da confirmação da gravidez.\n                      </p>\n                      <div className=\"mt-2 p-2 bg-yellow-50 border-l-2 border-yellow-300 rounded\">\n                        <p className=\"text-yellow-800 text-xs font-medium\">💡 <strong>Dica:</strong> Tome sempre no mesmo horário para criar rotina</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"p-4 rounded-xl border-l-4 border-red-400 bg-red-50\" data-testid=\"expert-content-2\">\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"w-8 h-8 rounded-full bg-red-100 flex items-center justify-center flex-shrink-0 mt-1\">\n                      <span className=\"text-sm\">🚭</span>\n                    </div>\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-semibold text-gray-800 text-sm mb-2\">Evite Álcool e Cigarros</h4>\n                      <p className=\"text-gray-600 text-sm leading-relaxed\">\n                        Não existe quantidade segura de álcool durante a gravidez. O tabaco prejudica o desenvolvimento do bebê e aumenta riscos de complicações.\n                      </p>\n                      <div className=\"mt-2 p-2 bg-yellow-50 border-l-2 border-yellow-300 rounded\">\n                        <p className=\"text-yellow-800 text-xs font-medium\">💡 <strong>Dica:</strong> Busque ajuda profissional se precisar parar de fumar</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"p-4 rounded-xl border-l-4 border-orange-400 bg-orange-50\" data-testid=\"expert-content-3\">\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"w-8 h-8 rounded-full bg-orange-100 flex items-center justify-center flex-shrink-0 mt-1\">\n                      <span className=\"text-sm\">🥗</span>\n                    </div>\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-semibold text-gray-800 text-sm mb-2\">Alimentação Balanceada</h4>\n                      <p className=\"text-gray-600 text-sm leading-relaxed\">\n                        Consuma alimentos ricos em folato (vegetais verde-escuros, leguminosas, frutas cítricas). Evite carnes cruas, peixes ricos em mercúrio.\n                      </p>\n                      <div className=\"mt-2 p-2 bg-yellow-50 border-l-2 border-yellow-300 rounded\">\n                        <p className=\"text-yellow-800 text-xs font-medium\">💡 <strong>Dica:</strong> Lave bem frutas e verduras antes do consumo</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </>\n            )}\n\n            {currentWeek === 2 && (\n              <>\n                <div className=\"p-4 rounded-xl border-l-4 border-yellow-400 bg-yellow-50\" data-testid=\"expert-content-1\">\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"w-8 h-8 rounded-full bg-yellow-100 flex items-center justify-center flex-shrink-0 mt-1\">\n                      <span className=\"text-sm\">🤢</span>\n                    </div>\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-semibold text-gray-800 text-sm mb-2\">Primeiros Sintomas são Normais</h4>\n                      <p className=\"text-gray-600 text-sm leading-relaxed\">\n                        Náuseas, cansaço e sensibilidade nos seios são comuns. Estes sintomas indicam que os hormônios estão funcionando adequadamente.\n                      </p>\n                      <div className=\"mt-2 p-2 bg-yellow-50 border-l-2 border-yellow-300 rounded\">\n                        <p className=\"text-yellow-800 text-xs font-medium\">💡 <strong>Dica:</strong> Coma pequenas refeições frequentes para minimizar náuseas</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"p-4 rounded-xl border-l-4 border-blue-400 bg-blue-50\" data-testid=\"expert-content-2\">\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"w-8 h-8 rounded-full bg-blue-100 flex items-center justify-center flex-shrink-0 mt-1\">\n                      <span className=\"text-sm\">💧</span>\n                    </div>\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-semibold text-gray-800 text-sm mb-2\">Hidratação é Fundamental</h4>\n                      <p className=\"text-gray-600 text-sm leading-relaxed\">\n                        Beba pelo menos 8-10 copos de água por dia. A desidratação pode piorar náuseas e causar constipação.\n                      </p>\n                      <div className=\"mt-2 p-2 bg-yellow-50 border-l-2 border-yellow-300 rounded\">\n                        <p className=\"text-yellow-800 text-xs font-medium\">💡 <strong>Dica:</strong> Mantenha uma garrafa d'água sempre por perto</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"p-4 rounded-xl border-l-4 border-purple-400 bg-purple-50\" data-testid=\"expert-content-3\">\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"w-8 h-8 rounded-full bg-purple-100 flex items-center justify-center flex-shrink-0 mt-1\">\n                      <span className=\"text-sm\">👩‍⚕️</span>\n                    </div>\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-semibold text-gray-800 text-sm mb-2\">Agende sua Primeira Consulta</h4>\n                      <p className=\"text-gray-600 text-sm leading-relaxed\">\n                        Procure um obstetra para confirmar a gravidez e iniciar o pré-natal. Exames de rotina serão solicitados.\n                      </p>\n                      <div className=\"mt-2 p-2 bg-yellow-50 border-l-2 border-yellow-300 rounded\">\n                        <p className=\"text-yellow-800 text-xs font-medium\">💡 <strong>Dica:</strong> Leve uma lista de dúvidas para a consulta</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </>\n            )}\n\n            {currentWeek === 3 && (\n              <>\n                <div className=\"p-4 rounded-xl border-l-4 border-indigo-400 bg-indigo-50\" data-testid=\"expert-content-1\">\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"w-8 h-8 rounded-full bg-indigo-100 flex items-center justify-center flex-shrink-0 mt-1\">\n                      <span className=\"text-sm\">🧠</span>\n                    </div>\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-semibold text-gray-800 text-sm mb-2\">Desenvolvimento Neural Crítico</h4>\n                      <p className=\"text-gray-600 text-sm leading-relaxed\">\n                        O tubo neural está se formando. É crucial manter a suplementação de ácido fólico e evitar medicamentos sem prescrição médica.\n                      </p>\n                      <div className=\"mt-2 p-2 bg-yellow-50 border-l-2 border-yellow-300 rounded\">\n                        <p className=\"text-yellow-800 text-xs font-medium\">💡 <strong>Dica:</strong> Consulte sempre seu médico antes de tomar qualquer medicamento</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"p-4 rounded-xl border-l-4 border-green-400 bg-green-50\" data-testid=\"expert-content-2\">\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"w-8 h-8 rounded-full bg-green-100 flex items-center justify-center flex-shrink-0 mt-1\">\n                      <span className=\"text-sm\">🚶‍♀️</span>\n                    </div>\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-semibold text-gray-800 text-sm mb-2\">Exercícios Leves são Benéficos</h4>\n                      <p className=\"text-gray-600 text-sm leading-relaxed\">\n                        Caminhadas, yoga pré-natal e natação são recomendados. Exercícios ajudam com náuseas, humor e preparam o corpo para mudanças.\n                      </p>\n                      <div className=\"mt-2 p-2 bg-yellow-50 border-l-2 border-yellow-300 rounded\">\n                        <p className=\"text-yellow-800 text-xs font-medium\">💡 <strong>Dica:</strong> Comece devagar, 15-20 minutos por dia</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"p-4 rounded-xl border-l-4 border-pink-400 bg-pink-50\" data-testid=\"expert-content-3\">\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"w-8 h-8 rounded-full bg-pink-100 flex items-center justify-center flex-shrink-0 mt-1\">\n                      <span className=\"text-sm\">😴</span>\n                    </div>\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-semibold text-gray-800 text-sm mb-2\">Descanso Adequado</h4>\n                      <p className=\"text-gray-600 text-sm leading-relaxed\">\n                        Seu corpo está trabalhando duro! Durma 7-9 horas por noite e faça pausas durante o dia se possível.\n                      </p>\n                      <div className=\"mt-2 p-2 bg-yellow-50 border-l-2 border-yellow-300 rounded\">\n                        <p className=\"text-yellow-800 text-xs font-medium\">💡 <strong>Dica:</strong> Crie uma rotina relaxante antes de dormir</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </>\n            )}\n\n            {currentWeek > 3 && (\n              <>\n                <div className=\"p-4 rounded-xl border-l-4 border-blue-400 bg-blue-50\" data-testid=\"expert-content-1\">\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"w-8 h-8 rounded-full bg-blue-100 flex items-center justify-center flex-shrink-0 mt-1\">\n                      <span className=\"text-sm\">📋</span>\n                    </div>\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-semibold text-gray-800 text-sm mb-2\">Mantenha o Pré-natal em Dia</h4>\n                      <p className=\"text-gray-600 text-sm leading-relaxed\">\n                        Continue as consultas regulares e exames de rotina conforme orientação médica. O acompanhamento é essencial para sua saúde e do bebê.\n                      </p>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"p-4 rounded-xl border-l-4 border-green-400 bg-green-50\" data-testid=\"expert-content-2\">\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"w-8 h-8 rounded-full bg-green-100 flex items-center justify-center flex-shrink-0 mt-1\">\n                      <span className=\"text-sm\">🍎</span>\n                    </div>\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-semibold text-gray-800 text-sm mb-2\">Alimentação Saudável</h4>\n                      <p className=\"text-gray-600 text-sm leading-relaxed\">\n                        Mantenha uma dieta equilibrada rica em frutas, vegetais, proteínas e grãos integrais. Evite alimentos crus ou mal cozidos.\n                      </p>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"p-4 rounded-xl border-l-4 border-purple-400 bg-purple-50\" data-testid=\"expert-content-3\">\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"w-8 h-8 rounded-full bg-purple-100 flex items-center justify-center flex-shrink-0 mt-1\">\n                      <span className=\"text-sm\">💆‍♀️</span>\n                    </div>\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-semibold text-gray-800 text-sm mb-2\">Cuide do seu Bem-estar</h4>\n                      <p className=\"text-gray-600 text-sm leading-relaxed\">\n                        Pratique técnicas de relaxamento, durma adequadamente e mantenha-se hidratada. Seu bem-estar reflete na saúde do bebê.\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </>\n              )}\n            </div>\n          )}\n        </div>\n        \n        {/* Card da próxima consulta */}\n        <div className=\"mx-4 mt-4\">\n          <NextConsultationCard />\n        </div>\n      </div>\n\n      {/* Mom/Baby Toggle */}\n      <div className=\"px-4 mb-6\">\n        <div className=\"bg-white/60 backdrop-blur-sm rounded-full p-1 flex border border-gray-200\">\n          <button\n            onClick={() => setActiveTab(\"mom\")}\n            className={`flex-1 py-3 px-6 rounded-full text-sm font-medium transition-all ${\n              activeTab === \"mom\"\n                ? \"bg-gradient-to-r from-pink-400 to-rose-400 text-white shadow-lg\"\n                : \"text-gray-600\"\n            }`}\n            data-testid=\"tab-mom\"\n          >\n            Mamãe\n          </button>\n          <button\n            onClick={() => setActiveTab(\"baby\")}\n            className={`flex-1 py-3 px-6 rounded-full text-sm font-medium transition-all ${\n              activeTab === \"baby\"\n                ? \"bg-white text-blue-600 shadow-lg\"\n                : \"text-gray-600\"\n            }`}\n            data-testid=\"tab-baby\"\n          >\n            Bebê\n          </button>\n        </div>\n      </div>\n\n      {/* Content Area */}\n      <div className=\"relative z-10 px-4\">\n\n        {activeTab === \"baby\" && (\n          <Card className=\"bg-white/90 backdrop-blur-md border border-gray-200 shadow-xl mb-6\">\n            <CardContent className=\"p-6\">\n              {/* Baby Development Information */}\n              {babyText ? (\n                <div className=\"bg-gradient-to-br from-blue-50 to-indigo-50 rounded-2xl p-6\">\n                  <h3 className=\"text-gray-800 font-semibold mb-4 flex items-center gap-2\">\n                    <Baby className=\"h-5 w-5 text-blue-600\" />\n                    Desenvolvimento do Bebê\n                  </h3>\n                  <p className=\"text-gray-700 text-sm leading-relaxed\">\n                    {babyText}\n                  </p>\n                </div>\n              ) : (\n                <div className=\"bg-blue-50 rounded-2xl p-6 text-center\">\n                  <Baby className=\"h-12 w-12 mx-auto mb-4 text-blue-400\" />\n                  <h3 className=\"text-gray-800 font-semibold mb-2\">\n                    Desenvolvimento do Bebê\n                  </h3>\n                  <p className=\"text-gray-600 text-sm\">\n                    Consultando informações sobre o desenvolvimento do bebê para esta semana...\n                  </p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        )}\n\n        {activeTab === \"mom\" && (\n          <Card className=\"bg-white/90 backdrop-blur-md border border-gray-200 shadow-xl mb-6\">\n            <CardContent className=\"p-6\">\n              {/* Mom Development Information */}\n              {momText ? (\n                <div className=\"bg-gradient-to-br from-rose-50 to-pink-50 rounded-2xl p-6\">\n                  <h3 className=\"text-gray-800 font-semibold mb-4 flex items-center gap-2\">\n                    <Heart className=\"h-5 w-5 text-rose-600\" />\n                    Mudanças na Mamãe\n                  </h3>\n                  <p className=\"text-gray-700 text-sm leading-relaxed\">\n                    {momText}\n                  </p>\n                </div>\n              ) : (\n                <div className=\"bg-pink-50 rounded-2xl p-6 text-center\">\n                  <Heart className=\"h-12 w-12 mx-auto mb-4 text-pink-400\" />\n                  <h3 className=\"text-gray-800 font-semibold mb-2\">\n                    Mudanças na Mamãe\n                  </h3>\n                  <p className=\"text-gray-600 text-sm\">\n                    Consultando informações sobre mudanças no corpo da mamãe para esta semana...\n                  </p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Menu de Opções - direto na página */}\n        <div className=\"px-4 mt-8\">\n          <h3 className=\"text-lg font-semibold text-gray-800 mb-4\">O que você gostaria de fazer?</h3>\n          \n          <div className=\"grid grid-cols-2 gap-4\">\n            <Button\n              onClick={() => setLocation(\"/weight-tracking\")}\n              className=\"h-20 bg-gradient-to-r from-pink-400 to-rose-400 hover:from-pink-500 hover:to-rose-500 text-white shadow-lg flex flex-col items-center justify-center space-y-2\"\n              data-testid=\"button-weight-tracking\"\n            >\n              <Weight className=\"h-6 w-6\" />\n              <span className=\"text-sm font-medium\">Controle de Peso</span>\n            </Button>\n\n            <Button\n              onClick={() => setLocation(\"/kick-counter\")}\n              className=\"h-20 bg-gradient-to-r from-blue-400 to-indigo-400 hover:from-blue-500 hover:to-indigo-500 text-white shadow-lg flex flex-col items-center justify-center space-y-2\"\n              data-testid=\"button-kick-counter\"\n            >\n              <Activity className=\"h-6 w-6\" />\n              <span className=\"text-sm font-medium\">Contar Chutes</span>\n            </Button>\n\n            <Button\n              onClick={() => setLocation(\"/birth-plan\")}\n              className=\"h-20 bg-gradient-to-r from-green-400 to-emerald-400 hover:from-green-500 hover:to-emerald-500 text-white shadow-lg flex flex-col items-center justify-center space-y-2\"\n              data-testid=\"button-birth-plan\"\n            >\n              <Heart className=\"h-6 w-6\" />\n              <span className=\"text-sm font-medium\">Plano de Parto</span>\n            </Button>\n\n            <Button\n              onClick={() => setLocation(\"/consultations\")}\n              className=\"h-20 bg-gradient-to-r from-purple-400 to-violet-400 hover:from-purple-500 hover:to-violet-500 text-white shadow-lg flex flex-col items-center justify-center space-y-2\"\n              data-testid=\"button-consultations\"\n            >\n              <Calendar className=\"h-6 w-6\" />\n              <span className=\"text-sm font-medium\">Consultas</span>\n            </Button>\n\n            <Button\n              onClick={() => setLocation(\"/shopping-list\")}\n              className=\"h-20 bg-gradient-to-r from-orange-400 to-amber-400 hover:from-orange-500 hover:to-amber-500 text-white shadow-lg flex flex-col items-center justify-center space-y-2\"\n              data-testid=\"button-shopping\"\n            >\n              <Apple className=\"h-6 w-6\" />\n              <span className=\"text-sm font-medium\">Lista de Compras</span>\n            </Button>\n\n            <Button\n              onClick={() => setLocation(\"/photo-album\")}\n              className=\"h-20 bg-gradient-to-r from-teal-400 to-cyan-400 hover:from-teal-500 hover:to-cyan-500 text-white shadow-lg flex flex-col items-center justify-center space-y-2\"\n              data-testid=\"button-photos\"\n            >\n              <Info className=\"h-6 w-6\" />\n              <span className=\"text-sm font-medium\">Fotos</span>\n            </Button>\n\n            <Button\n              onClick={() => setLocation(\"/diary\")}\n              className=\"h-20 bg-gradient-to-r from-rose-400 to-pink-400 hover:from-rose-500 hover:to-pink-500 text-white shadow-lg flex flex-col items-center justify-center space-y-2\"\n              data-testid=\"button-diary\"\n            >\n              <Book className=\"h-6 w-6\" />\n              <span className=\"text-sm font-medium\">Diário</span>\n            </Button>\n\n            <Button\n              onClick={() => setLocation(\"/analytics\")}\n              className=\"h-20 bg-gradient-to-r from-indigo-400 to-blue-400 hover:from-indigo-500 hover:to-blue-500 text-white shadow-lg flex flex-col items-center justify-center space-y-2\"\n              data-testid=\"button-analytics\"\n            >\n              <TrendingUp className=\"h-6 w-6\" />\n              <span className=\"text-sm font-medium\">Analytics</span>\n            </Button>\n\n            <Button\n              onClick={() => setLocation(\"/medical-articles\")}\n              className=\"h-20 bg-gradient-to-r from-emerald-400 to-teal-400 hover:from-emerald-500 hover:to-teal-500 text-white shadow-lg flex flex-col items-center justify-center space-y-2\"\n              data-testid=\"button-medical-articles\"\n            >\n              <Stethoscope className=\"h-6 w-6\" />\n              <span className=\"text-sm font-medium\">Artigos Médicos</span>\n            </Button>\n          </div>\n        </div>\n\n      </div>\n\n      {/* Footer com espaçamento */}\n      <footer className=\"mt-12 pb-24 px-4\">\n        <div className=\"bg-gradient-to-r from-pink-50/80 to-blue-50/80 rounded-2xl p-6 text-center backdrop-blur-sm border border-white/50\">\n          <div className=\"flex items-center justify-center mb-3\">\n            <Heart className=\"h-5 w-5 text-pink-400 mr-2\" />\n            <h3 className=\"text-gray-700 font-medium\">Mama Care</h3>\n            <Heart className=\"h-5 w-5 text-pink-400 ml-2\" />\n          </div>\n          <p className=\"text-gray-600 text-sm mb-2\">\n            Cuidando de você e seu bebê em cada momento\n          </p>\n          <p className=\"text-gray-500 text-xs\">\n            © 2025 Mama Care - Sua jornada da maternidade\n          </p>\n        </div>\n      </footer>\n\n\n    </div>\n  );\n}\n","size_bytes":43920},"client/src/pages/dashboard-temp.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { ArrowLeft, ArrowRight, Ruler, Weight, Calendar, Plus } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport Baby3D from \"../components/Baby3D\";\nimport { useBabyDevelopment } from \"../hooks/use-baby-development\";\nimport { useArticles } from \"../hooks/use-articles\";\nimport type { User } from \"@shared/schema\";\nimport { useAuth } from \"../hooks/useAuth\";\nimport NextConsultationCard from \"../components/NextConsultationCard\";\nimport LoadingSpinner from \"../components/LoadingSpinner\";\n// ... rest of imports\n\nexport default function Dashboard() {\n  const [location] = useLocation();\n  const { user } = useAuth();\n  const [currentWeek, setCurrentWeek] = useState(() => {\n    const urlWeek = new URLSearchParams(location.split('?')[1] || '').get('week');\n    return urlWeek ? parseInt(urlWeek, 10) : 1;\n  });\n  \n  const [activeTab, setActiveTab] = useState<\"mom\" | \"baby\">(\"baby\");\n  \n  const { data: development, isLoading: isLoadingDevelopment } = useBabyDevelopment(currentWeek);\n  const { data: articlesData, isLoading: isArticlesLoading, error: articlesError } = useArticles(currentWeek);\n\n  const navigateToWeek = (direction: 'prev' | 'next') => {\n    const newWeek = direction === 'prev' ? Math.max(1, currentWeek - 1) : Math.min(40, currentWeek + 1);\n    setCurrentWeek(newWeek);\n    window.history.pushState({}, '', `/?week=${newWeek}`);\n  };\n\n  const getFruitEmoji = (fruit: string | null) => {\n    if (!fruit) return \"🤔\";\n    const fruitMap: Record<string, string> = {\n      \"grão de areia\": \"🟡\",\n      \"cabeça de alfinete\": \"📍\", \n      \"semente de chia\": \"⚪\",\n      \"semente de papoula\": \"⚫\",\n      \"framboesa\": \"🫐\",\n      \"lima\": \"🟢\",\n      \"limão\": \"🍋\",\n      \"banana\": \"🍌\",\n      \"milho\": \"🌽\",\n      \"berinjela\": \"🍆\"\n    };\n    return fruitMap[fruit.toLowerCase()] || \"🍎\";\n  };\n\n  return (\n    <div className=\"bg-gradient-to-br from-pink-50 via-purple-50 to-blue-50 min-h-screen pb-20\">\n      {/* Header */}\n      <div className=\"bg-white/60 backdrop-blur-sm border-b border-pink-100 sticky top-0 z-40\">\n        <div className=\"flex items-center justify-between p-4\">\n          <div>\n            <h1 className=\"text-xl font-bold text-gray-800\">Mama Care</h1>\n            <p className=\"text-sm text-gray-600\">Olá, {user?.name?.split(' ')[0] || 'Mamãe'}!</p>\n          </div>\n          <div className=\"text-right\">\n            <p className=\"text-sm text-gray-600\">Semana {currentWeek}</p>\n            <p className=\"text-xs text-gray-500\">{40 - currentWeek} semanas restantes</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Rest of the component continues... */}\n      \n      {/* Expert Content Section - Simple Version */}\n      <div className=\"glass-effect rounded-2xl p-5 mx-4 mt-6 backdrop-blur-md bg-white/80\">\n        <div className=\"flex items-center gap-2 mb-4\">\n          <div className=\"w-8 h-8 bg-gradient-to-br from-purple-500 to-pink-500 rounded-lg flex items-center justify-center\">\n            <span className=\"text-white text-sm\">👩‍⚕️</span>\n          </div>\n          <h3 className=\"text-lg font-semibold text-gray-800\">\n            Conteúdos para Você - Semana {currentWeek}\n          </h3>\n        </div>\n        \n        <div className=\"grid grid-cols-1 gap-4\">\n          {isArticlesLoading ? (\n            <div className=\"flex items-center justify-center py-8\">\n              <LoadingSpinner />\n              <span className=\"ml-2 text-gray-600\">Carregando conteúdos...</span>\n            </div>\n          ) : articlesData?.articles && articlesData.articles.length > 0 ? (\n            articlesData.articles.map((article, index) => (\n              <div \n                key={article.id}\n                className=\"p-4 rounded-xl border-l-4 border-blue-400 bg-blue-50\"\n                data-testid={`article-content-${index + 1}`}\n              >\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-12 h-12 rounded-lg bg-blue-100 flex items-center justify-center flex-shrink-0\">\n                    <span className=\"text-2xl\">\n                      {article.video_url ? '🎥' : '📖'}\n                    </span>\n                  </div>\n                  \n                  <div className=\"flex-1\">\n                    <h4 className=\"font-semibold text-gray-800 text-sm mb-2\">\n                      {article.title}\n                    </h4>\n                    \n                    {article.video_url && (\n                      <div className=\"mb-3\">\n                        <div className=\"relative w-full h-48 bg-gray-100 rounded-lg overflow-hidden\">\n                          {article.video_url.includes('youtube.com') || article.video_url.includes('youtu.be') ? (\n                            <iframe\n                              src={article.video_url.replace('watch?v=', 'embed/').replace('youtu.be/', 'youtube.com/embed/')}\n                              className=\"w-full h-full\"\n                              frameBorder=\"0\"\n                              allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                              allowFullScreen\n                              title={article.title}\n                            />\n                          ) : (\n                            <video \n                              controls \n                              className=\"w-full h-full\"\n                            >\n                              <source src={article.video_url} type=\"video/mp4\" />\n                              Seu navegador não suporta vídeos.\n                            </video>\n                          )}\n                        </div>\n                      </div>\n                    )}\n                    \n                    {article.description && (\n                      <p className=\"text-gray-600 text-sm leading-relaxed\">\n                        {article.description}\n                      </p>\n                    )}\n                  </div>\n                </div>\n              </div>\n            ))\n          ) : currentWeek === 1 ? (\n            <>\n              <div className=\"p-4 rounded-xl border-l-4 border-green-400 bg-green-50\" data-testid=\"expert-content-1\">\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-8 h-8 rounded-full bg-green-100 flex items-center justify-center flex-shrink-0 mt-1\">\n                    <span className=\"text-sm\">📖</span>\n                  </div>\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-semibold text-gray-800 text-sm mb-2\">Primeira Consulta Pré-natal</h4>\n                    <p className=\"text-gray-600 text-sm leading-relaxed\">\n                      Agende sua primeira consulta com o obstetra. É importante iniciar o acompanhamento médico o quanto antes para garantir uma gravidez saudável.\n                    </p>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"p-4 rounded-xl border-l-4 border-blue-400 bg-blue-50\" data-testid=\"expert-content-2\">\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-8 h-8 rounded-full bg-green-100 flex items-center justify-center flex-shrink-0 mt-1\">\n                    <span className=\"text-sm\">🍎</span>\n                  </div>\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-semibold text-gray-800 text-sm mb-2\">Alimentação Saudável</h4>\n                    <p className=\"text-gray-600 text-sm leading-relaxed\">\n                      Mantenha uma dieta equilibrada rica em frutas, vegetais, proteínas e grãos integrais. Evite alimentos crus ou mal cozidos.\n                    </p>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"p-4 rounded-xl border-l-4 border-purple-400 bg-purple-50\" data-testid=\"expert-content-3\">\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-8 h-8 rounded-full bg-purple-100 flex items-center justify-center flex-shrink-0 mt-1\">\n                    <span className=\"text-sm\">💆‍♀️</span>\n                  </div>\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-semibold text-gray-800 text-sm mb-2\">Cuide do seu Bem-estar</h4>\n                    <p className=\"text-gray-600 text-sm leading-relaxed\">\n                      Pratique técnicas de relaxamento, durma adequadamente e mantenha-se hidratada. Seu bem-estar reflete na saúde do bebê.\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </>\n          ) : null}\n        </div>\n      </div>\n      \n      {/* Rest of component... */}\n    </div>\n  );\n}","size_bytes":8876},"client/src/components/VideoSection.tsx":{"content":"import { Play, Clock, Heart } from \"lucide-react\";\n\ninterface VideoSectionProps {\n  videos: Array<{\n    id: string;\n    title: string;\n    description?: string | null;\n    video_url?: string | null;\n    type?: string;\n  }>;\n  isLoading?: boolean;\n  currentWeek: number;\n}\n\nexport function VideoSection({ videos, isLoading, currentWeek }: VideoSectionProps) {\n  const videoContent = videos?.filter(item => item.video_url) || [];\n\n  if (isLoading) {\n    return (\n      <div className=\"mx-4 mb-6\">\n        <div className=\"bg-white/80 backdrop-blur-sm rounded-2xl shadow-lg p-6 border border-gray-100\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-6 bg-gray-200 rounded w-1/3 mb-4\"></div>\n            <div className=\"aspect-video bg-gray-200 rounded-xl\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!videoContent.length) {\n    return null;\n  }\n\n  const featuredVideo = videoContent[0];\n\n  return (\n    <div className=\"mx-4 mb-6\">\n      <div className=\"bg-white/80 backdrop-blur-sm rounded-2xl shadow-lg overflow-hidden border border-gray-100\">\n        {/* Header */}\n        <div className=\"p-6 pb-4\">\n          <div className=\"flex items-center gap-3 mb-3\">\n            <div className=\"w-10 h-10 bg-gradient-to-br from-pink-400 to-purple-500 rounded-full flex items-center justify-center\">\n              <Play className=\"w-5 h-5 text-white\" />\n            </div>\n            <div>\n              <h3 className=\"text-lg font-semibold text-gray-800\">\n                Vídeo da Semana {currentWeek}\n              </h3>\n              <p className=\"text-sm text-gray-600\">Conteúdo especial para você</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Video Content */}\n        <div className=\"px-6 pb-6\">\n          <div className=\"bg-gradient-to-br from-gray-50 to-gray-100 rounded-xl overflow-hidden\">\n            {/* Video iframe */}\n            <div className=\"aspect-video relative\">\n              <iframe\n                src={featuredVideo.video_url || ''}\n                title={featuredVideo.title}\n                frameBorder=\"0\"\n                allowFullScreen\n                className=\"w-full h-full rounded-t-xl\"\n                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n              />\n            </div>\n            \n            {/* Video Info */}\n            <div className=\"p-4\">\n              <h4 className=\"font-semibold text-gray-800 mb-2 flex items-center gap-2\">\n                <Heart className=\"w-4 h-4 text-pink-500\" />\n                {featuredVideo.title}\n              </h4>\n              {featuredVideo.description && (\n                <p className=\"text-sm text-gray-600 leading-relaxed mb-3\">\n                  {featuredVideo.description}\n                </p>\n              )}\n              <div className=\"flex items-center gap-4 text-xs text-gray-500\">\n                <div className=\"flex items-center gap-1\">\n                  <Clock className=\"w-3 h-3\" />\n                  <span>Ideal para esta semana</span>\n                </div>\n                <div className=\"flex items-center gap-1\">\n                  <div className=\"w-2 h-2 bg-green-400 rounded-full\"></div>\n                  <span>Conteúdo verificado</span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Additional Videos */}\n          {videoContent.length > 1 && (\n            <div className=\"mt-4\">\n              <h5 className=\"text-sm font-medium text-gray-700 mb-3\">\n                Outros vídeos desta semana\n              </h5>\n              <div className=\"space-y-2\">\n                {videoContent.slice(1).map((video) => (\n                  <div\n                    key={video.id}\n                    className=\"flex items-center gap-3 p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors cursor-pointer\"\n                  >\n                    <div className=\"w-8 h-8 bg-gradient-to-br from-pink-400 to-purple-500 rounded-lg flex items-center justify-center flex-shrink-0\">\n                      <Play className=\"w-4 h-4 text-white\" />\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"text-sm font-medium text-gray-800 truncate\">\n                        {video.title}\n                      </p>\n                      {video.description && (\n                        <p className=\"text-xs text-gray-600 truncate\">\n                          {video.description}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":4732}},"version":1}