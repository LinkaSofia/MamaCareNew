// Script para atualizar artigos com categorias baseadas nos t√≠tulos
const { Pool } = require('@neondatabase/serverless');

// Mapeamento de palavras-chave para categorias
const categoryMapping = {
  'candid√≠ase': 'gestacao',
  'ginecologista': 'gestacao',
  'consulta': 'gestacao',
  'm√©dico': 'gestacao',
  'gesta√ß√£o': 'gestacao',
  'gestante': 'gestacao',
  'parto': 'preparacao-parto',
  'adequado': 'preparacao-parto',
  'guia': 'gestacao',
  'orienta√ß√µes': 'gestacao',
  'alimenta√ß√£o': 'saude-bem-estar',
  'nutri√ß√£o': 'saude-bem-estar',
  'exerc√≠cio': 'saude-bem-estar',
  'atividade': 'saude-bem-estar',
  'sa√∫de': 'saude-bem-estar',
  'bem-estar': 'saude-bem-estar',
  'amamenta√ß√£o': 'pos-parto',
  'p√≥s-parto': 'pos-parto',
  'puerp√©rio': 'pos-parto',
  'beb√™': 'cuidados-bebe',
  'cuidados': 'cuidados-bebe',
  'fam√≠lia': 'rede-apoio',
  'apoio': 'rede-apoio',
  'direitos': 'rede-apoio'
};

function getCategoryFromTitle(title) {
  const titleLower = title.toLowerCase();
  
  for (const [keyword, category] of Object.entries(categoryMapping)) {
    if (titleLower.includes(keyword)) {
      return category;
    }
  }
  
  return 'gestacao'; // Default
}

async function updateArticlesCategories() {
  let pool;
  
  try {
    console.log('üè∑Ô∏è Iniciando atualiza√ß√£o de categorias dos artigos...');
    
    // Configurar pool de conex√£o
    if (!process.env.DATABASE_URL) {
      console.log('‚ùå DATABASE_URL n√£o encontrada. Mostrando categorias que seriam aplicadas:');
      console.log('\nüìã Exemplos de categoriza√ß√£o:');
      console.log('1. "Papo com Gineco sobre Candid√≠ase na Gravidez" ‚Üí gestacao');
      console.log('2. "GUIA DA GESTANTE: PASSO A PASSO PARA UM PARTO ADEQUADO" ‚Üí preparacao-parto');
      console.log('3. "Orienta√ß√µes Gerais Sobre a Gesta√ß√£o" ‚Üí gestacao');
      return;
    }
    
    pool = new Pool({ connectionString: process.env.DATABASE_URL });
    
    // Buscar todos os artigos
    const allArticles = await pool.query(`
      SELECT id, title, week, video_url, image, source, type, description, categoria
      FROM articles 
      WHERE is_active IS NULL OR is_active = true
      ORDER BY week, created_at
    `);
    
    console.log(`üìã Encontrados ${allArticles.rows.length} artigos`);
    
    for (const article of allArticles.rows) {
      console.log(`\nüìÑ Processando: "${article.title}"`);
      
      // Se j√° tem categoria, pular
      if (article.categoria) {
        console.log('   ‚úÖ J√° possui categoria, pulando...');
        continue;
      }
      
      // Gerar categoria baseada no t√≠tulo
      const categoria = getCategoryFromTitle(article.title);
      
      // Atualizar o artigo com a categoria
      await pool.query(
        'UPDATE articles SET categoria = $1 WHERE id = $2',
        [categoria, article.id]
      );
      
      console.log(`   ‚úÖ Categoria atualizada: ${categoria}`);
    }
    
    console.log('\nüéâ Atualiza√ß√£o de categorias conclu√≠da!');
    
    // Mostrar resultado final
    const updatedArticles = await pool.query(`
      SELECT id, title, week, categoria
      FROM articles 
      WHERE is_active IS NULL OR is_active = true
      ORDER BY categoria, week
    `);
    
    console.log('\nüìã Artigos com categorias:');
    const categories = {};
    updatedArticles.rows.forEach(article => {
      if (!categories[article.categoria]) {
        categories[article.categoria] = [];
      }
      categories[article.categoria].push(article);
    });
    
    Object.entries(categories).forEach(([category, articles]) => {
      console.log(`\nüè∑Ô∏è ${category.toUpperCase()}:`);
      articles.forEach(article => {
        console.log(`   ‚Ä¢ ${article.title} (Semana ${article.week})`);
      });
    });
    
  } catch (error) {
    console.error('‚ùå Erro ao atualizar categorias:', error.message);
  } finally {
    if (pool) {
      await pool.end();
    }
  }
}

// Executar o script
updateArticlesCategories();










